import { WEBGPU } from 'internal:constants';
import { gfx, promiseForWebGPUInstantiation } from '../../webgpu/instantiated';

export let Device = undefined;
export let WebGPUDevice = undefined;
export let Queue = undefined;
export let Swapchain = undefined;
export let Buffer = undefined;
export let Texture = undefined;
export let Shader = undefined;
export let Sampler = undefined;
export let InputAssembler = undefined;
export let RenderPass = undefined;
export let Framebuffer = undefined;
export let DescriptorSet = undefined;
export let DescriptorSetLayout = undefined;
export let PipelineLayout = undefined;
export let PipelineState = undefined;
export let CommandBuffer = undefined;
export let GeneralBarrier = undefined;
export let TextureBarrier = undefined;
export let BufferBarrier = undefined;

WEBGPU && promiseForWebGPUInstantiation.then(() => {
    Device = gfx.CCWGPUDevice;
    WebGPUDevice = gfx.CCWGPUDevice;
    Queue = gfx.CCWGPUQueue;
    Swapchain = gfx.CCWGPUSwapchain;
    Buffer = gfx.CCWGPUBuffer;
    Texture = gfx.CCWGPUTexture;
    Shader = gfx.CCWGPUShader;
    Sampler = gfx.CCWGPUSampler;
    InputAssembler = gfx.CCWGPUInputAssembler;
    RenderPass = gfx.CCWGPURenderPass;
    Framebuffer = gfx.CCWGPUFramebuffer;
    DescriptorSet = gfx.CCWGPUDescriptorSet;
    DescriptorSetLayout = gfx.CCWGPUDescriptorSetLayout;
    PipelineLayout = gfx.CCWGPUPipelineLayout;
    PipelineState = gfx.CCWGPUPipelineState;
    CommandBuffer = gfx.CCWGPUCommandBuffer;
    GeneralBarrier = gfx.WGPUGeneralBarrier;
    TextureBarrier = gfx.WGPUTextureBarrier;
    BufferBarrier = gfx.WGPUBufferBarrier;
});
