import { Vec2 } from '../../cocos/core';
import { ParticleEmitter } from '../../cocos/vfx/particle-emitter';
import { ModuleExecStage } from '../../cocos/vfx/particle-module';
describe('ParticleEmitter', () => {
    test('Parameters Validation', () => {
        const particleEmitter = new ParticleEmitter();
        expect(particleEmitter.duration).toBe(5);
        particleEmitter.duration = -1;
        expect(particleEmitter.duration).toBe(0.01);
        expect(particleEmitter.loopCount).toBe(1);
        particleEmitter.loopCount = 0;
        expect(particleEmitter.loopCount).toBe(1);
        particleEmitter.loopCount = 2.2;
        expect(particleEmitter.loopCount).toBe(2);
        expect(particleEmitter.delayRange).toStrictEqual(new Vec2());
        particleEmitter.delayRange = new Vec2(-1, -0.2);
        expect(particleEmitter.delayRange).toStrictEqual(new Vec2(0, 0));
        expect(particleEmitter.prewarmTime).toStrictEqual(5);
        particleEmitter.prewarmTime = -1;
        expect(particleEmitter.prewarmTime).toStrictEqual(0.001);
        expect(particleEmitter.prewarmTimeStep).toStrictEqual(0.03);
        particleEmitter.prewarmTimeStep = -1;
        expect(particleEmitter.prewarmTimeStep).toStrictEqual(0.001);
        expect(particleEmitter.simulationSpeed).toStrictEqual(1);
        particleEmitter.simulationSpeed = -1;
        expect(particleEmitter.simulationSpeed).toStrictEqual(0.001);
        expect(particleEmitter.maxDeltaTime).toStrictEqual(0.05);
        expect(particleEmitter.capacity).toBe(100);
        particleEmitter.capacity = -1;
        expect(particleEmitter.capacity).toBe(0);
        particleEmitter.capacity = 123.2;
        expect(particleEmitter.capacity).toBe(123);
        expect(particleEmitter.randomSeed).toBe(0);
        particleEmitter.randomSeed = -1;
        expect(particleEmitter.randomSeed).toBe(-1 >>> 0);
        particleEmitter.randomSeed = 23121.2213;
        expect(particleEmitter.randomSeed).toBe(23121);
    });

    test('Event Handler', () => {
        const particleEmitter = new ParticleEmitter();
        expect(particleEmitter.eventHandlers.length).toBe(0);
        expect(particleEmitter.eventHandlerCount).toBe(0);
        expect(() => particleEmitter.getEventHandlerAt(0)).toThrowError();
        const eventHandler = particleEmitter.addEventHandler();
        expect(eventHandler.execStage).toBe(ModuleExecStage.EVENT_HANDLER);
        expect(eventHandler.modules.length).toBe(0);
        expect(particleEmitter.eventHandlers.length).toBe(1);
        expect(particleEmitter.eventHandlerCount).toBe(1);
        expect(particleEmitter.eventHandlers[0]).toBe(eventHandler);
        expect(particleEmitter.getEventHandlerAt(0)).toBe(eventHandler);
        expect(() => particleEmitter.getEventHandlerAt(1)).toThrowError();
        particleEmitter.removeEventHandlerAt(0);
        expect(particleEmitter.eventHandlers.length).toBe(0);
        expect(particleEmitter.eventHandlerCount).toBe(0); 
        expect(() => particleEmitter.getEventHandlerAt(0)).toThrowError();
        const eventHandler2 = particleEmitter.addEventHandler();
        const eventHandler3 = particleEmitter.addEventHandler();
        expect(eventHandler2.execStage).toBe(ModuleExecStage.EVENT_HANDLER);
        expect(eventHandler2.modules.length).toBe(0);
        expect(eventHandler3.execStage).toBe(ModuleExecStage.EVENT_HANDLER);
        expect(eventHandler3.modules.length).toBe(0);
        expect(particleEmitter.eventHandlers.length).toBe(2);
        expect(particleEmitter.eventHandlerCount).toBe(2);
        expect(particleEmitter.eventHandlers[0]).toBe(eventHandler2);
        expect(particleEmitter.eventHandlers[1]).toBe(eventHandler3);
        expect(particleEmitter.getEventHandlerAt(0)).toBe(eventHandler2);
        expect(particleEmitter.getEventHandlerAt(1)).toBe(eventHandler3);
        expect(() => particleEmitter.getEventHandlerAt(2)).toThrowError();
        particleEmitter.removeEventHandlerAt(1);
        expect(particleEmitter.eventHandlers.length).toBe(1);
        expect(particleEmitter.eventHandlerCount).toBe(1);
        expect(particleEmitter.eventHandlers[0]).toBe(eventHandler2);
        expect(particleEmitter.getEventHandlerAt(0)).toBe(eventHandler2);
        expect(() => particleEmitter.getEventHandlerAt(1)).toThrowError();
        const eventHandler4 = particleEmitter.addEventHandler();
        expect(eventHandler4.execStage).toBe(ModuleExecStage.EVENT_HANDLER);
        expect(eventHandler4.modules.length).toBe(0);
        expect(particleEmitter.eventHandlers.length).toBe(2);
        expect(particleEmitter.eventHandlerCount).toBe(2);
        expect(particleEmitter.eventHandlers[0]).toBe(eventHandler2);
        expect(particleEmitter.eventHandlers[1]).toBe(eventHandler4);
        expect(particleEmitter.getEventHandlerAt(0)).toBe(eventHandler2);
        expect(particleEmitter.getEventHandlerAt(1)).toBe(eventHandler4);
        expect(() => particleEmitter.getEventHandlerAt(2)).toThrowError();
        particleEmitter.removeEventHandlerAt(0);
        expect(particleEmitter.eventHandlers.length).toBe(1);
        expect(particleEmitter.eventHandlerCount).toBe(1);
        expect(particleEmitter.eventHandlers[0]).toBe(eventHandler4);
        expect(particleEmitter.getEventHandlerAt(0)).toBe(eventHandler4);
    });

    test('Stage', () => {
        const particleEmitter = new ParticleEmitter();
        expect(particleEmitter.spawnStage.modules.length).toBe(0);
        expect(particleEmitter.updateStage.modules.length).toBe(0);
        expect(particleEmitter.renderStage.modules.length).toBe(0);
        expect(particleEmitter.emitterStage.modules.length).toBe(0);
        expect(particleEmitter.updateStage.execStage).toBe(ModuleExecStage.UPDATE);
        expect(particleEmitter.renderStage.execStage).toBe(ModuleExecStage.RENDER);
        expect(particleEmitter.emitterStage.execStage).toBe(ModuleExecStage.EMITTER_UPDATE);
        expect(particleEmitter.spawnStage.execStage).toBe(ModuleExecStage.SPAWN);
    });
    
});