import { Vec2, Vec3 } from '../../cocos/core/math';
import { perlin3D, perlin2D, perlin1D, PerlinNoise3DCache, PerlinNoise2DCache, PerlinNoise1DCache } from '../../cocos/particle/modules/noise';

test('perlin noise 3d', () => {
    const cache = new PerlinNoise3DCache();
    expect(perlin3D(new Vec2(), new Vec3(90.04778596465785, 181.76370130008067, 122.34646084432829), 1.792318342754629, cache)).toStrictEqual(new Vec2(-2.105699419733839, -0.10616483500063685));
    expect(perlin3D(new Vec2(), new Vec3(26.346204560650357, 247.1353789706528, 245.2824342562034), 0.2525629191574357, cache)).toStrictEqual(new Vec2(0.28692726215940595, 0.07071381279845748));
    expect(perlin3D(new Vec2(), new Vec3(184.52349009475532, 0.015158893980727894, 119.87398417458827), 2.827261639433586, cache)).toStrictEqual(new Vec2(2.4681630711159186, -2.932689385789258));
    expect(perlin3D(new Vec2(), new Vec3(185.7207252036085, 246.57380735783397, 104.04358952007611), 2.08706409187904, cache)).toStrictEqual(new Vec2(-0.41764752390478804, -1.9262111950999583));
    expect(perlin3D(new Vec2(), new Vec3(42.36410736846317, 106.79053219747789, 173.30918435885528), 2.5564266847350288, cache)).toStrictEqual(new Vec2(-1.3014609860672994, 1.718584144958968));
    expect(perlin3D(new Vec2(), new Vec3(211.39596083646762, 229.54744297570613, 159.3093601421362), 2.0016388269068077, cache)).toStrictEqual(new Vec2(-1.6797684699130473, 0.37899758759792623));
    expect(perlin3D(new Vec2(), new Vec3(25.732437345734056, 144.54996274622977, 142.2054244305849), 2.476067948032652, cache)).toStrictEqual(new Vec2(3.674289526615372, -0.009887684540364747));
    expect(perlin3D(new Vec2(), new Vec3(18.052749547521017, 234.42614577858103, 144.19944764439788), 1.5339531807594098, cache)).toStrictEqual(new Vec2(2.2682682955569295, -1.23259128851072));
    expect(perlin3D(new Vec2(), new Vec3(37.70577857126696, 44.1255895978174, 121.98799913270656), 0.05021249845501741, cache)).toStrictEqual(new Vec2(0.04585536061881918, 0.06524225111671995));
    expect(perlin3D(new Vec2(), new Vec3(98.9856951547069, 177.5149479267479, 50.99809354219068), 1.6888654470885331, cache)).toStrictEqual(new Vec2(-1.9064532372024274, -0.37138732701402244));
    expect(perlin3D(new Vec2(), new Vec3(111.48403572669646, 99.0291191339579, 200.73790148010096), 1.1857952399128722, cache)).toStrictEqual(new Vec2(-1.2068332859216149, -0.8285145505925213));
    expect(perlin3D(new Vec2(), new Vec3(141.59283988978547, 49.68357600010205, 97.49717071939325), 0.6464729558268838, cache)).toStrictEqual(new Vec2(0.13689049493124125, 0.3264211887261308));
    expect(perlin3D(new Vec2(), new Vec3(5.248379496939345, 238.08640427054948, 38.965839096555584), 0.31871860916148265, cache)).toStrictEqual(new Vec2(0.3856142909708446, 0.2622681002049719));
    expect(perlin3D(new Vec2(), new Vec3(150.71294435378948, 200.26391496419973, 165.5863890073924), 0.8397889704440316, cache)).toStrictEqual(new Vec2(0.6470491091090597, 0.29352497144728806));
    expect(perlin3D(new Vec2(), new Vec3(90.43079216819712, 160.09652782752516, 92.34345509012506), 1.303627773194695, cache)).toStrictEqual(new Vec2(-0.6518778850473392, -1.9718357640931692));
    expect(perlin3D(new Vec2(), new Vec3(108.44946467578963, 174.15440351250217, 195.5564464725019), 2.1958908390662124, cache)).toStrictEqual(new Vec2(0.46710662212023, -0.7732338720705705));
});

test('perlin noise 2d', () => {
    const cache = new PerlinNoise2DCache();
    expect(perlin2D(new Vec2(), new Vec2(43.95186583691032, 166.74661091753669), 2.0908227764214917, cache)).toStrictEqual(new Vec2(0.39279254547182013, -1.7728426082759474));
    expect(perlin2D(new Vec2(), new Vec2(169.83841488396263, 72.23537982948368), 0.2633728820195058, cache)).toStrictEqual(new Vec2(0.026562939010896965, -0.02590993220132363));
    expect(perlin2D(new Vec2(), new Vec2(61.39228391470055, 219.0917121432015), 2.576929536238529, cache)).toStrictEqual(new Vec2(-2.597762981074881, -3.853793178862189));
    expect(perlin2D(new Vec2(), new Vec2(147.01394640567895, 36.72242799515236), 2.178157945972081, cache)).toStrictEqual(new Vec2(-0.2700945205357459, 2.0114290750940653));
    expect(perlin2D(new Vec2(), new Vec2(83.27240416950676, 208.1158731498391), 1.1118242259962552, cache)).toStrictEqual(new Vec2(0.8560778711136466, -0.8710470398314392));
    expect(perlin2D(new Vec2(), new Vec2(2.42237148625148, 83.99479792434519), 1.216188381362266, cache)).toStrictEqual(new Vec2(1.1790477439369793, -1.0015233040275524));
    expect(perlin2D(new Vec2(), new Vec2(213.46515523721766, 236.42375022174923), 2.1369568891430326, cache)).toStrictEqual(new Vec2(-2.6533743704808144, 2.9846872517388605));
    expect(perlin2D(new Vec2(), new Vec2(51.7507427401679, 219.6069770452385), 1.8817045601135554, cache)).toStrictEqual(new Vec2(1.571144147809877, 2.5155066455371093));
    expect(perlin2D(new Vec2(), new Vec2(149.20315590648767, 165.8867129377844), 0.5892680897846703, cache)).toStrictEqual(new Vec2(-0.5877046374630648, 0.8733729068120767));
    expect(perlin2D(new Vec2(), new Vec2(233.3465881373153, 7.0284941368871365), 1.3745769001585475, cache)).toStrictEqual(new Vec2(-0.9310913981937616, 0.29457801820486385));
    expect(perlin2D(new Vec2(), new Vec2(65.10051439995082, 201.20631670016675), 1.71681085901488, cache)).toStrictEqual(new Vec2(1.0232000372502863, -0.062125851635599576));
    expect(perlin2D(new Vec2(), new Vec2(159.73284902154094, 194.45118975414204), 2.3789547650476113, cache)).toStrictEqual(new Vec2(-0.7910830290139963, 1.5697183574308877));
    expect(perlin2D(new Vec2(), new Vec2(32.12235628075468, 118.65746742738361), 2.570533829481021, cache)).toStrictEqual(new Vec2(-1.8439945497500796, -1.3539722748001655));
    expect(perlin2D(new Vec2(), new Vec2(179.23219103123043, 4.251042427970905), 0.528896428468272, cache)).toStrictEqual(new Vec2(0.0613051962529055, -0.6727784304565081));
    expect(perlin2D(new Vec2(), new Vec2(87.22606735912927, 73.19815356692618), 2.854484055382801, cache)).toStrictEqual(new Vec2(-2.8498012097176724, -2.508464928863999));
    expect(perlin2D(new Vec2(), new Vec2(123.38593810363005, 216.79746766206287), 2.798991429582103, cache)).toStrictEqual(new Vec2(-1.8596873603074424, 4.9789233690142884));
});

test('perlin noise 1d', () => {
    const cache = new PerlinNoise1DCache();
    expect(perlin1D(new Vec2(), 191.9331070441688, 1.2970563992584345, cache)).toStrictEqual(new Vec2(-2.756475290672333, 0));
    expect(perlin1D(new Vec2(), 2.6244940717387455, 1.1748651382073159, cache)).toStrictEqual(new Vec2(-2.6691468768107716, 0));
    expect(perlin1D(new Vec2(), 35.14535598733898, 1.9924106333227367, cache)).toStrictEqual(new Vec2(-4.046111087633536, 0));
    expect(perlin1D(new Vec2(), 30.063852762338776, 1.1267555338073538, cache)).toStrictEqual(new Vec2(1.4404540744205603, 0));
    expect(perlin1D(new Vec2(), 163.25708044292477, 1.8417782917339176, cache)).toStrictEqual(new Vec2(1.4905907773318114, 0));
    expect(perlin1D(new Vec2(), 67.30410097592578, 1.0868634609812922, cache)).toStrictEqual(new Vec2(1.1093403140754459, 0));
    expect(perlin1D(new Vec2(), 225.55060711672306, 0.8999461933541599, cache)).toStrictEqual(new Vec2(1.7855204525540849, 0));
    expect(perlin1D(new Vec2(), 225.39020438009038, 2.092832604571915, cache)).toStrictEqual(new Vec2(1.2677439760901512, 0));
    expect(perlin1D(new Vec2(), 229.21622205775967, 2.8517784354440403, cache)).toStrictEqual(new Vec2(-6.303885226043316, 0));
    expect(perlin1D(new Vec2(), 10.8248324961715, 2.83809007844377, cache)).toStrictEqual(new Vec2(-1.1886537827269492, 0));
    expect(perlin1D(new Vec2(), 227.30587347188035, 1.7310260017439858, cache)).toStrictEqual(new Vec2(-0.7143187282787739, 0));
    expect(perlin1D(new Vec2(), 206.86025303199511, 0.7330575174182421, cache)).toStrictEqual(new Vec2(1.3877651965361244, 0));
    expect(perlin1D(new Vec2(), 229.38849548637745, 2.0464934572577036, cache)).toStrictEqual(new Vec2(1.7470952933038517, 0));
    expect(perlin1D(new Vec2(), 109.91962475112592, 1.4292797051142618, cache)).toStrictEqual(new Vec2(-3.4069058207350427, 0));
    expect(perlin1D(new Vec2(), 100.00687781961663, 1.1585631956769131, cache)).toStrictEqual(new Vec2(1.3607591718722434, 0));
    expect(perlin1D(new Vec2(), 211.90863480615866, 1.0177487890100478, cache)).toStrictEqual(new Vec2(0.951909021626049, 0));                
});