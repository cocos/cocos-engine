import { Vec2 } from '../../cocos/core';
import { ParticleEmitter } from '../../cocos/particle/particle-emitter';
describe('ParticleEmitter', () => {
    test('Parameters Validation', () => {
        const particleEmitter = new ParticleEmitter();
        expect(particleEmitter.duration).toBe(5);
        particleEmitter.duration = -1;
        expect(particleEmitter.duration).toBe(0.01);
        expect(particleEmitter.loopCount).toBe(1);
        particleEmitter.loopCount = 0;
        expect(particleEmitter.loopCount).toBe(1);
        particleEmitter.loopCount = 2.2;
        expect(particleEmitter.loopCount).toBe(2);
        expect(particleEmitter.delayRange).toStrictEqual(new Vec2());
        particleEmitter.delayRange = new Vec2(-1, -0.2);
        expect(particleEmitter.delayRange).toStrictEqual(new Vec2(0, 0));
        expect(particleEmitter.prewarmTime).toStrictEqual(5);
        particleEmitter.prewarmTime = -1;
        expect(particleEmitter.prewarmTime).toStrictEqual(0.001);
        expect(particleEmitter.prewarmTimeStep).toStrictEqual(0.03);
        particleEmitter.prewarmTimeStep = -1;
        expect(particleEmitter.prewarmTimeStep).toStrictEqual(0.001);
        expect(particleEmitter.simulationSpeed).toStrictEqual(1);
        particleEmitter.simulationSpeed = -1;
        expect(particleEmitter.simulationSpeed).toStrictEqual(0.001);
        expect(particleEmitter.maxDeltaTime).toStrictEqual(0.05);
        expect(particleEmitter.capacity).toBe(100);
        particleEmitter.capacity = -1;
        expect(particleEmitter.capacity).toBe(0);
        particleEmitter.capacity = 123.2;
        expect(particleEmitter.capacity).toBe(123);
        expect(particleEmitter.randomSeed).toBe(0);
        particleEmitter.randomSeed = -1;
        expect(particleEmitter.randomSeed).toBe(-1 >>> 0);
        particleEmitter.randomSeed = 23121.2213;
        expect(particleEmitter.randomSeed).toBe(23121);
    });

    test('Event Receiver', () => {
        const particleEmitter = new ParticleEmitter();
        expect(particleEmitter.eventReceivers.length).toBe(0);
        expect(particleEmitter.eventReceiverCount).toBe(0);
        expect(() => particleEmitter.getEventReceiverAt(0)).toThrowError();
        const eventReceiver = particleEmitter.addEventReceiver();
        expect(particleEmitter.eventReceivers.length).toBe(1);
        expect(particleEmitter.eventReceiverCount).toBe(1);
        expect(particleEmitter.eventReceivers[0]).toBe(eventReceiver);
        expect(particleEmitter.getEventReceiverAt(0)).toBe(eventReceiver);
        expect(() => particleEmitter.getEventReceiverAt(1)).toThrowError();
        particleEmitter.removeEventReceiverAt(0);
        expect(particleEmitter.eventReceivers.length).toBe(0);
        expect(particleEmitter.eventReceiverCount).toBe(0); 
        expect(() => particleEmitter.getEventReceiverAt(0)).toThrowError();
        const eventReceiver2 = particleEmitter.addEventReceiver();
        const eventReceiver3 = particleEmitter.addEventReceiver();
        expect(particleEmitter.eventReceivers.length).toBe(2);
        expect(particleEmitter.eventReceiverCount).toBe(2);
        expect(particleEmitter.eventReceivers[0]).toBe(eventReceiver2);
        expect(particleEmitter.eventReceivers[1]).toBe(eventReceiver3);
        expect(particleEmitter.getEventReceiverAt(0)).toBe(eventReceiver2);
        expect(particleEmitter.getEventReceiverAt(1)).toBe(eventReceiver3);
        expect(() => particleEmitter.getEventReceiverAt(2)).toThrowError();
        particleEmitter.removeEventReceiverAt(1);
        expect(particleEmitter.eventReceivers.length).toBe(1);
        expect(particleEmitter.eventReceiverCount).toBe(1);
        expect(particleEmitter.eventReceivers[0]).toBe(eventReceiver2);
        expect(particleEmitter.getEventReceiverAt(0)).toBe(eventReceiver2);
        expect(() => particleEmitter.getEventReceiverAt(1)).toThrowError();
        const eventReceiver4 = particleEmitter.addEventReceiver();
        expect(particleEmitter.eventReceivers.length).toBe(2);
        expect(particleEmitter.eventReceiverCount).toBe(2);
        expect(particleEmitter.eventReceivers[0]).toBe(eventReceiver2);
        expect(particleEmitter.eventReceivers[1]).toBe(eventReceiver4);
        expect(particleEmitter.getEventReceiverAt(0)).toBe(eventReceiver2);
        expect(particleEmitter.getEventReceiverAt(1)).toBe(eventReceiver4);
        expect(() => particleEmitter.getEventReceiverAt(2)).toThrowError();
        particleEmitter.removeEventReceiverAt(0);
        expect(particleEmitter.eventReceivers.length).toBe(1);
        expect(particleEmitter.eventReceiverCount).toBe(1);
        expect(particleEmitter.eventReceivers[0]).toBe(eventReceiver4);
        expect(particleEmitter.getEventReceiverAt(0)).toBe(eventReceiver4);
    });

    
});