require('./libs/wrapper/builtin/index');
window.DOMParser = require('./libs/common/xmldom/dom-parser').DOMParser;
window.__globalAdapter = {};
require('./libs/wrapper/unify');
require('./libs/wrapper/fs-utils');

<% if(polyfillsBundleFile) { %>
// Polyfills bundle.
require("<%= polyfillsBundleFile %>");
<% } %>

// SystemJS support.
require("<%= systemJsBundleFile %>");
// 这句只有百度需要，因为百度的 webpack 提供了假的 System
const System = globalThis.System;

// Adapt for IOS, swap if opposite
if (canvas) {
    var _w = canvas.width;
    var _h = canvas.height;
    if (screen.width < screen.height) {
        if (canvas.width > canvas.height) {
            _w = canvas.height;
            _h = canvas.width;
        }
    } else {
        if (canvas.width < canvas.height) {
            _w = canvas.height;
            _h = canvas.width;
        }
    }
    canvas.width = _w;
    canvas.height = _h;
}

// Adjust initial canvas size
if (canvas && window.devicePixelRatio >= 2) {canvas.width *= 2; canvas.height *= 2;}

const importMap = require("<%= importMapFile%>").default;
System.warmup({
    importMap,
    importMapUrl: '<%= importMapFile%>',
    defaultHandler: (urlNoSchema) => {
        require('.' + urlNoSchema);
    },
});

System.import('<%= applicationJs %>').then(({ createApplication }) => {
    return createApplication({
        loadJsListFile: (url) => require(`./${url}`),
        fetchWasm: (url) => url,
    });
}).then((application) => {
    return onApplicationCreated(application);
}).catch((err) => {
    console.error(err);
});

function onApplicationCreated(application) {
    return application.import('cc').then((cc) => {
        require('./libs/common/engine/index.js');
        require('./libs/wrapper/engine/index');

        require('./libs/common/cache-manager.js');
        // Adjust devicePixelRatio
        cc.view._maxPixelRatio = 4;
        // Release Image objects after uploaded gl texture
        cc.macro.CLEANUP_IMAGE_CACHE = false;

        // post system info to open data context
        swan.getOpenDataContext().postMessage({
            type: 'engine',
            event: 'systemInfo',
            systemInfo: swan.getSystemInfoSync(),
        });

        return application.start({
            findCanvas: () => {
                var container = document.createElement('div');
                return { frame: container, canvas: window.canvas, container };
            },
        });
    });
}
