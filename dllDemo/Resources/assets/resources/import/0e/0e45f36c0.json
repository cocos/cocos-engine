[1,["20835ba4-6145-4fbc-a58a-051ce700aa3e@f9941","093b45c8-80d9-49a8-ac5c-bcdbaed2c6bf@f9941","b6921aa9-72e5-4b6c-90b4-66893ed92b8c@6c48a","544e49d6-3f05-4fa8-9a9e-091f98fc2ce8@f9941","951249e0-9f16-456d-8b85-a6ca954da16b@f9941","1ffd0cf33@6c48a","1baf0fc9-befa-459c-8bdd-af1a450a0319","84db66ec-643f-4e78-b06c-3af1ac7a4871@a3140","093b45c8-80d9-49a8-ac5c-bcdbaed2c6bf@6c48a","a78fff63-2db3-4f61-bd12-8d27e306c403@f9941","116cf393-f2ce-41b9-9c2a-66ab98d6d0e1@6c48a","20835ba4-6145-4fbc-a58a-051ce700aa3e@6c48a","cea506fc-84e0-4e06-aa96-1db22f4e6a74@f9941","544e49d6-3f05-4fa8-9a9e-091f98fc2ce8@6c48a","7158776e-4e45-4395-84db-2f8f401404d6@6c48a","60f7195c-ec2a-45eb-ba94-8955f60e81d0","84db66ec-643f-4e78-b06c-3af1ac7a4871@e39f7","84db66ec-643f-4e78-b06c-3af1ac7a4871@58bf7","84db66ec-643f-4e78-b06c-3af1ac7a4871@cf79d","84db66ec-643f-4e78-b06c-3af1ac7a4871@f9d1d","951249e0-9f16-456d-8b85-a6ca954da16b@6c48a","b8d0e6d9-53c0-4c74-b2df-17538a75c141@6c48a","a78fff63-2db3-4f61-bd12-8d27e306c403@6c48a","b1175b57-92f3-4837-b54b-9fec5de20f32@6c48a","91578ab3-9aa1-4f49-8746-70b6ee1c2245","1263d74c-8167-4928-91a6-4e2672411f47@a804a","a1ba50d1-4311-4760-a1c5-997032bbf7d8","39e2b2ea-b5cb-422f-a7f1-45168cc62449","7158776e-4e45-4395-84db-2f8f401404d6@f9941","eb661612-7613-4fbe-96aa-332775dd0ed3@f9941","cea506fc-84e0-4e06-aa96-1db22f4e6a74@6c48a","b1175b57-92f3-4837-b54b-9fec5de20f32@f9941","eb661612-7613-4fbe-96aa-332775dd0ed3@6c48a","f93c0560-a802-4204-8f66-5655fdef8a08@6c48a"],["node","_textureSource","_parent","_spriteFrame","root","data","_effectAsset","_cameraComponent","_target","scene","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite","_mesh","spriteFrame","_texture","_scrollView","mainTexture","_skeleton","_defaultClip"],["cc.ImageAsset",["cc.Node",["_name","_layer","_id","_components","_parent","_prefab","_lpos","_children","_lrot","_euler","_lscale"],0,9,1,4,5,2,5,5,5],"cc.Texture2D","cc.SpriteFrame",["cc.Sprite",["_sizeMode","_type","node","__prefab","_spriteFrame","_color"],1,1,4,6,5],["cc.Label",["_string","_actualFontSize","_fontSize","_overflow","_enableWrapText","_horizontalAlign","_verticalAlign","_lineHeight","node","__prefab","_color"],-5,1,4,5],["cc.UITransform",["node","_contentSize","__prefab","_anchorPoint"],3,1,5,4,5],["cc.Widget",["_alignFlags","_originalHeight","_originalWidth","_alignMode","node","__prefab"],-1,1,4],"cc.SpriteAtlas",["cc.Node",["_name","_layer","_components","_prefab","_children","_parent","_lpos"],1,12,4,2,1,5],["cc.EffectAsset",["_name","shaders","techniques","combinations"],-1],["cc.Node",["_name","_layer","_parent","_components","_children","_prefab","_lpos","_lrot","_euler"],1,1,2,9,4,5,5,5],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.Camera",["_visibility","_projection","_priority","_far","_clearFlags","node","_color"],-2,1,5],["cc.Prefab",["_name"],2],["cc.Material",["_props","_states","_defines","_techIdx"],-1],["cc.TiledMapAsset",["_name","tmxXmlStr","spriteFrameNames","tsxFileNames","spriteFrames","spriteFrameSizes","tsxFiles"],-1,3,12,3],"cc.TextureCube",["cc.BitmapFont",["_name","fontSize","fntConfig"],0],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.TextAsset",["_name","text"],1],["cc.SceneAsset",["_name"],2],["cc.Canvas",["node","_cameraComponent"],3,1,1],["f0a37xDA3xHMoLKQ53Qiv0O",["sceneToBack","node"],2,1],["cc.CompPrefabInfo",["fileId"],2],["cc.Button",["_transition","node","__prefab","clickEvents","_normalColor","_target","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite"],2,1,4,9,5,1,6,6,6,6],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.Scene",["_children","_prefab","_globals"],3,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_skyColorLDR"],2,5,5],["cc.ShadowsInfo",["_shadowColor"],3,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",["_fogColor"],3,5],["cc.OctreeInfo",[],3],["cc.DirectionalLight",["_shadowBias","_shadowNear","_shadowFar","node","_staticSettings"],0,1,4],["cc.StaticLightSettings",[],3],["dragonBones.DragonBonesAtlasAsset",["_name","_atlasJson","_atlasJsonData"],0],["cc.AudioClip",["_name","_native","_duration"],0],["dragonBones.DragonBonesAsset",["_name","_dragonBonesJson"],1],["cc.VideoClip",["_name","_native","_duration"],0],["cc.Mask",["node","__prefab"],3,1,4],["cc.Layout",["_resizeMode","_layoutType","node","__prefab"],1,1,4],["cc.ScrollBar",["_direction","node","__prefab","_handle"],2,1,4,1],["cc.ScrollView",["bounceDuration","brake","elastic","horizontal","node","__prefab","_content","_verticalScrollBar"],-1,1,4,1,1],["cc.Material",["_name","_states","_defines","_props"],0,12],["cc.SkeletalAnimation",["node","__prefab","_clips","_defaultClip"],3,1,4,3,6],["cc.SkinnedMeshRenderer",["node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],3,1,4,3,4,1,6,6],["cc.ModelLightmapSettings",[],3],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["sp.SkeletonData",["_name","_atlasText","textureNames","_skeletonJson","textures"],-1,3],["cc.Asset",["_name","_native"],1],["cc.BufferAsset",["_native"],2],["cc.MeshRenderer",["_name","node","__prefab","_materials","lightmapSettings","_mesh"],2,1,4,3,4,6],["cc.UIMeshRenderer",["node","__prefab"],3,1,4],["cc.Animation",["_name","node","__prefab"],2,1,4]],[[24,0,2],[12,0,1,2,2],[1,0,4,7,5,6,8,9,2],[6,0,2,1,1],[1,0,1,4,3,3],[1,0,4,5,6,8,9,2],[11,0,2,4,5,6,7,8,2],[6,0,2,1,3,1],[14,0,2],[20,0,1,3],[4,1,0,2,3,4,3],[19,0,1,2,3],[21,0,2],[1,0,1,2,7,3,6,4],[1,0,1,4,7,3,6,3],[1,0,1,4,3,6,3],[1,0,2,4,3,8,9,3],[1,0,2,4,3,6,8,9,3],[1,0,7,3,5,2],[1,0,1,4,3,5,6,3],[1,0,7,5,6,8,9,2],[11,0,1,2,3,3],[6,0,1,1],[22,0,1,1],[7,0,4,2],[7,0,2,1,4,4],[23,0,1,2],[4,0,2,3,5,4,2],[25,0,1,2,3,4,5,6,7,8,9,2],[26,0,1,2,3],[27,0,1,2,1],[12,0,2],[28,0,1,2,3,4,1],[29,0,1,2,2],[30,0,1],[31,1],[32,0,1],[33,1],[5,0,1,2,8,9,4],[5,0,1,2,3,4,8,9,10,6],[5,0,1,8,9,3],[34,0,1,2,3,4,4],[35,1],[13,0,5,2],[13,1,2,3,4,0,5,6,6],[37,0,1,2,4],[47,1],[18,0,1,2,4],[10,0,1,2,4],[10,0,3,1,2,5],[1,0,3,5,10,2],[1,0,1,4,3,5,3],[1,0,1,4,7,3,5,3],[1,0,1,3,5,3],[1,0,4,7,5,8,9,2],[1,0,4,7,5,6,10,2],[1,0,4,7,5,6,8,10,9,2],[1,0,4,3,5,2],[1,0,3,5,6,10,2],[9,0,1,4,2,3,3],[9,0,1,5,4,2,3,6,3],[9,0,1,5,2,3,6,3],[6,0,2,3,1],[7,0,1,3,4,5,4],[7,0,2,1,3,4,5,5],[4,2,3,4,1],[4,1,0,2,3,5,4,3],[4,1,0,2,3,5,3],[5,0,5,6,1,2,7,3,4,8,9,10,9],[5,0,5,6,1,8,9,5],[36,0,1,2,4],[14,1],[38,0,1,3],[39,0,1,2,4],[40,0,1,1],[41,0,1,2,3,3],[42,0,1,2,3,2],[43,0,1,2,3,4,5,6,7,5],[15,0,1,2,4],[15,3,0,1,2,5],[44,0,1,2,3,4],[45,0,1,2,3,1],[46,0,1,2,3,4,5,6,1],[48,0,1,2,3,4],[49,0,1,2,3,4,5],[50,0,1,3],[51,0,2],[52,0,1,2,3,4,5,2],[53,0,1,1],[54,0,1,2,2],[16,0,1,2,3,6,4,5,5],[16,0,1,2,4,5,4]],[[[{"fmt":"1","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["093b45c8-80d9-49a8-ac5c-bcdbaed2c6bf"]}],[2],0,[],[],[]],[[{"name":"singleColor","rect":{"x":0,"y":0,"width":2,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[1],[8]],[[[47,"font",36,{"commonHeight":49,"fontSize":36,"atlasName":"font.png","fontDefDictionary":{"32":{"xOffset":0,"yOffset":40,"xAdvance":7,"rect":{"x":294,"y":208,"width":0,"height":0}},"33":{"xOffset":1,"yOffset":3,"xAdvance":11,"rect":{"x":460,"y":132,"width":18,"height":37}},"34":{"xOffset":0,"yOffset":3,"xAdvance":15,"rect":{"x":131,"y":208,"width":23,"height":22}},"35":{"xOffset":0,"yOffset":3,"xAdvance":22,"rect":{"x":68,"y":132,"width":31,"height":37}},"36":{"xOffset":0,"yOffset":-1,"xAdvance":21,"rect":{"x":122,"y":2,"width":30,"height":44}},"37":{"xOffset":0,"yOffset":3,"xAdvance":30,"rect":{"x":128,"y":51,"width":39,"height":38}},"38":{"xOffset":1,"yOffset":3,"xAdvance":25,"rect":{"x":242,"y":51,"width":33,"height":38}},"39":{"xOffset":0,"yOffset":3,"xAdvance":7,"rect":{"x":156,"y":208,"width":15,"height":22}},"40":{"xOffset":0,"yOffset":3,"xAdvance":14,"rect":{"x":251,"y":2,"width":23,"height":42}},"41":{"xOffset":-1,"yOffset":3,"xAdvance":14,"rect":{"x":276,"y":2,"width":23,"height":42}},"42":{"xOffset":0,"yOffset":1,"xAdvance":15,"rect":{"x":50,"y":208,"width":23,"height":24}},"43":{"xOffset":0,"yOffset":9,"xAdvance":19,"rect":{"x":232,"y":171,"width":28,"height":30}},"44":{"xOffset":0,"yOffset":21,"xAdvance":10,"rect":{"x":30,"y":208,"width":18,"height":26}},"45":{"xOffset":1,"yOffset":16,"xAdvance":14,"rect":{"x":246,"y":208,"width":22,"height":16}},"46":{"xOffset":0,"yOffset":22,"xAdvance":10,"rect":{"x":196,"y":208,"width":18,"height":19}},"47":{"xOffset":0,"yOffset":1,"xAdvance":17,"rect":{"x":223,"y":2,"width":26,"height":42}},"48":{"xOffset":0,"yOffset":3,"xAdvance":22,"rect":{"x":134,"y":92,"width":30,"height":38}},"49":{"xOffset":-1,"yOffset":3,"xAdvance":15,"rect":{"x":435,"y":132,"width":23,"height":37}},"50":{"xOffset":0,"yOffset":3,"xAdvance":19,"rect":{"x":349,"y":132,"width":27,"height":37}},"51":{"xOffset":0,"yOffset":2,"xAdvance":19,"rect":{"x":351,"y":92,"width":28,"height":38}},"52":{"xOffset":-1,"yOffset":3,"xAdvance":21,"rect":{"x":35,"y":132,"width":31,"height":37}},"53":{"xOffset":0,"yOffset":2,"xAdvance":19,"rect":{"x":321,"y":92,"width":28,"height":38}},"54":{"xOffset":0,"yOffset":2,"xAdvance":20,"rect":{"x":259,"y":92,"width":29,"height":38}},"55":{"xOffset":0,"yOffset":3,"xAdvance":17,"rect":{"x":378,"y":132,"width":27,"height":37}},"56":{"xOffset":0,"yOffset":3,"xAdvance":21,"rect":{"x":228,"y":92,"width":29,"height":38}},"57":{"xOffset":0,"yOffset":2,"xAdvance":20,"rect":{"x":290,"y":92,"width":29,"height":38}},"58":{"xOffset":0,"yOffset":11,"xAdvance":10,"rect":{"x":456,"y":171,"width":18,"height":30}},"59":{"xOffset":1,"yOffset":10,"xAdvance":11,"rect":{"x":480,"y":132,"width":18,"height":37}},"60":{"xOffset":0,"yOffset":10,"xAdvance":17,"rect":{"x":2,"y":208,"width":26,"height":27}},"61":{"xOffset":1,"yOffset":13,"xAdvance":19,"rect":{"x":103,"y":208,"width":26,"height":22}},"62":{"xOffset":0,"yOffset":11,"xAdvance":18,"rect":{"x":476,"y":171,"width":26,"height":28}},"63":{"xOffset":0,"yOffset":2,"xAdvance":17,"rect":{"x":381,"y":92,"width":25,"height":38}},"64":{"xOffset":0,"yOffset":3,"xAdvance":36,"rect":{"x":17,"y":2,"width":44,"height":46}},"65":{"xOffset":0,"yOffset":3,"xAdvance":26,"rect":{"x":427,"y":92,"width":35,"height":37}},"66":{"xOffset":1,"yOffset":3,"xAdvance":23,"rect":{"x":101,"y":132,"width":30,"height":37}},"67":{"xOffset":0,"yOffset":3,"xAdvance":23,"rect":{"x":2,"y":92,"width":32,"height":38}},"68":{"xOffset":1,"yOffset":3,"xAdvance":25,"rect":{"x":464,"y":92,"width":32,"height":37}},"69":{"xOffset":1,"yOffset":3,"xAdvance":21,"rect":{"x":260,"y":132,"width":28,"height":37}},"70":{"xOffset":1,"yOffset":3,"xAdvance":21,"rect":{"x":290,"y":132,"width":28,"height":37}},"71":{"xOffset":0,"yOffset":3,"xAdvance":25,"rect":{"x":312,"y":51,"width":33,"height":38}},"72":{"xOffset":1,"yOffset":3,"xAdvance":27,"rect":{"x":277,"y":51,"width":33,"height":38}},"73":{"xOffset":1,"yOffset":3,"xAdvance":11,"rect":{"x":408,"y":92,"width":17,"height":38}},"74":{"xOffset":-1,"yOffset":3,"xAdvance":17,"rect":{"x":407,"y":132,"width":26,"height":37}},"75":{"xOffset":1,"yOffset":3,"xAdvance":24,"rect":{"x":36,"y":92,"width":32,"height":38}},"76":{"xOffset":1,"yOffset":3,"xAdvance":19,"rect":{"x":320,"y":132,"width":27,"height":37}},"77":{"xOffset":0,"yOffset":3,"xAdvance":32,"rect":{"x":85,"y":51,"width":41,"height":38}},"78":{"xOffset":1,"yOffset":3,"xAdvance":27,"rect":{"x":417,"y":51,"width":33,"height":38}},"79":{"xOffset":0,"yOffset":3,"xAdvance":27,"rect":{"x":169,"y":51,"width":35,"height":38}},"80":{"xOffset":1,"yOffset":3,"xAdvance":23,"rect":{"x":165,"y":132,"width":30,"height":37}},"81":{"xOffset":0,"yOffset":3,"xAdvance":27,"rect":{"x":85,"y":2,"width":35,"height":45}},"82":{"xOffset":1,"yOffset":4,"xAdvance":24,"rect":{"x":2,"y":132,"width":31,"height":37}},"83":{"xOffset":0,"yOffset":3,"xAdvance":21,"rect":{"x":197,"y":132,"width":30,"height":37}},"84":{"xOffset":-1,"yOffset":3,"xAdvance":21,"rect":{"x":133,"y":132,"width":30,"height":37}},"85":{"xOffset":1,"yOffset":3,"xAdvance":26,"rect":{"x":452,"y":51,"width":32,"height":38}},"86":{"xOffset":-1,"yOffset":2,"xAdvance":24,"rect":{"x":206,"y":51,"width":34,"height":38}},"87":{"xOffset":0,"yOffset":3,"xAdvance":34,"rect":{"x":40,"y":51,"width":43,"height":38}},"88":{"xOffset":-1,"yOffset":3,"xAdvance":23,"rect":{"x":382,"y":51,"width":33,"height":38}},"89":{"xOffset":-1,"yOffset":3,"xAdvance":23,"rect":{"x":347,"y":51,"width":33,"height":38}},"90":{"xOffset":0,"yOffset":3,"xAdvance":21,"rect":{"x":229,"y":132,"width":29,"height":37}},"91":{"xOffset":1,"yOffset":3,"xAdvance":13,"rect":{"x":200,"y":2,"width":21,"height":43}},"92":{"xOffset":0,"yOffset":1,"xAdvance":16,"rect":{"x":387,"y":2,"width":25,"height":40}},"93":{"xOffset":0,"yOffset":3,"xAdvance":13,"rect":{"x":301,"y":2,"width":21,"height":42}},"94":{"xOffset":0,"yOffset":2,"xAdvance":17,"rect":{"x":75,"y":208,"width":26,"height":23}},"95":{"xOffset":1,"yOffset":30,"xAdvance":15,"rect":{"x":270,"y":208,"width":22,"height":15}},"96":{"xOffset":1,"yOffset":2,"xAdvance":14,"rect":{"x":173,"y":208,"width":21,"height":19}},"97":{"xOffset":0,"yOffset":10,"xAdvance":18,"rect":{"x":321,"y":171,"width":26,"height":30}},"98":{"xOffset":0,"yOffset":1,"xAdvance":21,"rect":{"x":324,"y":2,"width":30,"height":40}},"99":{"xOffset":0,"yOffset":11,"xAdvance":17,"rect":{"x":349,"y":171,"width":26,"height":30}},"100":{"xOffset":0,"yOffset":2,"xAdvance":22,"rect":{"x":414,"y":2,"width":30,"height":39}},"101":{"xOffset":0,"yOffset":10,"xAdvance":18,"rect":{"x":292,"y":171,"width":27,"height":30}},"102":{"xOffset":-1,"yOffset":2,"xAdvance":15,"rect":{"x":476,"y":2,"width":26,"height":39}},"103":{"xOffset":0,"yOffset":10,"xAdvance":22,"rect":{"x":102,"y":92,"width":30,"height":38}},"104":{"xOffset":1,"yOffset":1,"xAdvance":21,"rect":{"x":446,"y":2,"width":28,"height":39}},"105":{"xOffset":1,"yOffset":1,"xAdvance":10,"rect":{"x":2,"y":51,"width":17,"height":39}},"106":{"xOffset":-2,"yOffset":2,"xAdvance":10,"rect":{"x":63,"y":2,"width":20,"height":46}},"107":{"xOffset":0,"yOffset":1,"xAdvance":20,"rect":{"x":356,"y":2,"width":29,"height":40}},"108":{"xOffset":1,"yOffset":1,"xAdvance":9,"rect":{"x":21,"y":51,"width":17,"height":39}},"109":{"xOffset":1,"yOffset":10,"xAdvance":31,"rect":{"x":68,"y":171,"width":38,"height":30}},"110":{"xOffset":1,"yOffset":10,"xAdvance":21,"rect":{"x":202,"y":171,"width":28,"height":30}},"111":{"xOffset":0,"yOffset":10,"xAdvance":20,"rect":{"x":171,"y":171,"width":29,"height":30}},"112":{"xOffset":1,"yOffset":10,"xAdvance":22,"rect":{"x":70,"y":92,"width":30,"height":38}},"113":{"xOffset":0,"yOffset":11,"xAdvance":21,"rect":{"x":197,"y":92,"width":29,"height":38}},"114":{"xOffset":1,"yOffset":10,"xAdvance":14,"rect":{"x":431,"y":171,"width":23,"height":30}},"115":{"xOffset":0,"yOffset":11,"xAdvance":16,"rect":{"x":377,"y":171,"width":25,"height":30}},"116":{"xOffset":0,"yOffset":6,"xAdvance":15,"rect":{"x":2,"y":171,"width":24,"height":35}},"117":{"xOffset":1,"yOffset":11,"xAdvance":21,"rect":{"x":262,"y":171,"width":28,"height":30}},"118":{"xOffset":0,"yOffset":11,"xAdvance":20,"rect":{"x":108,"y":171,"width":30,"height":30}},"119":{"xOffset":0,"yOffset":11,"xAdvance":29,"rect":{"x":28,"y":171,"width":38,"height":30}},"120":{"xOffset":-1,"yOffset":11,"xAdvance":19,"rect":{"x":140,"y":171,"width":29,"height":30}},"121":{"xOffset":-1,"yOffset":10,"xAdvance":19,"rect":{"x":166,"y":92,"width":29,"height":38}},"122":{"xOffset":0,"yOffset":10,"xAdvance":16,"rect":{"x":404,"y":171,"width":25,"height":30}},"123":{"xOffset":-1,"yOffset":3,"xAdvance":12,"rect":{"x":154,"y":2,"width":21,"height":43}},"124":{"xOffset":1,"yOffset":1,"xAdvance":7,"rect":{"x":2,"y":2,"width":13,"height":47}},"125":{"xOffset":0,"yOffset":3,"xAdvance":12,"rect":{"x":177,"y":2,"width":21,"height":43}},"126":{"xOffset":0,"yOffset":14,"xAdvance":20,"rect":{"x":216,"y":208,"width":28,"height":18}}},"kerningDict":{}}]],0,0,[0],[15],[9]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["116cf393-f2ce-41b9-9c2a-66ab98d6d0e1"]}],[2],0,[],[],[]],[[[11,".bin",3434579268,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":24,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-0.5],"maxPosition",8,[1,0.5,0.5,0.5]]],-1],0,0,[],[],[]],[[[48,"builtin-standard",[{"hash":2489015834,"name":"builtin-standard|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":7,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":8,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":15,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":6,"defines":["HAS_SECOND_UV"]},{"name":"v_shadowBias","type":14,"count":1,"stageFlags":17,"location":7,"defines":["CC_RECEIVE_SHADOW"]},{"name":"v_tangent","type":16,"count":1,"stageFlags":17,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":17,"location":9,"defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 14) in vec4 a_color;\n  layout(location = 2) out lowp vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out mediump vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 6) out mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  layout(location = 7) out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 8) out mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 15) in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) in vec3 v_luv;\n  layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 5) in vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 6) in mediump vec2 v_uv1;\n#endif\nlayout(location = 4) in mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  layout(location = 7) in mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 2) in lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 8) in mediump vec4 v_tangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(set = 1, binding = 7) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(set = 1, binding = 8) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(set = 1, binding = 9) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out lowp vec4 v_color;\n#endif\nout vec3 v_position;\nout mediump vec3 v_normal;\nout vec2 v_uv;\n#if HAS_SECOND_UV\n  out mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  out mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nin vec3 v_position;\nin vec2 v_uv;\n#if HAS_SECOND_UV\n  in mediump vec2 v_uv1;\n#endif\nin mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  in mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying mediump vec3 v_normal;\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\nvarying mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":223,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":75}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"USE_TWOSIDE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":[],"range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}]},{"hash":2052537501,"name":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":1,"defines":["HAS_SECOND_UV"]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":3,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 1) out vec2 v_uv1;\n#endif\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 1) in vec2 v_uv1;\n#endif\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\n#if HAS_SECOND_UV\n  out vec2 v_uv1;\n#endif\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\n#if HAS_SECOND_UV\n  in vec2 v_uv1;\n#endif\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying vec2 v_uv1;\n#endif\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying vec2 v_uv1;\n#endif\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":184,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":75}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}]}],[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"specularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrength":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"specularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrength":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[9,"text","When you see this,\r\nwhen the representative loads\r\nsuccessfully."]],0,0,[],[],[]],[[[12,"test-scene"],[13,"Canvas",524288,"afOECD6lZNdJn6D02MSIcF",[-6,-7,-8,-9,-10],[[22,-1,[5,960,640]],[23,-3,-2],[24,45,-4],[26,"AssetLoading",-5]],[1,480,320,0]],[14,"Button",524288,1,[-15],[[3,-11,[0,"128bn4OvZD44INytZJqgN7"],[5,100,40]],[10,1,0,-12,[0,"8bAB/93L9OLr5MKnIyM1Pz"],1],[28,2,-14,[0,"2c4z8a8zFOqa3sIg4JpTYn"],[[29,"f0a37xDA3xHMoLKQ53Qiv0O","onClick",1]],[4,4292269782],-13,2,3,4,5]],[1,0,-142.264,0]],[30,[-16,-17,1],[31,"1f0561a1-f16e-4976-9979-ebb35b6af247"],[32,[33,0.78125,[2,0.2,0.5019607843137255,0.8,0.520833125],[2,0.2,0.5019607843137255,0.8,0.520833125]],[34,[4,4283190348]],[35],[36,[4,4292993505]],[37]]],[4,"Sprite",524288,1,[[3,-18,[0,"1176A36TdFhrCmX4LwF20C"],[5,960,640]],[27,0,-19,[0,"28nNtxxWlDoLcBKxdVaZzr"],[4,4282465080],0],[25,45,2,2,-20]]],[4,"Label",524288,1,[[3,-21,[0,"edHLDoejNGvbHOsHsl1yeT"],[5,80,50.4]],[38,"加载成功",20,20,-22,[0,"7dZrBagtxIB4o92qmWNCG/"]]]],[4,"Label",524288,2,[[3,-23,[0,"f3k6skx8ZJ0JtCQ7KHCjB2"],[5,100,40]],[39,"返回",20,20,1,false,-24,[0,"a0ApIfu/dO7qnRNUCD/mEx"],[4,4278190080]]]],[15,"Label-001",524288,1,[[3,-25,[0,"e5LdG1D31DE66pCVzU2dSM"],[5,197.89,50.4]],[40,"Test Scene",40,-26,[0,"30z+VfUKhDO6s43TFTWA0a"]]],[1,0,254.207,0]],[16,"Main Light","c0y6F5f+pAvI805TdmxIjx",3,[[41,0.1,1,30,-27,[42]]],[3,-0.24999999999999997,-0.24999999999999997,-0.06698729810778066,0.9330127018922194],[1,-30,-30,0]],[17,"Main Camera","c9DMICJLFO5IeO07EPon7U",3,[[43,1820327937,-28]],[1,-10,10,10],[3,-0.27781593346944056,-0.36497167621709875,-0.11507512748638377,0.8811195706053617],[1,-35,-45,0]],[21,"UICamera_Canvas",524288,1,[-29]],[44,0,1073741824,2000,6,42467328,10,[4,0]]],0,[0,0,1,0,7,11,0,0,1,0,0,1,0,0,1,0,-1,4,0,-2,5,0,-3,2,0,-4,7,0,-5,10,0,0,2,0,0,2,0,8,2,0,0,2,0,-1,6,0,-1,8,0,-2,9,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,0,9,0,-1,11,0,9,3,1,2,3,29],[0,0,0,0,0,0],[3,3,10,11,12,13],[1,0,0,0,3,4]],[[[70,"texture","{\"imagePath\":\"texture.png\",\"name\":\"NewDragonTest\",\"SubTexture\":[{\"x\":1,\"y\":342,\"width\":447,\"name\":\"tail\",\"height\":191},{\"x\":326,\"y\":1,\"width\":270,\"name\":\"chibangL2\",\"height\":273},{\"x\":1,\"y\":761,\"width\":95,\"name\":\"chibangL1\",\"height\":62},{\"x\":955,\"y\":466,\"width\":62,\"name\":\"dabiL\",\"height\":68},{\"x\":839,\"y\":216,\"width\":104,\"name\":\"xiaobiL\",\"height\":45},{\"x\":524,\"y\":650,\"width\":75,\"name\":\"shouL\",\"height\":76},{\"x\":1,\"y\":690,\"width\":97,\"name\":\"jiaoL\",\"height\":69},{\"x\":437,\"y\":720,\"width\":67,\"name\":\"xiaotuiL\",\"height\":31},{\"x\":437,\"y\":650,\"width\":85,\"name\":\"datuiL\",\"height\":68},{\"x\":598,\"y\":1,\"width\":239,\"name\":\"shenti\",\"height\":267},{\"x\":753,\"y\":270,\"width\":263,\"name\":\"bozixia\",\"height\":194},{\"x\":450,\"y\":276,\"width\":301,\"name\":\"bozishang\",\"height\":230},{\"x\":1,\"y\":535,\"width\":107,\"name\":\"toujiaoL\",\"height\":153},{\"x\":945,\"y\":216,\"width\":71,\"name\":\"tou1\",\"height\":46},{\"x\":638,\"y\":508,\"width\":106,\"name\":\"chujiao\",\"height\":112},{\"x\":110,\"y\":535,\"width\":118,\"name\":\"er\",\"height\":122},{\"x\":450,\"y\":508,\"width\":186,\"name\":\"zui\",\"height\":140},{\"x\":753,\"y\":466,\"width\":200,\"name\":\"toujiaoR\",\"height\":156},{\"x\":839,\"y\":1,\"width\":176,\"name\":\"tou\",\"height\":213},{\"x\":110,\"y\":682,\"width\":91,\"name\":\"jiaoR\",\"height\":105},{\"x\":955,\"y\":536,\"width\":61,\"name\":\"xiaotuiR\",\"height\":65},{\"x\":351,\"y\":535,\"width\":86,\"name\":\"datuiR\",\"height\":113},{\"x\":1,\"y\":1,\"width\":323,\"name\":\"chibangR2\",\"height\":339},{\"x\":326,\"y\":650,\"width\":109,\"name\":\"chibangR1\",\"height\":73},{\"x\":230,\"y\":535,\"width\":119,\"name\":\"jianbang\",\"height\":100},{\"x\":326,\"y\":725,\"width\":87,\"name\":\"dabiR\",\"height\":55},{\"x\":326,\"y\":276,\"width\":122,\"name\":\"xiaobiR\",\"height\":61},{\"x\":230,\"y\":637,\"width\":94,\"name\":\"shouR\",\"height\":103},{\"x\":638,\"y\":624,\"width\":372,\"name\":\"author\",\"height\":56}]}",{"imagePath":"texture.png","name":"NewDragonTest","SubTexture":[{"x":1,"y":342,"width":447,"name":"tail","height":191},{"x":326,"y":1,"width":270,"name":"chibangL2","height":273},{"x":1,"y":761,"width":95,"name":"chibangL1","height":62},{"x":955,"y":466,"width":62,"name":"dabiL","height":68},{"x":839,"y":216,"width":104,"name":"xiaobiL","height":45},{"x":524,"y":650,"width":75,"name":"shouL","height":76},{"x":1,"y":690,"width":97,"name":"jiaoL","height":69},{"x":437,"y":720,"width":67,"name":"xiaotuiL","height":31},{"x":437,"y":650,"width":85,"name":"datuiL","height":68},{"x":598,"y":1,"width":239,"name":"shenti","height":267},{"x":753,"y":270,"width":263,"name":"bozixia","height":194},{"x":450,"y":276,"width":301,"name":"bozishang","height":230},{"x":1,"y":535,"width":107,"name":"toujiaoL","height":153},{"x":945,"y":216,"width":71,"name":"tou1","height":46},{"x":638,"y":508,"width":106,"name":"chujiao","height":112},{"x":110,"y":535,"width":118,"name":"er","height":122},{"x":450,"y":508,"width":186,"name":"zui","height":140},{"x":753,"y":466,"width":200,"name":"toujiaoR","height":156},{"x":839,"y":1,"width":176,"name":"tou","height":213},{"x":110,"y":682,"width":91,"name":"jiaoR","height":105},{"x":955,"y":536,"width":61,"name":"xiaotuiR","height":65},{"x":351,"y":535,"width":86,"name":"datuiR","height":113},{"x":1,"y":1,"width":323,"name":"chibangR2","height":339},{"x":326,"y":650,"width":109,"name":"chibangR1","height":73},{"x":230,"y":535,"width":119,"name":"jianbang","height":100},{"x":326,"y":725,"width":87,"name":"dabiR","height":55},{"x":326,"y":276,"width":122,"name":"xiaobiR","height":61},{"x":230,"y":637,"width":94,"name":"shouR","height":103},{"x":638,"y":624,"width":372,"name":"author","height":56}]}]],0,0,[0],[16],[10]],[[{"fmt":"0","w":171,"h":259},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,1","mipmaps":["1ffd0cf33"]}],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["20835ba4-6145-4fbc-a58a-051ce700aa3e"]}],[2],0,[],[],[]],[[{"name":"default_btn_normal","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[3],0,[0],[1],[11]],[[[45,"audio",".mp3",79.51675],-1],0,0,[],[],[]],[[[8,"shieldNode"],[50,"shieldNode",[[3,-2,[0,"11PGAXsA5KdpJVjygqIEnd"],[5,512,512]],[65,-3,[0,"f3amQYgHVDBIfqhJkmhwEN"],0]],[1,"9a/2eCxvNDcYGP9+gVKmav",-1,0],[1,0.08,0.08,1]]],0,[0,4,1,0,0,1,0,0,1,0,5,1,3],[0],[3],[12]],[[[8,"item"],[18,"item",[-3,-4],[[62,-2,[0,"cb6d8vXJZADoL6BUl4hC0M"],[0,0.5,1]]],[1,"6beYaWP6lHE5pS1zbqL4Xh",-1,0]],[51,"bg",33554432,1,[[7,-5,[0,"c99gJxz6ZEBaDXfsxfRItw"],[5,100,40],[0,0.5,1]],[10,1,0,-6,[0,"a5vyFJanZDqKNxZLHPX+vQ"],0]],[1,"11Oxn39oJHzKa3269aiS+7",1,0]],[19,"label",33554432,1,[[7,-7,[0,"4dQn17bn1Mb50eOEQ+QYAG"],[5,100,40],[0,0.5,1]],[68,"button",0,0,20,20,22,2,false,-8,[0,"1aB4JnsPBC1KQCL8Jh77LK"],[4,4278190080]]],[1,"1dkjUDMNBAra0sU+F5q7Kt",1,0],[1,2,-2,0]]],0,[0,4,1,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,3,0,0,3,0,5,1,8],[0],[3],[1]],[[{"base":"NaN,NaN,NaN,NaN,NaN,NaN","mipmaps":[{"front":"86eb75aa-3b2f-4c7b-b59e-bdc2e3984665","back":"03721795-84b1-4dcd-8eb3-c8e6b88ee535","left":"61ac0181-00bd-4c17-97f0-5fc7f4bafb3d","right":"80aabd92-9942-4765-b685-8577a1c88b4e","top":"6c895e98-967e-4a6d-8c08-bf6b035fa2c1","bottom":"e049bea9-db6b-463b-8502-61bf426357a1"}]}],[17],0,[],[],[]],[[[9,"tile_iso_offset_with_tsx1","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<tileset name=\"tile_iso_offset_with_tsx1\" tilewidth=\"101\" tileheight=\"101\" tilecount=\"2\" columns=\"1\">\r\n <image source=\"tile_iso_offset_with_tsx1.png\" width=\"101\" height=\"202\"/>\r\n</tileset>\r\n"]],0,0,[],[],[]],[[[72,"NewDragonTest","{\"frameRate\":30,\"version\":\"4.5\",\"armature\":[{\"frameRate\":30,\"defaultActions\":[{\"gotoAndPlay\":\"stand\"}],\"bone\":[{\"transform\":{},\"name\":\"root\"},{\"transform\":{\"y\":-158.18,\"x\":144.22},\"name\":\"IK_Lhand\",\"parent\":\"root\"},{\"transform\":{\"y\":-169.81,\"x\":-13.64},\"name\":\"IK_Rhand\",\"parent\":\"root\"},{\"transform\":{\"y\":-95.63,\"x\":45.23},\"name\":\"bone\",\"parent\":\"root\"},{\"length\":45,\"parent\":\"root\",\"transform\":{\"y\":-49.74,\"skX\":73.82,\"skY\":73.82,\"x\":42.81},\"name\":\"jiaoL\"},{\"length\":63,\"parent\":\"root\",\"transform\":{\"y\":-75.74,\"skX\":101.43,\"skY\":101.43,\"x\":-53.15},\"name\":\"jiaoR\"},{\"length\":209,\"parent\":\"bone\",\"transform\":{\"y\":-4.69,\"skX\":-106.65,\"skY\":-106.65},\"name\":\"shenti\"},{\"length\":76,\"parent\":\"bone\",\"transform\":{\"y\":-16.48,\"skX\":104.57,\"skY\":104.57,\"x\":-40.02},\"name\":\"datuiR\"},{\"length\":137,\"parent\":\"bone\",\"transform\":{\"y\":-1.16,\"skX\":165.01,\"skY\":165.01,\"x\":-2.34},\"name\":\"weiba1\"},{\"length\":65,\"parent\":\"bone\",\"transform\":{\"y\":3.53,\"skX\":41.71,\"skY\":41.71,\"x\":3.53},\"name\":\"datuiL\"},{\"length\":32,\"parent\":\"weiba1\",\"transform\":{\"y\":46.38,\"skX\":52.31,\"skY\":52.31,\"x\":100.31},\"name\":\"bone12\"},{\"length\":25,\"parent\":\"shenti\",\"transform\":{\"y\":0.14,\"skX\":-112.65,\"skY\":-112.65,\"x\":140.03},\"name\":\"jianbang\"},{\"length\":76,\"parent\":\"shenti\",\"transform\":{\"y\":-34.93,\"skX\":-93.15,\"skY\":-93.15,\"x\":166.51},\"name\":\"chibangR1\"},{\"length\":26,\"parent\":\"weiba1\",\"transform\":{\"y\":45.26,\"skX\":62.99,\"skY\":62.99,\"x\":128.5},\"name\":\"bone13\"},{\"length\":52,\"parent\":\"datuiR\",\"transform\":{\"y\":1.61,\"skX\":119.99,\"skY\":119.99,\"x\":75.98},\"name\":\"xiaotuiR\"},{\"length\":60,\"parent\":\"shenti\",\"transform\":{\"y\":56.72,\"skX\":-54.67,\"skY\":-54.67,\"x\":116.89},\"name\":\"chibangL1\"},{\"length\":47,\"parent\":\"weiba1\",\"transform\":{\"y\":57.38,\"skX\":24.37,\"skY\":24.37,\"x\":51.86},\"name\":\"bone11\"},{\"length\":96,\"parent\":\"shenti\",\"transform\":{\"y\":-2.93,\"skX\":54.16,\"skY\":54.16,\"x\":203.63},\"name\":\"bozixia\"},{\"length\":53,\"parent\":\"datuiL\",\"transform\":{\"y\":1.86,\"skX\":141.04,\"skY\":141.04,\"x\":65.75},\"name\":\"xiaotuiL\"},{\"length\":66,\"parent\":\"weiba1\",\"transform\":{\"y\":0.91,\"skX\":27.7,\"skY\":27.7,\"x\":141.22},\"name\":\"weiba2\"},{\"length\":41,\"parent\":\"shenti\",\"transform\":{\"y\":47.07,\"skX\":165.85,\"skY\":165.85,\"x\":103.87},\"name\":\"dabiL\"},{\"length\":74,\"parent\":\"jianbang\",\"transform\":{\"y\":-7.44,\"skX\":15.05,\"skY\":15.05,\"x\":24.35},\"name\":\"dabiR\"},{\"length\":62,\"parent\":\"weiba2\",\"transform\":{\"skX\":22.66,\"skY\":22.66,\"x\":67.21},\"name\":\"bone26\"},{\"length\":62,\"parent\":\"bozixia\",\"transform\":{\"y\":-3.76,\"skX\":35.23,\"skY\":35.23,\"x\":86.13},\"name\":\"bozishang\"},{\"length\":62,\"parent\":\"dabiL\",\"transform\":{\"y\":1.88,\"skX\":-46.38,\"skY\":-46.38,\"x\":46.85},\"name\":\"xiaobiL\"},{\"length\":21,\"parent\":\"weiba2\",\"transform\":{\"y\":33.74,\"skX\":52.56,\"skY\":52.56,\"x\":37.58},\"name\":\"bone14\"},{\"length\":270,\"parent\":\"chibangL1\",\"transform\":{\"y\":-0.22,\"skX\":43.37,\"skY\":43.37,\"x\":56.91},\"name\":\"chibangL3\"},{\"length\":148,\"parent\":\"chibangR1\",\"transform\":{\"y\":8.06,\"skX\":85.15,\"skY\":85.15,\"x\":58.47},\"name\":\"bone2\"},{\"length\":14,\"parent\":\"bone26\",\"transform\":{\"y\":26.6,\"skX\":64.01,\"skY\":64.01,\"x\":19.07},\"name\":\"bone15\"},{\"length\":44,\"parent\":\"xiaobiL\",\"transform\":{\"y\":-0.67,\"skX\":-15.4,\"skY\":-15.4,\"x\":61.41},\"name\":\"shouL\"},{\"length\":95,\"parent\":\"bone2\",\"transform\":{\"y\":-0.57,\"skX\":26.5,\"skY\":26.5,\"x\":148.48},\"name\":\"bone3\"},{\"length\":110,\"parent\":\"bozishang\",\"transform\":{\"y\":8.35,\"skX\":-109.1,\"skY\":-109.1,\"x\":46.71},\"name\":\"er\"},{\"length\":160,\"parent\":\"bozishang\",\"transform\":{\"y\":28.97,\"skX\":66.19,\"skY\":66.19,\"x\":57.56},\"name\":\"zui\"},{\"length\":84,\"parent\":\"bozishang\",\"transform\":{\"y\":-2.61,\"skX\":17.89,\"skY\":17.89,\"x\":55.05},\"name\":\"tou\"},{\"length\":56,\"parent\":\"bone26\",\"transform\":{\"y\":1.25,\"skX\":81.13,\"skY\":81.13,\"x\":63.75},\"name\":\"weiba3\"},{\"length\":17,\"parent\":\"bone26\",\"transform\":{\"y\":24.63,\"skX\":111.95,\"skY\":111.95,\"x\":42.55},\"name\":\"bone16\"},{\"length\":86,\"parent\":\"bozishang\",\"transform\":{\"y\":26.29,\"skX\":-130.37,\"skY\":-130.37,\"x\":25.11},\"name\":\"chujiao\"},{\"length\":62,\"parent\":\"dabiR\",\"transform\":{\"y\":1.98,\"skX\":-140.33,\"skY\":-140.33,\"x\":70.15},\"name\":\"xiaobiR\"},{\"length\":79,\"parent\":\"bone3\",\"transform\":{\"y\":-20.28,\"skX\":-127.12,\"skY\":-127.12,\"x\":75.77},\"name\":\"bone6\"},{\"length\":14,\"parent\":\"weiba3\",\"transform\":{\"y\":18.65,\"skX\":48.63,\"skY\":48.63,\"x\":48.15},\"name\":\"bone18\"},{\"length\":129,\"parent\":\"tou\",\"transform\":{\"y\":-32.52,\"skX\":-124.1,\"skY\":-124.1,\"x\":70.29},\"name\":\"toujiaoL\"},{\"length\":205,\"parent\":\"tou\",\"transform\":{\"y\":-40.46,\"skX\":-131.51,\"skY\":-131.51,\"x\":41.95},\"name\":\"toujiaoR\"},{\"length\":62,\"parent\":\"bone3\",\"transform\":{\"y\":-14.64,\"skX\":-147.55,\"skY\":-147.55,\"x\":54.96},\"name\":\"bone8\"},{\"length\":64,\"parent\":\"tou\",\"transform\":{\"y\":-36.22,\"skX\":-162.1,\"skY\":-162.1,\"x\":14.79},\"name\":\"tou1\"},{\"length\":123,\"parent\":\"bone3\",\"transform\":{\"y\":-1.15,\"skX\":-74.86,\"skY\":-74.86,\"x\":95.08},\"name\":\"bone4\"},{\"length\":12,\"parent\":\"weiba3\",\"transform\":{\"y\":18.49,\"skX\":60.23,\"skY\":60.23,\"x\":32.65},\"name\":\"bone17\"},{\"length\":52,\"parent\":\"weiba3\",\"transform\":{\"y\":0.9,\"skX\":-65.44,\"skY\":-65.44,\"x\":50.54},\"name\":\"weiba4\"},{\"length\":83,\"parent\":\"xiaobiR\",\"transform\":{\"y\":-0.1,\"skX\":35,\"skY\":35,\"x\":61.96},\"name\":\"shouR\"},{\"length\":9,\"parent\":\"weiba4\",\"transform\":{\"y\":26.57,\"skX\":88.32,\"skY\":88.32,\"x\":14.2},\"name\":\"bone20\"},{\"length\":11,\"parent\":\"weiba4\",\"transform\":{\"y\":20.7,\"skX\":97.79,\"skY\":97.79,\"x\":-5.44},\"name\":\"bone19\"},{\"length\":50,\"parent\":\"weiba4\",\"transform\":{\"y\":-2.34,\"skX\":-65.02,\"skY\":-65.02,\"x\":54.11},\"name\":\"weiba5\"},{\"length\":93,\"parent\":\"bone6\",\"transform\":{\"y\":0.34,\"skX\":-35.04,\"skY\":-35.04,\"x\":79.56},\"name\":\"bone7\"},{\"length\":60,\"parent\":\"bone8\",\"transform\":{\"y\":-0.29,\"skX\":-31.02,\"skY\":-31.02,\"x\":62.03},\"name\":\"bone9\"},{\"length\":142,\"parent\":\"bone4\",\"transform\":{\"y\":-0.09,\"skX\":-50.1,\"skY\":-50.1,\"x\":123},\"name\":\"bone5\"},{\"length\":10,\"parent\":\"weiba4\",\"transform\":{\"y\":18.03,\"skX\":1.16,\"skY\":1.16,\"x\":40.58},\"name\":\"bone21\"},{\"length\":35,\"parent\":\"weiba5\",\"transform\":{\"y\":6.5,\"skX\":7.73,\"skY\":7.73,\"x\":78.32},\"name\":\"bone25\"},{\"length\":36,\"parent\":\"weiba5\",\"transform\":{\"y\":-15.26,\"skX\":-46.24,\"skY\":-46.24,\"x\":41.93},\"name\":\"bone22\"},{\"length\":24,\"parent\":\"weiba5\",\"transform\":{\"y\":-8.06,\"skX\":-31.92,\"skY\":-31.92,\"x\":71.69},\"name\":\"bone23\"},{\"length\":82,\"parent\":\"bone9\",\"transform\":{\"y\":0.28,\"skX\":-22.38,\"skY\":-22.38,\"x\":60.68},\"name\":\"bone10\"},{\"length\":34,\"parent\":\"bone23\",\"transform\":{\"y\":-0.07,\"skX\":-33.88,\"skY\":-33.88,\"x\":25.26},\"name\":\"bone24\"}],\"slot\":[{\"color\":{},\"name\":\"tail\",\"parent\":\"weiba1\"},{\"z\":1,\"color\":{},\"name\":\"chibangL2\",\"parent\":\"chibangL3\"},{\"z\":2,\"color\":{},\"name\":\"chibangL1\",\"parent\":\"chibangL1\"},{\"z\":3,\"color\":{},\"name\":\"dabiL\",\"parent\":\"dabiL\"},{\"z\":4,\"color\":{},\"name\":\"xiaobiL\",\"parent\":\"xiaobiL\"},{\"z\":5,\"color\":{},\"name\":\"shouL\",\"parent\":\"shouL\"},{\"z\":6,\"color\":{},\"name\":\"jiaoL\",\"parent\":\"jiaoL\"},{\"z\":7,\"color\":{},\"name\":\"xiaotuiL\",\"parent\":\"xiaotuiL\"},{\"z\":8,\"color\":{},\"name\":\"datuiL\",\"parent\":\"datuiL\"},{\"z\":9,\"color\":{},\"name\":\"shenti\",\"parent\":\"shenti\"},{\"z\":10,\"color\":{},\"name\":\"bozixia\",\"parent\":\"bozixia\"},{\"z\":11,\"color\":{},\"name\":\"bozishang\",\"parent\":\"bozishang\"},{\"z\":12,\"color\":{},\"name\":\"toujiaoL\",\"parent\":\"toujiaoL\"},{\"z\":13,\"color\":{},\"name\":\"tou1\",\"parent\":\"tou1\"},{\"z\":14,\"color\":{},\"name\":\"chujiao\",\"parent\":\"chujiao\"},{\"z\":15,\"color\":{},\"name\":\"er\",\"parent\":\"er\"},{\"z\":16,\"color\":{},\"name\":\"zui\",\"parent\":\"zui\"},{\"z\":17,\"color\":{},\"name\":\"toujiaoR\",\"parent\":\"toujiaoR\"},{\"z\":18,\"color\":{},\"name\":\"tou\",\"parent\":\"tou\"},{\"z\":19,\"color\":{},\"name\":\"jiaoR\",\"parent\":\"jiaoR\"},{\"z\":20,\"color\":{},\"name\":\"xiaotuiR\",\"parent\":\"xiaotuiR\"},{\"z\":21,\"color\":{},\"name\":\"datuiR\",\"parent\":\"datuiR\"},{\"z\":22,\"color\":{},\"name\":\"chibangR2\",\"parent\":\"bone2\"},{\"z\":23,\"color\":{},\"name\":\"chibangR1\",\"parent\":\"chibangR1\"},{\"z\":24,\"color\":{},\"name\":\"jianbang\",\"parent\":\"jianbang\"},{\"z\":25,\"color\":{},\"name\":\"dabiR\",\"parent\":\"dabiR\"},{\"z\":26,\"color\":{},\"name\":\"xiaobiR\",\"parent\":\"xiaobiR\"},{\"z\":27,\"color\":{},\"name\":\"shouR\",\"parent\":\"shouR\"},{\"z\":28,\"color\":{},\"name\":\"author\",\"parent\":\"root\"}],\"ik\":[{\"bone\":\"xiaobiL\",\"weight\":0,\"bendPositive\":\"false\",\"target\":\"IK_Lhand\",\"chain\":1,\"name\":\"IK_L\"},{\"bone\":\"xiaobiR\",\"weight\":0,\"bendPositive\":\"false\",\"target\":\"IK_Rhand\",\"chain\":1,\"name\":\"IK_R\"}],\"skin\":[{\"name\":\"\",\"slot\":[{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":-0.78,\"skX\":-50.26,\"skY\":-50.26,\"x\":54.61},\"name\":\"shouR\"}],\"name\":\"shouR\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":0.49,\"skX\":126.36,\"skY\":126.36,\"x\":44.31},\"name\":\"er\"}],\"name\":\"er\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":-23.29,\"skX\":-70.67,\"skY\":-70.67,\"x\":34.66},\"name\":\"jiaoL\"}],\"name\":\"jiaoL\"},{\"display\":[{\"triangles\":[48,47,49,47,0,49,0,50,49,45,0,46,46,0,47,44,0,45,34,25,17,34,17,44,10,0,44,17,10,44,43,34,44,10,1,0,42,34,43,9,2,1,10,9,1,7,3,2,8,7,2,9,8,2,17,16,10,33,25,34,41,34,42,6,4,3,7,6,3,25,24,17,6,5,4,24,18,17,16,15,11,15,12,11,24,23,18,33,32,25,40,35,41,14,13,12,15,14,12,32,31,26,23,22,18,22,19,18,21,20,19,40,36,35,39,36,40,31,27,26,22,21,19,31,30,27,30,28,27,38,37,36,39,38,36,30,29,28,32,26,25,16,11,10,41,35,34],\"width\":263,\"edges\":[29,28,28,27,27,26,26,25,25,24,24,23,23,22,22,21,21,20,20,19,19,18,18,17,17,16,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,2,2,1,1,0,0,50,50,49,49,48,48,47,47,46,46,45,45,44,44,43,43,42,42,41,41,40,40,39,39,38,38,37,37,36,36,35,35,34,34,33,33,32,32,31,31,30,30,29],\"uvs\":[0.43834,0.72029,0.38736,0.79202,0.31233,0.84027,0.26327,0.90026,0.22575,0.99938,0.20747,0.99677,0.2017,0.93939,0.21228,0.82593,0.23922,0.73334,0.27,0.67335,0.30271,0.63422,0.23825,0.68508,0.18727,0.75159,0.14302,0.86114,0.1257,0.85592,0.14206,0.70986,0.18631,0.57815,0.23248,0.51164,0.17476,0.54685,0.10839,0.63813,0.07087,0.74507,0.05644,0.72029,0.07472,0.54815,0.1132,0.45165,0.14783,0.39035,0.18535,0.35514,0.11608,0.40209,0.06895,0.44512,0.0093,0.54293,0,0.54163,0.00546,0.41904,0.05163,0.3121,0.09973,0.23647,0.16514,0.18561,0.20939,0.16474,0.13821,0.17517,0.07087,0.20647,0.00065,0.25342,0.00065,0.21299,0.04297,0.13866,0.10165,0.08649,0.16611,0.04346,0.24884,0.01607,0.31329,0,0.523,0,0.64806,0.03824,0.76926,0.10475,0.82217,0.15561,1,0.26907,1,0.85462,0.43738,0.77507],\"vertices\":[-37.2,-33.3,-56.4,-35.46,-75.84,-45.41,-92.93,-48.56,-114.19,-44.68,-116.72,-48.8,-108.81,-56.78,-89.66,-67.98,-71.1,-73.3,-56.94,-73.97,-45.68,-71.76,-63.83,-79.2,-82.23,-81.98,-106.17,-78.27,-108.14,-82.49,-83.05,-96.34,-55.69,-102.67,-38.06,-100.9,-52.73,-108.78,-77.4,-111.84,-99.87,-107.03,-98.37,-112.97,-68.95,-129.49,-47.94,-132.87,-32.96,-132.89,-21.53,-129.22,-39.85,-138.12,-54.02,-142.87,-78.63,-143.75,-79.92,-145.85,-60.18,-159.19,-36.33,-162.2,-16.98,-161.1,1.31,-153.46,11.61,-146.7,-1.39,-160.32,-16.99,-170.66,-35.46,-179.77,-29.24,-184.54,-11.03,-184.5,6.39,-178.42,23.34,-170.06,40.8,-156.04,53.6,-144.49,87.19,-100.74,101.33,-70.14,110.51,-37,111.16,-19.95,122.18,30.54,32.08,99.72,-45.78,-27.03],\"type\":\"mesh\",\"transform\":{},\"name\":\"bozixia\",\"userEdges\":[],\"height\":194}],\"name\":\"bozixia\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":1.03,\"skX\":117.95,\"skY\":117.95,\"x\":130.75},\"name\":\"chibangL2\"}],\"name\":\"chibangL2\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":3.12,\"skX\":-104.98,\"skY\":-104.98,\"x\":40.73},\"name\":\"datuiR\"}],\"name\":\"datuiR\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":61.59,\"x\":3.27},\"name\":\"author\"}],\"name\":\"author\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":4.34,\"skX\":-48.94,\"skY\":-48.94,\"x\":69.9},\"name\":\"zui\"}],\"name\":\"zui\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":7.51,\"skX\":-160.17,\"skY\":-160.17,\"x\":36.43},\"name\":\"chibangR1\"}],\"name\":\"chibangR1\"},{\"display\":[{\"triangles\":[36,41,37,37,41,38,41,39,38,42,41,36,46,42,36,35,46,36,44,42,46,41,40,39,50,46,35,34,50,35,33,31,34,31,50,34,44,0,42,31,49,50,49,46,50,30,49,31,24,49,30,49,48,46,48,44,46,0,43,42,48,47,44,29,24,30,29,25,24,24,48,49,24,45,48,45,47,48,47,0,44,47,1,0,28,26,25,28,25,29,45,11,47,11,2,1,23,17,45,17,11,45,11,1,47,10,3,2,22,18,17,10,2,11,17,12,11,16,12,17,19,18,22,21,19,22,4,3,10,16,13,12,9,4,10,15,13,16,21,20,19,15,14,13,8,5,9,9,5,4,7,6,5,7,5,8,33,32,31,27,26,28,23,45,24,22,17,23],\"width\":301,\"edges\":[6,5,5,4,4,3,3,2,2,1,1,0,0,43,43,42,42,41,41,40,40,39,39,38,38,37,37,36,36,35,35,34,34,33,33,32,32,31,31,30,30,29,29,28,28,27,27,26,26,25,25,24,24,23,23,22,22,21,21,20,20,19,19,18,18,17,17,16,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6],\"uvs\":[0.48093,0.53756,0.40112,0.5215,0.32131,0.48936,0.23024,0.42642,0.15861,0.3983,0.05731,0.37553,0,0.37955,0,0.35678,0.05628,0.32464,0.14838,0.30723,0.26298,0.30188,0.36326,0.31527,0.26503,0.26304,0.17396,0.22287,0.10244,0.2058,0.12893,0.17466,0.24047,0.15457,0.33768,0.1452,0.27117,0.0903,0.19545,0.03807,0.17498,0.022,0.18624,0.00325,0.308,0.00861,0.40112,0.0461,0.52084,0.14118,0.47966,0.09482,0.42635,0.04892,0.35347,0.0021,0.43965,0,0.50889,0.01844,0.57927,0.0456,0.64568,0.10503,0.59247,0.02334,0.61128,0.01626,0.75836,0.11461,0.85,0.19883,0.92963,0.31161,1,0.47063,1,0.81729,0.84241,1,0.79396,1,0.80641,0.80932,0.58408,0.6915,0.43385,0.59966,0.53881,0.40723,0.45097,0.17942,0.61547,0.28392,0.45539,0.36353,0.53383,0.23206,0.56338,0.20534,0.70018,0.17506],\"vertices\":[-32.76,-58.56,-54.61,-69.21,-75.36,-83.39,-97.25,-105.33,-115.93,-117.9,-143.5,-131.94,-160.25,-136.17,-158.69,-141.17,-140.32,-143.21,-112.66,-138.82,-79.35,-129.77,-51.43,-117.89,-76.11,-138.12,-99.56,-155.07,-116.33,-165.43,-109.21,-169.67,-75.78,-164.14,-47.2,-157.53,-62.58,-175.52,-80.78,-193.75,-85.57,-199.1,-81.06,-202.22,-46.42,-190.18,-22.2,-173.64,5.72,-142.07,-2.56,-154.61,-13.58,-171.28,-29.06,-184.79,-6.71,-179.93,10.25,-169.43,28.18,-158.32,44.08,-138.88,34.35,-161.57,40.24,-161.45,74.86,-125.72,94.14,-96.86,105.48,-71.38,121.02,-26.96,98.03,47.12,84.94,89.31,25.71,70.94,6.35,40.46,-24.82,-8.64,-50.52,-49.12,-7.23,-82.02,-16.96,-139.9,23.2,-102.28,-28.24,-99.07,3.26,-120.95,13.58,-124.18,54.97,-118.63],\"type\":\"mesh\",\"transform\":{},\"name\":\"bozishang\",\"userEdges\":[44,0,17,45,44,46,11,47,47,44,1,47,45,48,48,46,47,48,24,49,49,46,48,49,31,50,11,2,10,3,9,4,8,5,16,13,17,12,45,11,22,18,23,17,28,26,30,24,31,49,50,46,34,50,25,29],\"height\":230}],\"name\":\"bozishang\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":-1.53,\"skX\":161.33,\"skY\":161.33,\"x\":31.02},\"name\":\"chibangL1\"}],\"name\":\"chibangL1\"},{\"display\":[{\"edges\":[0,51,51,50,50,49,49,48,48,47,47,46,46,45,45,44,44,43,43,42,42,41,41,40,40,39,39,38,38,37,37,36,36,35,35,34,34,33,33,32,32,31,31,30,30,29,29,28,28,27,27,26,26,25,25,24,24,23,23,22,22,21,21,20,20,19,19,18,18,17,17,16,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,2,2,1,1,0],\"triangles\":[21,25,24,21,24,23,22,21,23,84,85,26,84,26,21,21,26,25,9,15,14,13,9,14,55,68,16,12,9,13,20,84,21,8,55,9,10,9,12,83,84,20,85,27,26,85,28,27,19,81,20,81,83,20,68,17,16,81,82,83,80,87,18,79,18,17,68,79,17,18,87,19,87,81,19,11,10,12,77,80,78,83,28,85,83,85,84,82,74,28,82,28,83,56,55,8,74,29,28,55,67,68,69,79,68,87,75,81,81,75,82,75,74,82,7,56,8,80,75,87,69,78,79,67,69,68,77,76,80,70,78,69,76,75,80,66,70,67,55,86,67,86,66,67,70,69,67,30,32,31,56,86,55,70,71,78,71,77,78,57,56,7,34,33,29,29,33,30,33,32,30,6,57,7,74,35,29,71,76,77,6,58,57,75,73,74,71,72,76,57,86,56,35,34,29,97,72,71,98,99,72,86,65,66,65,97,66,63,99,98,57,90,86,90,54,86,54,65,86,98,72,97,65,98,97,64,63,98,58,90,57,88,90,58,65,64,98,59,58,6,5,59,6,99,36,73,54,64,65,52,63,64,90,96,54,53,64,54,59,88,58,93,88,59,96,53,54,37,36,99,63,37,99,60,59,5,96,91,53,4,60,5,95,96,90,88,95,90,91,45,53,44,37,63,60,93,59,52,44,63,95,91,96,95,89,91,93,94,88,94,95,88,44,38,37,44,43,38,46,45,91,89,46,91,60,94,93,61,94,60,45,44,52,42,39,38,43,42,38,41,40,39,94,89,95,4,61,60,3,61,4,94,92,89,42,41,39,92,46,89,92,47,46,61,92,94,62,92,61,3,62,61,2,62,3,62,47,92,62,48,47,1,48,62,2,1,62,1,49,48,1,0,49,0,51,50,0,50,49,64,52,53,45,52,53,99,72,73,73,75,76,72,73,76,36,73,35,73,35,74,78,79,80,80,79,18,55,9,16,9,16,15,66,70,97,97,71,70],\"weights\":[1,53,1,1,53,1,1,53,1,1,53,1,1,53,1,1,53,1,2,27,0.00799,44,0.992,3,27,0.00374,30,0.00425,44,0.992,2,30,0.00799,44,0.992,1,30,1,1,30,1,1,30,1,1,30,1,1,30,1,1,30,1,1,30,1,1,30,1,1,30,1,1,30,1,1,27,1,1,27,1,1,27,1,1,27,1,1,27,1,1,27,1,1,27,1,1,27,1,1,27,1,1,27,1,1,58,1,1,58,1,1,58,1,1,58,1,1,58,1,1,58,1,1,58,1,2,51,0.51049,58,0.4895,1,51,1,1,51,1,1,51,1,1,51,1,1,51,1,1,51,1,1,51,1,1,51,1,1,51,1,2,53,0.51199,51,0.488,1,53,1,1,53,1,1,53,1,1,53,1,1,53,1,1,51,1,1,51,1,1,38,1,1,38,1,2,44,0.992,38,0.00799,4,44,0.992,53,0.00039,51,0.00042,38,0.00718,4,44,0.992,53,0.00051,51,0.00047,38,0.007,1,53,1,1,53,1,1,53,1,1,53,1,1,51,1,1,51,1,1,38,1,1,38,1,1,38,1,1,42,1,1,42,1,1,42,1,1,42,1,1,52,1,1,58,1,1,58,1,1,58,1,1,52,1,1,42,1,1,42,1,1,42,1,1,30,1,1,27,1,1,27,1,1,27,1,1,27,1,1,27,1,1,38,1,1,27,1,2,53,0.51199,51,0.488,2,53,0.51199,51,0.488,2,51,0.48,38,0.51999,1,51,1,1,53,1,1,53,1,1,53,1,2,53,0.51199,51,0.488,1,51,1,2,38,0.50399,42,0.496,2,51,0.54103,52,0.45896,2,51,0.53831,58,0.46168],\"width\":323,\"userEdges\":[44,52,52,53,53,54,55,56,56,57,57,58,58,59,59,60,60,61,61,62,37,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,35,29,74,74,75,75,76,76,77,77,78,78,79,79,80,81,82,82,83,83,84,84,85,85,28,53,64,54,65,72,76,71,77,70,78,69,79,73,75,35,74,54,86,86,55,66,86,76,80,80,87,87,81,75,87,87,19,62,48,49,0,48,1,62,2,61,3,60,4,59,5,58,6,57,7,56,8,10,12,9,13,52,63,44,37,42,39,43,38,80,18,79,17,55,67,81,20,33,30,29,34,66,70,83,20,84,21,68,16,9,55,9,16,58,88,89,46,54,90,90,88,57,90,53,91,91,89,91,45,62,92,92,89,47,92,60,93,93,88,93,59,92,94,94,93,61,94,88,95,95,89,94,95,90,96,96,91,95,96,96,53,52,45,65,97,97,71,70,97,64,98,98,72,97,98,63,99,99,73,98,99,99,36],\"height\":339,\"type\":\"mesh\",\"bonePose\":[53,-0.8376233910890238,0.5462481621941844,-0.5462481621941844,-0.8376233910890238,-271.87142720185176,-503.25224800427674,27,-0.41707409184077104,-0.908872489359864,0.908872489359864,-0.41707409184077104,-93.68821585085512,-237.61790866371763,44,-0.9563557698862928,-0.2922047936040679,0.2922047936040679,-0.9563557698862928,-154.21336907441335,-467.3971304102662,30,0.03228298102577437,-0.9994787687270248,0.9994787687270248,0.03228298102577437,-156.1334343263079,-372.32956365152097,58,0.3272178989791039,0.9449489121575306,-0.9449489121575306,0.3272178989791039,-207.45886324156325,-315.7626631881689,51,-0.33693093568148663,0.9415293646938464,-0.9415293646938464,-0.33693093568148663,-239.1090784370761,-403.0520103994283,38,-0.8164400437365579,0.5774302165486729,-0.5774302165486729,-0.8164400437365579,-173.95678228376903,-448.71476881317034,42,-0.5635260489375712,0.8260982944957638,-0.8260982944957638,-0.5635260489375712,-168.991530863295,-427.7335396229756,52,-0.057215536424438,0.998361849427182,-0.998361849427182,-0.057215536424438,-203.70748317348875,-376.32723986121147],\"transform\":{},\"slotPose\":[1,0,0,1,0,0],\"uvs\":[0,0.40391,0,0.30686,0.08034,0.13778,0.19389,0.08185,0.29847,0.03034,0.43156,0.01273,0.53323,0.08318,0.61885,0.10006,0.69406,0.11488,0.74951,0.09198,0.74397,0.04267,0.72918,0,0.80682,0,0.89185,0.06556,0.91958,0.18357,0.89555,0.24874,0.83187,0.32677,0.7935,0.37379,0.78348,0.49741,0.80703,0.60679,0.83548,0.68339,0.87978,0.71579,0.94623,0.71645,1,0.76561,1,0.85227,0.91325,0.90881,0.84786,0.89993,0.79599,0.92257,0.74027,0.84934,0.62566,0.86343,0.63675,0.94445,0.66448,1,0.60717,1,0.53878,0.93564,0.53844,0.87724,0.53809,0.81754,0.45312,0.68447,0.38621,0.63988,0.36388,0.66957,0.33729,0.70491,0.30217,0.79122,0.2652,0.77889,0.24856,0.69082,0.26704,0.58867,0.33938,0.56399,0.34243,0.44449,0.28362,0.36141,0.19261,0.32872,0.10278,0.32911,0.0489,0.4074,0.03043,0.4918,0,0.49708,0.36241,0.52773,0.433,0.39962,0.47496,0.35601,0.66949,0.25607,0.61799,0.22518,0.54838,0.21519,0.48926,0.15977,0.42633,0.11888,0.34909,0.11525,0.23848,0.16885,0.1641,0.22246,0.41554,0.55583,0.47253,0.42184,0.50378,0.38506,0.59017,0.33427,0.68301,0.30449,0.70415,0.30975,0.68301,0.32814,0.63797,0.34741,0.59845,0.41221,0.55341,0.45162,0.51297,0.63553,0.59891,0.7905,0.57481,0.6385,0.61728,0.47885,0.63334,0.43073,0.66892,0.38262,0.7045,0.36293,0.66663,0.50618,0.72172,0.67896,0.72172,0.7227,0.75615,0.74676,0.7814,0.78175,0.77566,0.81893,0.5719,0.30621,0.70483,0.626,0.40205,0.21656,0.31258,0.32028,0.4397,0.28856,0.37562,0.36182,0.22996,0.26585,0.37465,0.16413,0.29613,0.21933,0.352,0.27459,0.40862,0.32409,0.55931,0.40099,0.51935,0.43908,0.47455,0.6041],\"vertices\":[-391.48,-367.87,-396.64,-400.37,-380,-461.04,-346.75,-485.52,-316.14,-508.06,-274.63,-520.7,-238.45,-502.27,-210.24,-500.96,-185.46,-499.81,-169.01,-510.3,-173.4,-526.53,-180.4,-540.06,-155.63,-544,-125.02,-526.38,-109.89,-488.28,-114.08,-465.24,-125.01,-436.71,-131.59,-419.52,-126.62,-373.16,-113.3,-345.91,-103.32,-325.5,-87.12,-318.68,-74.15,-313.23,-54.95,-308.43,-47.06,-258.92,-71.54,-239.9,-100.47,-228.04,-123.99,-231.53,-131.57,-256.32,-167.45,-245.75,-159.59,-219.19,-147.8,-201.99,-166.07,-199.09,-191.31,-217.18,-195.09,-240.28,-198.96,-263.9,-233.22,-288.79,-254.71,-304.4,-260.7,-295.17,-267.82,-284.18,-274.42,-253.5,-286.87,-255.75,-296.86,-284.38,-296.42,-319.52,-276.66,-335.96,-289.17,-358.45,-314.01,-381.04,-346.6,-389.68,-365.84,-387.12,-375.35,-363.25,-377.1,-339.99,-386.52,-336.69,-268.93,-344.81,-253.56,-391.23,-242.51,-407.96,-185.78,-451.3,-203.85,-459.03,-226.59,-458.85,-248.39,-474.4,-270.65,-484.91,-295.48,-482.21,-327.91,-458.66,-348.79,-436.94,-250.81,-338.05,-239.78,-385.81,-231.78,-399.71,-206.91,-421.11,-178.9,-435.79,-171.87,-435.08,-177.62,-427.86,-190.96,-419.13,-200.12,-395.43,-212.39,-379.95,-215.5,-316.33,-179.86,-268.81,-195.63,-318.48,-190.57,-374.08,-188.01,-391,-179.22,-408.92,-168.92,-417.31,-173.36,-367.43,-146.58,-312.4,-144.24,-297.76,-131.99,-291.46,-122.06,-281.03,-121.9,-268.3,-214.24,-429.56,-154.79,-329.27,-273.19,-450.96,-296.2,-411.69,-257.35,-428.75,-273.88,-400.98,-325.47,-425.75,-284.72,-467.14,-306.84,-444.68,-286.06,-428.98,-265.37,-415.27,-213.2,-397.2,-223.92,-382.41,-229.42,-324.9],\"name\":\"chibangR2\"}],\"name\":\"chibangR2\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":-1.04,\"skX\":170.08,\"skY\":170.08,\"x\":19.79},\"name\":\"xiaotuiL\"}],\"name\":\"xiaotuiL\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":-9.72,\"skX\":140.32,\"skY\":140.32,\"x\":101.02},\"name\":\"toujiaoR\"}],\"name\":\"toujiaoR\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":0.64,\"skX\":-42.65,\"skY\":-42.65,\"x\":39.21},\"name\":\"datuiL\"}],\"name\":\"datuiL\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":-2.34,\"skX\":134.25,\"skY\":134.25,\"x\":57.58},\"name\":\"toujiaoL\"}],\"name\":\"toujiaoL\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":0.45,\"skX\":161.47,\"skY\":161.47,\"x\":26.8},\"name\":\"tou1\"}],\"name\":\"tou1\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":3.97,\"skX\":147.63,\"skY\":147.63,\"x\":47},\"name\":\"chujiao\"}],\"name\":\"chujiao\"},{\"display\":[{\"triangles\":[10,11,0,11,1,0,5,6,3,2,5,3,6,7,3,7,8,3,9,10,3,8,9,3,10,0,3,12,1,11,7,18,8,19,9,8,21,11,10,9,20,10,20,21,10,19,20,9,18,19,8,6,17,7,12,11,19,11,21,20,19,11,20,18,12,19,2,4,5,17,13,18,13,12,18,17,18,7,16,14,17,14,13,17,6,16,17,13,1,12,5,16,6,5,15,16,15,14,16,4,15,5,14,15,13,15,2,13,2,1,13,4,2,15],\"width\":176,\"edges\":[1,0,0,3,3,2,2,1],\"uvs\":[1,1,0,1,0,0,1,0,0.30764,0.29612,0.37783,0.28012,0.47868,0.29745,0.53596,0.36345,0.58357,0.42145,0.58921,0.48945,0.60616,0.55745,0.51499,0.56812,0.40445,0.52745,0.34717,0.47879,0.33587,0.38612,0.31369,0.31542,0.41575,0.33012,0.49724,0.35812,0.54161,0.39145,0.57227,0.44812,0.57711,0.52745,0.57066,0.55079],\"vertices\":[168.1,156.16,-7.88,158.1,-10.22,-54.88,165.76,-56.82,44.6,7.58,56.92,4.04,74.71,7.54,84.95,21.48,93.46,33.74,94.61,48.22,97.75,62.67,81.73,65.11,62.19,56.67,51.99,46.41,49.78,26.7,45.72,11.68,63.71,14.62,78.12,20.42,86,27.44,91.53,39.45,92.57,56.33,91.49,61.32],\"type\":\"mesh\",\"transform\":{},\"name\":\"tou\",\"userEdges\":[4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,4,15,15,14,15,16,16,17,17,18,18,19,19,20,20,21],\"height\":213}],\"name\":\"tou\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":1.51,\"skX\":-155.67,\"skY\":-155.67,\"x\":22.26},\"name\":\"dabiR\"}],\"name\":\"dabiR\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":0.4,\"skX\":132.48,\"skY\":132.48,\"x\":16.5},\"name\":\"xiaotuiR\"}],\"name\":\"xiaotuiR\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":0.58,\"skX\":-140.69,\"skY\":-140.69,\"x\":12.5},\"name\":\"jianbang\"}],\"name\":\"jianbang\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":6.26,\"skX\":106.65,\"skY\":106.65,\"x\":104.83},\"name\":\"shenti\"}],\"name\":\"shenti\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":10.76,\"skX\":-95.27,\"skY\":-95.27,\"x\":49.85},\"name\":\"jiaoR\"}],\"name\":\"jiaoR\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":3.85,\"skX\":-12.81,\"skY\":-12.81,\"x\":26.27},\"name\":\"xiaobiL\"}],\"name\":\"xiaobiL\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":2,\"skX\":2.59,\"skY\":2.59,\"x\":19.15},\"name\":\"shouL\"}],\"name\":\"shouL\"},{\"display\":[{\"edges\":[61,60,60,59,59,58,58,57,57,56,56,55,55,54,54,53,53,52,52,51,51,50,50,49,49,48,48,47,47,46,46,45,45,44,44,43,43,42,42,41,41,40,40,39,39,38,38,37,37,36,36,35,35,34,34,33,33,32,32,31,31,30,30,29,29,28,28,27,27,26,26,25,25,24,24,23,23,22,22,21,21,20,20,19,19,18,18,17,17,16,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,2,2,1,1,0,0,79,79,78,78,77,77,76,76,75,75,74,74,73,73,72,72,71,71,70,70,69,69,68,68,67,67,66,66,65,65,64,64,63,63,62,62,61],\"triangles\":[29,28,30,28,83,30,83,31,30,83,32,31,27,83,28,82,33,32,83,82,32,96,83,27,26,96,27,95,82,83,82,34,33,81,34,82,96,95,83,26,23,96,23,95,96,25,23,26,95,94,82,94,81,82,80,35,81,81,35,34,21,19,22,94,97,81,97,80,81,80,36,35,17,15,18,14,12,15,17,16,15,84,36,80,15,12,97,13,12,14,11,98,12,37,36,84,85,37,84,9,98,11,10,9,11,99,84,98,9,99,98,99,85,84,79,112,0,0,112,1,112,2,1,77,79,78,77,107,79,107,104,79,104,112,79,112,3,2,108,77,76,105,8,7,6,105,7,5,105,6,107,106,104,75,74,76,74,108,76,104,113,112,113,3,112,106,88,104,108,107,77,74,109,108,108,89,107,89,106,107,100,99,9,113,103,3,100,9,8,88,113,104,103,5,3,105,100,8,86,37,85,114,113,88,110,103,114,101,100,105,114,103,113,106,43,88,109,89,108,103,102,5,44,43,106,100,85,99,38,37,86,100,86,85,89,44,106,110,102,103,5,102,105,102,101,105,101,86,100,111,102,110,42,110,114,87,38,86,90,109,74,73,90,74,101,87,86,42,41,110,41,111,110,111,87,101,111,101,102,45,44,90,39,38,87,40,87,111,41,40,111,40,39,87,70,90,73,72,70,73,70,45,90,72,71,70,46,45,69,69,45,70,68,46,69,68,67,46,93,47,46,67,93,46,93,48,47,92,93,67,66,92,67,93,52,48,52,49,48,92,52,93,91,52,92,52,51,49,51,50,49,66,91,92,63,91,66,65,63,66,58,54,53,59,58,53,63,59,91,58,57,54,62,59,63,64,63,65,56,55,54,57,56,54,62,60,59,61,60,62,24,25,23,21,20,19,3,5,4,114,42,88,42,43,88,109,89,90,90,44,89,53,59,52,91,59,52,22,23,19,19,94,23,23,94,95,18,19,15,19,15,94,15,97,94,12,97,98,97,98,80,98,84,80],\"weights\":[1,39,1,1,39,1,2,39,0.86422,45,0.13576,2,39,0.19289,45,0.8071,1,45,1,2,45,0.18894,35,0.81105,1,35,1,3,45,0.01096,35,0.98779,28,0.00124,3,22,0.0211,35,0.73113,28,0.24775,3,22,0.05835,35,0.50368,28,0.43796,1,28,1,3,19,0.02092,28,0.78367,25,0.19539,3,19,0.03313,28,0.30362,25,0.66323,2,25,0.98965,13,0.01034,1,25,0.99999,2,25,0.21424,13,0.78575,4,8,0.00001,19,0.00016,13,0.99845,10,0.00136,2,19,0.00002,13,0.99996,2,13,0.93322,10,0.06677,3,8,0.00016,13,0.28786,10,0.71197,2,8,0.0001,10,0.99989,2,8,0.00001,10,0.99998,2,10,0.98468,16,0.01531,3,8,0.03447,10,0.29275,16,0.67277,3,8,0.00001,10,0.00013,16,0.99985,1,16,1,1,16,1,2,8,0.25929,16,0.7407,2,8,0.38649,16,0.6135,2,8,0.56992,16,0.43007,2,8,0.84896,16,0.15103,2,8,0.99936,16,0.00063,1,8,0.99999,1,8,0.99999,2,8,0.83565,19,0.16434,1,19,1,1,19,1,3,8,0.00006,19,0.02908,22,0.97085,3,8,0.00002,22,0.93617,34,0.0638,1,22,1,1,34,1,2,34,0.74658,46,0.25341,2,34,0.50258,46,0.49741,2,34,0.33702,46,0.66297,2,34,0.21685,46,0.78314,3,46,0.86154,50,0.12647,56,0.01198,3,46,0.4182,50,0.48472,56,0.09707,3,46,0.02573,50,0.3134,56,0.66085,1,56,1,2,50,0.00004,56,0.99995,1,56,1,4,56,0.98231,57,0.01748,59,0.00005,55,0.00014,3,56,0.50422,57,0.48779,59,0.00796,3,56,0.06208,57,0.7257,59,0.21221,1,59,1,1,59,1,3,56,0.00001,57,0.00005,59,0.99993,1,59,1,3,57,0.34676,59,0.5478,55,0.10542,3,57,0.29248,59,0.05717,55,0.65033,3,50,0.0002,57,0.00206,55,0.99773,2,59,0.00014,55,0.99985,1,55,1,4,50,0.13544,56,0.00137,55,0.86317,48,0.00001,4,50,0.14617,56,0.00151,55,0.85229,48,0.00001,4,50,0.15994,56,0.00145,55,0.83858,48,0.00001,4,50,0.63112,57,0.06527,55,0.30352,48,0.00005,3,50,0.99317,55,0.00639,48,0.00043,2,46,0.28793,50,0.71206,2,46,0.69421,50,0.30578,1,46,1,1,54,1,1,54,1,1,54,1,1,48,1,2,34,0.00024,48,0.99975,2,48,0.87183,49,0.12816,3,34,0.01222,48,0.04525,49,0.94252,1,49,0.99999,3,46,0.0009,49,0.60508,39,0.39401,1,19,1,1,8,1,1,8,1,2,8,0.08198,16,0.91801,1,19,1,1,22,1,1,22,1,1,34,1,4,34,0.16985,46,0.09623,49,0.32506,39,0.40884,1,46,1,1,46,1,3,50,0.36321,57,0.37803,55,0.25874,1,50,1,3,50,0.69398,56,0.30598,48,0.00002,3,8,0.00016,13,0.28786,10,0.71197,3,8,0.03447,10,0.29275,16,0.67277,1,16,1,2,25,0.21424,13,0.78575,3,19,0.02092,28,0.78367,25,0.19539,1,22,1,1,22,1,1,35,1,1,35,1,2,39,0.19289,45,0.8071,4,34,0.16985,46,0.09623,49,0.32506,39,0.40884,1,35,1,3,34,0.57899,48,0.17047,49,0.25053,3,34,0.01222,48,0.04525,49,0.94252,1,48,1,1,46,1,1,34,1,1,34,1,1,39,1,1,39,1,1,34,1],\"width\":447,\"userEdges\":[46,68,57,54,58,53,52,48,80,35,81,34,80,81,82,33,81,82,83,31,82,83,83,28,84,36,80,84,85,37,84,85,86,38,85,86,87,39,86,87,42,88,44,89,45,90,90,73,89,90,90,70,62,60,49,51,59,52,63,66,63,59,59,91,91,92,92,93,93,52,93,47,92,66,93,67,93,46,19,94,94,81,23,95,95,82,94,95,26,96,96,83,95,96,26,23,23,19,19,15,15,12,15,97,97,80,94,97,11,98,98,84,97,98,9,99,99,85,98,99,8,100,100,86,99,100,101,87,100,101,101,102,102,103,79,104,104,88,5,102,3,103,11,9,7,105,105,101,8,105,105,5,3,5,88,106,106,89,106,43,77,107,107,106,104,107,76,108,108,89,107,108,108,109,109,90,74,109,109,89,103,110,110,41,87,111,111,110,102,111,111,40,3,112,112,79,1,112,103,113,113,104,112,113,88,114,114,110,113,114],\"height\":191,\"type\":\"mesh\",\"bonePose\":[39,0.966510581262098,-0.25662676459871003,0.25662676459871003,0.966510581262098,-172.40809861614636,-148.62047305813627,45,0.9983718202161502,-0.05704128853989304,0.05704128853989304,0.9983718202161502,-179.46735421720473,-134.8203821034025,35,0.8416993101205956,-0.5399465448935789,0.5399465448935789,0.8416993101205956,-179.76229869829584,-120.64403840961228,28,0.16298157364765775,-0.9866291130163012,0.9866291130163012,0.16298157364765775,-159.47563598095962,-108.65893866897432,22,-0.8154309948913071,-0.5788542930397712,0.5788542930397712,-0.8154309948913071,-159.3228911032403,-75.92972283659712,19,-0.975496158686671,-0.22001646390111165,0.22001646390111165,-0.975496158686671,-93.75979427790917,-61.14241629780341,25,-0.41834271026840136,-0.9082892583121792,0.9082892583121792,-0.41834271026840136,-122.99558442933076,-102.32387540529548,8,-0.9659709840219864,0.25865045530134956,-0.25865045530134956,-0.9659709840219864,42.89,-96.79,13,-0.6691306063588585,-0.743144825477394,0.743144825477394,-0.6691306063588585,-92.94379105376431,-107.27326323061168,10,-0.7952619025399059,-0.6062660359682119,0.6062660359682119,-0.7952619025399059,-66.00275752412203,-115.64650706766136,16,-0.986629113016301,-0.16298157364765786,0.16298157364765786,-0.986629113016301,-22.04661835657165,-138.80380245125357,34,0.4461978131098085,-0.8949343616020254,0.8949343616020254,0.4461978131098085,-210.5830491612614,-113.85097276149668,46,-0.6285062207873359,-0.7778045579910295,0.7778045579910295,-0.6285062207873359,-187.2267707612499,-158.6793773650642,50,-0.9704643831515374,0.2412444424941355,-0.2412444424941355,-0.9704643831515374,-223.05530503375164,-199.29567744131643,56,-0.496973961027555,0.8677654533689287,-0.8677654533689287,-0.496973961027555,-260.0654864268351,-174.37101148064485,48,0.7590440980264732,-0.6510392132976154,0.6510392132976154,0.7590440980264732,-175.48529199060843,-186.42361237485633,57,-0.6961634275566142,0.7178833346252209,-0.7178833346252209,-0.6961634275566142,-290.68346645538264,-174.17892043071046,59,-0.17777179526300252,0.9840717396658484,-0.9840717396658484,-0.17777179526300252,-308.2183028020389,-155.99645595814843,55,-0.9940942793684237,0.10851987710541652,-0.10851987710541652,-0.9940942793684237,-300.63016439839197,-186.70943119566073,54,-0.6126312001868036,-0.7903689091542485,0.7903689091542485,-0.6126312001868036,-198.70773702022177,-201.57465348913584,49,0.8558159982509732,-0.517280366085637,0.517280366085637,0.8558159982509732,-167.70714256975248,-167.45819933989085],\"transform\":{},\"slotPose\":[1,0,0,1,0,0],\"uvs\":[0.43539,0.33299,0.43522,0.3471,0.4213,0.39349,0.39882,0.41862,0.41694,0.43746,0.38942,0.4728,0.4166,0.45945,0.41703,0.47413,0.4005,0.52621,0.40251,0.54034,0.42969,0.49008,0.45689,0.57742,0.47432,0.57647,0.47947,0.50202,0.48459,0.49678,0.54054,0.54915,0.52338,0.47222,0.52858,0.46292,0.56841,0.5017,0.59526,0.52553,0.56554,0.43593,0.57797,0.41652,0.6303,0.46773,0.68056,0.46622,0.61975,0.3858,0.62545,0.36614,0.72072,0.33266,0.83533,0.17391,0.88595,0.20616,0.95813,0.25213,0.99027,0.49033,0.97526,0.71846,0.89142,0.89232,0.78614,0.96143,0.63256,0.98798,0.53772,0.97332,0.41793,0.91358,0.33172,0.77172,0.30164,0.72222,0.25737,0.58129,0.28533,0.42438,0.30898,0.34513,0.31877,0.31231,0.31899,0.28185,0.31919,0.25456,0.30332,0.20368,0.27631,0.18235,0.24022,0.26417,0.20599,0.31054,0.18139,0.36444,0.15605,0.42458,0.15408,0.35797,0.1572,0.29262,0.12609,0.34472,0.09616,0.4578,0.07752,0.5715,0.06497,0.56479,0.06636,0.44341,0.06488,0.30863,0.07912,0.23668,0.04888,0.21829,0.00791,0.19157,0.05127,0.16139,0.10835,0.09246,0.09703,0.05932,0.10924,0.05193,0.15055,0.06843,0.20215,0.03444,0.27482,0.03871,0.30202,0.05475,0.32498,0.08432,0.31017,0.03019,0.31644,0.02207,0.34738,0.07369,0.38485,0.13341,0.41115,0.13059,0.41056,0.16676,0.41023,0.21993,0.43351,0.24353,0.41838,0.30444,0.53966,0.68156,0.60656,0.66559,0.70628,0.58685,0.77236,0.41092,0.44944,0.64165,0.38786,0.58822,0.37811,0.57059,0.35845,0.52574,0.39259,0.30939,0.38471,0.19457,0.33571,0.10632,0.12584,0.19016,0.173,0.159,0.19242,0.19536,0.59887,0.57023,0.68725,0.49763,0.73088,0.34806,0.54028,0.58806,0.45324,0.6089,0.39449,0.56657,0.38757,0.55183,0.37112,0.5174,0.3721,0.48119,0.38482,0.40768,0.40232,0.30752,0.3929,0.49539,0.39343,0.24347,0.39978,0.23942,0.39544,0.18303,0.38089,0.16245,0.37796,0.4021,0.36319,0.4812,0.40946,0.35652,0.39355,0.35769,0.38542,0.35479],\"vertices\":[-154.67,-155.47,-154.76,-152.79,-161,-143.93,-171.06,-139.15,-162.96,-135.54,-175.27,-128.8,-163.11,-131.32,-162.93,-128.53,-170.34,-118.59,-169.45,-115.88,-157.27,-125.46,-145.15,-108.75,-137.36,-108.92,-135.04,-123.15,-132.76,-124.15,-107.77,-114.1,-115.41,-128.81,-113.1,-130.57,-95.29,-123.14,-83.3,-118.57,-96.56,-135.71,-91,-139.41,-67.62,-129.58,-45.16,-129.86,-72.34,-145.26,-69.78,-149.01,-27.18,-155.34,24.09,-185.6,46.71,-179.41,78.96,-170.58,93.26,-125.07,86.49,-81.52,48.98,-48.37,1.91,-35.22,-66.75,-30.24,-109.14,-33.09,-162.68,-44.59,-201.18,-71.75,-214.61,-81.23,-234.35,-108.2,-221.8,-138.14,-211.19,-153.26,-206.8,-159.52,-206.69,-165.34,-206.59,-170.55,-213.67,-180.29,-225.74,-184.39,-241.91,-168.8,-257.23,-159.98,-268.24,-149.7,-279.61,-138.23,-280.44,-150.95,-279.03,-163.44,-292.97,-153.52,-306.39,-131.95,-314.77,-110.24,-320.37,-111.53,-319.7,-134.72,-320.32,-160.47,-313.92,-174.19,-327.44,-177.73,-345.75,-182.87,-326.35,-188.6,-300.8,-201.71,-305.83,-208.06,-300.38,-209.46,-281.91,-206.26,-258.84,-212.72,-226.34,-211.84,-214.85,-207.93,-206.2,-204.99,-210.53,-213.44,-207.74,-214.97,-193.93,-205.09,-177.19,-193.64,-165.44,-194.16,-165.72,-187.25,-165.88,-177.09,-155.49,-172.56,-162.28,-160.94,-108.19,-88.8,-78.29,-91.82,-33.7,-106.8,-4.12,-140.36,-148.51,-96.5,-176.01,-106.75,-180.37,-110.13,-189.14,-118.71,-173.81,-160.02,-177.28,-181.96,-199.12,-199.26,-293.02,-183.03,-271.92,-188.95,-263.24,-181.99,-81.7,-110.03,-42.18,-123.86,-22.64,-152.39,-107.89,-106.66,-146.79,-102.75,-173.04,-110.88,-176.13,-113.7,-183.46,-120.3,-183.03,-127.21,-177.32,-141.24,-169.45,-160.36,-173.73,-124.49,-173.4,-172.61,-170.57,-173.37,-172.48,-184.15,-178.98,-188.1,-180.38,-142.31,-187.01,-127.22,-166.28,-150.99,-173.39,-150.79,-177.02,-151.36],\"name\":\"tail\"}],\"name\":\"tail\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":0.15,\"skX\":-59.19,\"skY\":-59.19,\"x\":20.03},\"name\":\"dabiL\"}],\"name\":\"dabiL\"},{\"display\":[{\"type\":\"image\",\"transform\":{\"y\":3.84,\"skX\":-15.26,\"skY\":-15.26,\"x\":19.01},\"name\":\"xiaobiR\"}],\"name\":\"xiaobiR\"}]}],\"animation\":[{\"ffd\":[{\"slot\":\"bozishang\",\"frame\":[{\"vertices\":[-0.55,-0.17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.67,-2.19,0,0,0,0,0,0,1.67,-2.19],\"curve\":[0,0,1,1],\"duration\":15,\"offset\":6},{\"vertices\":[0.4,0.15,-0.76,2.81,-4.77,10.08,-11.68,16.11,-12.87,24.64,-26.08,27.19,-11.7,23.19,-7.11,15.59,-5.63,11.07,-1.18,9.17,1.39,5.6,-3.24,4.04,-8.67,12.97,-16.85,21.14,-6.58,14.39,-4.03,7.4,1.97,7.57,-9,9.37,-15.72,15.72,-25.49,21.1,-23.44,15.57,-19.7,9.46,-9.14,7.02,2.99,-0.4,0,0,-5.63,6.27,-16.12,9.16,-7.77,4.34,0,0,-4.96,-0.92,0,0,-6.26,1.55,-2.99,2.14,0,0,4.43,0.43,10.55,-1.42,8.32,2.14,0,0,0,0,0,0,0,0,0,0,-0.34,-0.85],\"curve\":[0,0,1,1],\"duration\":15,\"offset\":2},{\"vertices\":[-0.55,-0.17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.67,-2.19,0,0,0,0,0,0,1.67,-2.19],\"curve\":[0,0,1,1],\"duration\":0,\"offset\":6,\"tweenEasing\":null}],\"scale\":1,\"skin\":\"\",\"name\":\"bozishang\",\"offset\":0},{\"slot\":\"bozixia\",\"frame\":[{\"vertices\":[1.1,-0.21],\"curve\":[0,0,1,1],\"duration\":15,\"offset\":8},{\"vertices\":[-8.59,11.88,-8.59,11.88,-8.59,11.88,-8.59,11.88,-7.48,11.67,4.07,6.14,4.89,6.73,3.24,9.91,2.02,10.4,2.56,12.78,9.22,8.28,7.43,1.43,1.39,1.91,1.39,1.91,-3.32,3.87,-0.8,4.72,-2.83,7.51,3.98,9.41,2.54,10.17,1.27,8.66,-3.54,3.97,-0.52,0.38,-2.72,6.76,-4.04,8.26,-0.49,12.25,4.31,13.04,1.78,9.2,-4.57,7.17,3.4,12.21,15.45,4.95,7.51,11.24,-0.38,14.17,-6.63,16,-7.31,12.94,-2.38,11.18,-2.18,12.08,-6.7,12.1,-8.03,13.57,-4.74,12.76,-10.1,10.12,-12.88,6.92,-11.56,4.36,-2.78,3.66,0.2,5],\"curve\":[0,0,1,1],\"duration\":15,\"offset\":0},{\"vertices\":[1.1,-0.21],\"curve\":[0,0,1,1],\"duration\":0,\"offset\":8,\"tweenEasing\":null}],\"scale\":1,\"skin\":\"\",\"name\":\"bozixia\",\"offset\":0},{\"slot\":\"chibangR2\",\"frame\":[{\"vertices\":[],\"curve\":[0,0,1,1],\"duration\":30,\"offset\":0,\"tweenEasing\":null}],\"scale\":1,\"skin\":\"\",\"name\":\"chibangR2\",\"offset\":0},{\"slot\":\"tou\",\"frame\":[{\"vertices\":[],\"duration\":20,\"offset\":0,\"tweenEasing\":null},{\"vertices\":[0.01,-0.2],\"curve\":[0,0,1,1],\"duration\":2,\"offset\":24},{\"vertices\":[0.01,-0.2,0,0,0,0,0,0,-12.79,11.96,-25.18,25.46,-23.15,28.24,-14.57,22.87,-10.99,7.93],\"curve\":[0,0,1,1],\"duration\":2,\"offset\":24},{\"vertices\":[0.01,-0.2],\"curve\":[0,0,1,1],\"duration\":6,\"offset\":24,\"tweenEasing\":null}],\"scale\":1,\"skin\":\"\",\"name\":\"tou\",\"offset\":0}],\"bone\":[{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"y\":-10.67,\"x\":7.11},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{\"y\":-20.01,\"skX\":1.73,\"skY\":1.73},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"y\":-9.33,\"skX\":1.73,\"skY\":1.73,\"x\":-8.54},\"duration\":7},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone\"},{\"frame\":[{\"transform\":{},\"duration\":15,\"tweenEasing\":null},{\"transform\":{},\"duration\":15,\"tweenEasing\":null},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"jiaoL\"},{\"frame\":[{\"transform\":{},\"duration\":15,\"tweenEasing\":null},{\"transform\":{},\"duration\":15,\"tweenEasing\":null},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"jiaoR\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":7.4,\"skY\":7.4},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":0.78,\"skY\":0.78},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-9.84,\"skY\":-9.84},\"duration\":7},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"datuiL\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-1.61,\"skY\":-1.61},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-10.44,\"skY\":-10.44},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-11.68,\"skY\":-11.68},\"duration\":7},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"datuiR\"},{\"frame\":[{\"transform\":{},\"duration\":15,\"tweenEasing\":null},{\"transform\":{},\"duration\":15,\"tweenEasing\":null},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"shenti\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":15},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":1.36,\"skY\":1.36},\"duration\":15},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"weiba1\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":0.58,\"skY\":0.58},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-3.22,\"skY\":-3.22},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-3.12,\"skY\":-3.12},\"duration\":8},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bozixia\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":15},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":8.28,\"skY\":8.28},\"duration\":15},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"chibangR1\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":9.16,\"skY\":9.16},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":0.28,\"skY\":0.28},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-5.24,\"skY\":-5.24},\"duration\":7},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"dabiL\"},{\"frame\":[{\"transform\":{},\"duration\":15,\"tweenEasing\":null},{\"transform\":{},\"duration\":15,\"tweenEasing\":null},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"jianbang\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-0.09,\"skY\":-0.09},\"duration\":2},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-1.97,\"skY\":-1.97},\"duration\":15},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":2.22,\"skY\":2.22},\"duration\":13},{\"transform\":{\"skX\":-0.09,\"skY\":-0.09},\"duration\":0,\"tweenEasing\":null}],\"name\":\"weiba2\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-12.32,\"skY\":-12.32},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-21.51,\"skY\":-21.51},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-9.22,\"skY\":-9.22},\"duration\":7},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"xiaotuiL\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-14.51,\"skY\":-14.51},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-15.92,\"skY\":-15.92},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":0.55,\"skY\":0.55},\"duration\":7},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"xiaotuiR\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":1.16,\"skY\":1.16},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-1.98,\"skY\":-1.98},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-2.46,\"skY\":-2.46},\"duration\":8},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bozishang\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":15},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-13.11,\"skY\":-13.11},\"duration\":15},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"dabiR\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-0.6,\"skY\":-0.6},\"duration\":6},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-3.95,\"skY\":-3.95},\"duration\":15},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-0.03,\"skY\":-0.03},\"duration\":9},{\"transform\":{\"skX\":-0.6,\"skY\":-0.6},\"duration\":0,\"tweenEasing\":null}],\"name\":\"weiba3\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":0.38,\"skY\":0.38},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":6.49,\"skY\":6.49},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":2.52,\"skY\":2.52},\"duration\":7},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"xiaobiL\"},{\"frame\":[{\"transform\":{},\"duration\":15,\"tweenEasing\":null},{\"transform\":{},\"duration\":15,\"tweenEasing\":null},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"chujiao\"},{\"frame\":[{\"transform\":{},\"duration\":15,\"tweenEasing\":null},{\"transform\":{},\"duration\":15,\"tweenEasing\":null},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"er\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-5.73,\"skY\":-5.73},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":4.28,\"skY\":4.28},\"duration\":15},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"shouL\"},{\"frame\":[{\"transform\":{},\"duration\":15,\"tweenEasing\":null},{\"transform\":{},\"duration\":15,\"tweenEasing\":null},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"tou\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{\"skX\":1.6,\"skY\":1.6},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-5.94,\"skY\":-5.94},\"duration\":15},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":8.21,\"skY\":8.21},\"duration\":7},{\"transform\":{\"skX\":1.6,\"skY\":1.6},\"duration\":0,\"tweenEasing\":null}],\"name\":\"weiba4\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":14.43,\"skY\":14.43},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":13.08,\"skY\":13.08},\"duration\":15},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"xiaobiR\"},{\"frame\":[{\"transform\":{},\"duration\":5,\"tweenEasing\":null},{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":5.24,\"skY\":5.24},\"duration\":10},{\"transform\":{},\"duration\":5,\"tweenEasing\":null},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"zui\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-3.32,\"skY\":-3.32},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":3.46,\"skY\":3.46},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-6.13,\"skY\":-6.13},\"duration\":8},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"shouR\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-3.57,\"skY\":-3.57},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":2.7,\"skY\":2.7},\"duration\":7},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"toujiaoL\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-3.48,\"skY\":-3.48},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":0.5,\"skY\":0.5},\"duration\":7},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"toujiaoR\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{\"skX\":1.51,\"skY\":1.51},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-7.93,\"skY\":-7.93},\"duration\":15},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":6.23,\"skY\":6.23},\"duration\":5},{\"transform\":{\"skX\":1.51,\"skY\":1.51},\"duration\":0,\"tweenEasing\":null}],\"name\":\"weiba5\"},{\"frame\":[{\"transform\":{},\"duration\":30,\"tweenEasing\":null},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"chibangL1\"},{\"frame\":[{\"transform\":{},\"duration\":30,\"tweenEasing\":null},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"chibangL3\"},{\"frame\":[{\"transform\":{},\"duration\":15,\"tweenEasing\":null},{\"transform\":{},\"duration\":15,\"tweenEasing\":null},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"tou1\"},{\"frame\":[{\"transform\":{},\"duration\":30,\"tweenEasing\":null},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone2\"},{\"frame\":[{\"transform\":{},\"duration\":30,\"tweenEasing\":null},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone3\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":15},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-20.19,\"skY\":-20.19},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-12.57,\"skY\":-12.57},\"duration\":7},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone4\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":11.08,\"skY\":11.08},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":5.23,\"skY\":5.23},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-6.26,\"skY\":-6.26},\"duration\":7},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone5\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":15},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-18.2,\"skY\":-18.2},\"duration\":15},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone6\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":6.66,\"skY\":6.66},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-6.77,\"skY\":-6.77},\"duration\":7},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone7\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":15},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-9.19,\"skY\":-9.19},\"duration\":15},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone8\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":7.35,\"skY\":7.35},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-3.63,\"skY\":-3.63},\"duration\":7},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone9\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":5},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":2.78,\"skY\":2.78},\"duration\":5},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":7.66,\"skY\":7.66},\"duration\":5},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":6.46,\"skY\":6.46},\"duration\":6},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-1.1,\"skY\":-1.1},\"duration\":4},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-1.23,\"skY\":-1.23},\"duration\":5},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone10\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-7.19,\"skY\":-7.19},\"duration\":12},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-1.21,\"skY\":-1.21},\"duration\":8},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone23\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":6},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-9,\"skY\":-9},\"duration\":8},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-3.11,\"skY\":-3.11},\"duration\":9},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":21.64,\"skY\":21.64},\"duration\":7},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone24\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":7},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-18.5,\"skY\":-18.5},\"duration\":6},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-12.09,\"skY\":-12.09},\"duration\":12},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-0.1,\"skY\":-0.1},\"duration\":5},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone25\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-3.46,\"skY\":-3.46},\"duration\":15},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":12.88,\"skY\":12.88},\"duration\":5},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone22\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":21.8,\"skY\":21.8},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-18.27,\"skY\":-18.27},\"duration\":10},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone21\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":14.4,\"skY\":14.4},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-31.8,\"skY\":-31.8},\"duration\":10},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone20\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-17.43,\"skY\":-17.43},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":38.51,\"skY\":38.51},\"duration\":10},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone19\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-24.63,\"skY\":-24.63},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":19.23,\"skY\":19.23},\"duration\":10},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone18\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-39.99,\"skY\":-39.99},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":16.69,\"skY\":16.69},\"duration\":10},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone17\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-17.8,\"skY\":-17.8},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":32.46,\"skY\":32.46},\"duration\":10},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone16\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-12.56,\"skY\":-12.56},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":22.2,\"skY\":22.2},\"duration\":10},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone15\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":5.93,\"skY\":5.93},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":11.63,\"skY\":11.63},\"duration\":10},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone14\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-5.76,\"skY\":-5.76},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":4.04,\"skY\":4.04},\"duration\":10},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone13\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-9.53,\"skY\":-9.53},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":1.93,\"skY\":1.93},\"duration\":10},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone12\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-3.7,\"skY\":-3.7},\"duration\":10},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":3.62,\"skY\":3.62},\"duration\":10},{\"transform\":{},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone11\"},{\"frame\":[{\"curve\":[0,0,1,1],\"transform\":{\"skX\":-4.79,\"skY\":-4.79},\"duration\":4},{\"curve\":[0,0,1,1],\"transform\":{},\"duration\":15},{\"curve\":[0,0,1,1],\"transform\":{\"skX\":4.37,\"skY\":4.37},\"duration\":11},{\"transform\":{\"skX\":-4.79,\"skY\":-4.79},\"duration\":0,\"tweenEasing\":null}],\"name\":\"bone26\"},{\"frame\":[{\"transform\":{},\"duration\":30,\"tweenEasing\":null}],\"name\":\"root\"},{\"frame\":[{\"transform\":{},\"duration\":30,\"tweenEasing\":null}],\"name\":\"IK_Lhand\"},{\"frame\":[{\"transform\":{},\"duration\":30,\"tweenEasing\":null}],\"name\":\"IK_Rhand\"}],\"duration\":30,\"frame\":[],\"slot\":[],\"name\":\"stand\"}],\"type\":\"Armature\",\"name\":\"armatureName\",\"aabb\":{\"x\":-397.65105952125003,\"y\":-572.0251423769587,\"width\":630.405440372199,\"height\":661.6151423769587}}],\"name\":\"NewDragonTest\",\"isGlobal\":0}"]],0,0,[],[],[]],[[{"name":"atlas","spriteFrames":["sheep_run_0","4d5489af-9d7c-4a29-8b12-56e85145b093@e0c75","sheep_run_1","4d5489af-9d7c-4a29-8b12-56e85145b093@a8883","sheep_run_2","4d5489af-9d7c-4a29-8b12-56e85145b093@6a8f4","sheep_run_3","4d5489af-9d7c-4a29-8b12-56e85145b093@07ea9"]}],[8],0,[],[],[]],[[{"name":"sheep_run_3","rect":{"x":363,"y":1,"width":180,"height":115},"offset":{"x":2,"y":1},"originalSize":{"width":228,"height":159},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[1],[2]],[[{"name":"sheep_run_2","rect":{"x":1,"y":1,"width":180,"height":117},"offset":{"x":1,"y":11},"originalSize":{"width":228,"height":159},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[1],[2]],[[{"name":"sheep_run_1","rect":{"x":183,"y":1,"width":178,"height":117},"offset":{"x":1,"y":2},"originalSize":{"width":228,"height":159},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[1],[2]],[[{"name":"sheep_run_0","rect":{"x":545,"y":1,"width":170,"height":115},"offset":{"x":-4,"y":0},"originalSize":{"width":228,"height":159},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[1],[2]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["5024c915-9acb-4506-8508-d6d55cbe57fb"]}],[2],0,[],[],[]],[[{"name":"sheep_jump_0","rect":{"x":3,"y":3,"width":143,"height":150},"offset":{"x":-9.5,"y":-0.5},"originalSize":{"width":228,"height":159},"rotated":true,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[1],[5]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["544e49d6-3f05-4fa8-9a9e-091f98fc2ce8"]}],[2],0,[],[],[]],[[{"name":"default_btn_pressed","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[3],0,[0],[1],[13]],[[[73,"cocosvideo",".mp4",59.861043],-1],0,0,[],[],[]],[[[49,"builtin-sprite",[{}],[{"hash":67215139,"name":"builtin-sprite|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"varyings":[{"name":"color","type":16,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"uv0","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 2) in vec4 a_color;\nlayout(location = 0) out vec4 color;\nlayout(location = 1) out vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(set = 1, binding = 0) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(location = 0) in vec4 color;\n#if USE_TEXTURE\n  layout(location = 1) in vec2 uv0;\n  layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":1}},"defines":[{"name":"USE_LOCAL","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean","defines":[]},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"IS_GRAY","type":"boolean","defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"builtin-sprite|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[0],0,[],[],[]],[[[45,"effect",".mp3",10.13551],-1],0,0,[],[],[]],[[[8,"scroll-view-template"],[59,"scroll-view-template",33554432,[-4,-5],[[[3,-2,[0,"59+vs1mQFLgoQqxGW0EiGQ"],[5,240,250]],-3],4,1],[1,"d5LgsEBM9LZYuV/MOo51f+",-1,0]],[60,"scrollBar",33554432,1,[-10],[[[7,-6,[0,"f18ohguCpDTqICVG/re0Nd"],[5,12,250],[0,1,0.5]],[66,1,0,-7,[0,"7f6ZfDJ6RL75pG9EVwVrxV"],[4,4282071869],0],[63,37,250,1,-8,[0,"93EoT+XXVHxJZHJoKbQyhB"]],-9],4,4,4,1],[1,"ac4+ExOSREDbE2rYSfK/L8",1,0],[1,120,0,0]],[52,"view",33554432,1,[-14],[[3,-11,[0,"3aayaq7/5HEITD72F6R+38"],[5,240,250]],[74,-12,[0,"0anPQVolRLfqetBXAmT6+2"]],[64,45,240,250,1,-13,[0,"6e/rORGWxOrJNeg5k/2hkv"]]],[1,"09cUXzSPdKOb3Gxw1gs3ul",1,0]],[19,"content",33554432,3,[[7,-15,[0,"26dNgUqKdGHqLAVdcUG4bz"],[5,220,1],[0,0.5,1]],[75,1,2,-16,[0,"705aB/M/xOWJYCJ/nkn4QC"]]],[1,"f8f1Q1+gdLv6q5rsrq3SdH",1,0],[1,0,125,0]],[61,"bar",33554432,2,[[[7,-17,[0,"81coQRfoFO4I1oRi9p46M5"],[5,10,156.25],[0,0,0]],-18],4,1],[1,"0awOrzYxlN4qSn/sGHUcH/",1,0],[1,-11,-125,0]],[67,1,0,5,[0,"06nY7p48lN9L006yVJPsoE"],[4,4284440415]],[76,1,2,[0,"7ccUBcecFNHaAo8R/vmrDk"],6],[77,0.23,1,false,false,1,[0,"72+fRviTxGGpfc0tLq3/1v"],4,7]],0,[0,4,1,0,0,1,0,-2,8,0,-1,3,0,-2,2,0,0,2,0,0,2,0,0,2,0,-4,7,0,-1,5,0,0,3,0,0,3,0,0,3,0,-1,4,0,0,4,0,0,4,0,0,5,0,-2,6,0,5,1,7,17,8,18],[0,6],[3,3],[1,1]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["7158776e-4e45-4395-84db-2f8f401404d6"]}],[2],0,[],[],[]],[[{"name":"tile_iso_offset_with_tsx2","rect":{"x":0,"y":0,"width":101,"height":202},"offset":{"x":0,"y":0},"originalSize":{"width":101,"height":202},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[1],[14]],[[[78,[{}],[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{"USE_TEXTURE":true}]]],0,0,[0],[6],[15]],[[[8,"prefab"],[53,"prefab",1082130432,[[3,-2,[0,"839um3M+pPFrcGtGnUaiiQ"],[5,273.46,40]],[69,"This is a prefab",0,0,40,-3,[0,"f9tHeRKFNLjo8adPbEuJHQ"]]],[1,"e7qRBatO5HC4duy3IQVQyh",-1,0]]],0,[0,4,1,0,0,1,0,0,1,0,5,1,3],[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[0],0,[],[],[]],[[[80,"monster-effect",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0},"emissiveScale",8,[2,0,0,0,1],"mainTexture",6,0]],11]]],0,0,[0,0],[18,6],[16,6]],[[[71],[18,"Monster",[-3],[[81,-2,[0,"d7h8WPtD5Y364Et/t1pX36"],[3],4]],[1,"75+tLWY8JcEoVdIT1rS8Mf",-1,0]],[20,"(__autogen 0)",[-4,-5,-6,-7],[1,"33/LM/YbtdA7nfzgqAC2NU",1,0],[1,0,142.05380249023438,0],[3,0.009599274853641308,-0.0010376531753273602,0.9151230357159384,0.40305906105708283],[1,179.18211782690906,-178.4378535990721,47.53393476924524]],[20,"(__autogen 0)",[-8,-9,-10],[1,"e2+K9ISiVfBKnP8J9G03Ou",1,0],[1,402.5516052246094,-0.10438539832830428,-0.002846478950232268],[3,-0.000004574490022429171,-0.000010040300308832266,0.3529969433322704,-0.9356244748168683],[1,0.001194197701057032,0.001680248695736319,-41.34146300281502]],[54,"Node-0",1,[-11,-12],[1,"35Cd1/HTVWYqUtT4euzeX9",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-89.99999999999999,0,0]],[55,"(__autogen 0)",4,[-13],[1,"c06GhdfcBcCpBmxKZo0OH5",1,0],[1,0,0,11.732219696044922],[1,0.02539999969303608,0.02539999969303608,0.02539999969303608]],[2,"(__autogen 0)",5,[2],[1,"a7pMuOeXZQYa10OXvdhbbK",1,0],[1,-1.1628570556640625,99.4341278076172,-44.13312911987305],[3,0.6116809599381731,0.3547275519999609,0.6117032520744241,0.3547307408483284],[1,-179.9986255819345,-90.00288509767105,60.22013814189341]],[2,"(__autogen 0)",2,[3],[1,"59yDH5wERVyZYzh7y28kx0",1,0],[1,399.1947937011719,-0.3195419013500214,-0.0030490760691463947],[3,-0.004396272842525115,-0.002536573458428956,-0.050761997922709114,-0.9986978813170072],[1,0.4909017152398722,0.26609159667031723,5.820606600181259]],[6,"(__autogen 0)",3,[[5,"(__autogen 0)",-14,[1,"aewspzJ5xa5r0NginmoI2x",1,0],[1,-0.00003051759995287284,345.1398010253906,0],[3,-0.000010299071313027944,-0.000018406669538904085,-0.7070866641743192,-0.7071268973119017],[1,0,-359.99833101153035,90]]],[1,"4e5pXIn/FTa5w/l9iQ7lw4",1,0],[1,181.73240661621097,-0.0008544920128770173,0.002595663070678711],[3,0.009267389813480766,0.0027827741695804144,0.38848117158052226,-0.9214058557342639],[1,-1.578957384089409,-1.0116747631254484,-45.712581014686165]],[2,"(__autogen 1)",3,[-15],[1,"cfUAiv5SdQO4HeLhAFKPd9",1,0],[1,0.0004882809880655259,0.1427001953125,43.16946029663086],[3,-0.6269797476704605,-0.33712278239304205,-0.20376515314921015,-0.6721044472139268],[1,79.49894675735558,15.991902529349314,44.15814795891932]],[2,"(__autogen 0)",9,[-16],[1,"2ctJdov95c76KKNEn94hMU",1,0],[1,0,175.07080078125,-0.00006103519990574569],[3,0.5832023144131522,-0.18192623928659032,-0.209862012993582,-0.7633713640322531],[1,-76.52422340184606,31.710312534725812,6.211892039607076]],[2,"(__autogen 0)",10,[-17],[1,"f9Ohrgml1W24W53NFBw7Xa",1,0],[1,-0.00006103519990574569,370.0173034667969,-0.00006103519990574569],[3,0.2709869023003002,0.08019024513741523,0.2596950710824698,-0.9234143671299251],[1,-37.04458893083677,-18.72248574301374,-25.85857599098187]],[2,"(__autogen 0)",11,[-18],[1,"14BKXgzX5S85C1feqrJGCY",1,0],[1,0.00006103519990574569,370.01708984375,0],[3,-0.3159501047290042,-0.346072922156916,0.36148549164565297,-0.8060628407272011],[1,54.63900967811889,57.59482309315162,-21.35075952919658]],[6,"(__autogen 0)",12,[[5,"(__autogen 0)",-19,[1,"d63fWT0B5bYIWRYM/5nilq",1,0],[1,0,167.76199340820312,-0.00006103519990574569],[3,-0.18710123080333813,-0.1870883860023356,-0.6819261936888587,-0.6818854241116628],[1,0,-329.3126987416781,90]]],[1,"cc/KHQk+RVMrYhmlwuKdF+",1,0],[1,-0.000022888199964654632,186.69400024414065,0.000007629389983776491],[3,0.06191096449642247,0.6184656614814529,0.32203569981143615,-0.7141150230112726],[1,-31.80464359161053,-88.2884084052517,-22.542054751510804]],[2,"(__autogen 2)",3,[-20],[1,"48TGm+9utdd7uw0FytImut",1,0],[1,0.00396728515625,0.14590449631214145,-43.16883850097656],[3,0.6295161705567383,0.3285963191596674,-0.1958153128764438,-0.6763063013793366],[1,-79.7478959169773,-15.632064726817367,42.732439561161584]],[2,"(__autogen 0)",14,[-21],[1,"0c25vlfkdVJqJAnb7FOuYj",1,0],[1,-0.00030517601408064365,175.07150268554688,0.00007629390165675431],[3,-0.5734228278717075,0.18226788665268864,-0.2322668290293649,-0.7642099175641601],[1,76.28954869446837,-33.42576572117763,8.393343412507276]],[2,"(__autogen 0)",15,[-22],[1,"b8/OFqWC9RS6UHzotArYRr",1,0],[1,0,370.0174865722656,0],[3,-0.2709879416888127,-0.0801904601114959,0.25969396485776985,-0.9234143545466567],[1,37.044681932690644,18.722483886595107,-25.85842746259598]],[2,"(__autogen 0)",16,[-23],[1,"3ddAJtZ7tf8onJz6+yG1h9",1,0],[1,0.00006103519990574569,370.0173034667969,0],[3,0.3159535300508992,0.3460785228629328,0.3614823303737972,-0.8060605111831957],[1,-54.639207978463986,-57.59524865492349,-21.34997883997094]],[6,"(__autogen 0)",17,[[5,"(__autogen 0)",-24,[1,"ceSVQYOg9SO72p6xeg7h1p",1,0],[1,0,167.76010131835938,0],[3,-0.1870800022734888,0.18709907576198898,0.6818875254851396,-0.6819269837644744],[1,0,329.31779837158564,-90]]],[1,"c42JKBunhe6pGyvd9MPOeR",1,0],[1,0.00005340580173651688,186.69309997558597,0.00003051759995287284],[3,-0.06190690460921437,-0.618458001656229,0.32203791914001184,-0.7141210079426741],[1,31.804322183255035,88.28739977970193,-22.54286088227009]],[2,"(__autogen 1)",2,[-25],[1,"53Y/bELNFWNL8nO1ihARWr",1,0],[1,-107.67569732666016,94.97682189941406,-155.40679931640625],[3,0.597369193323365,0.3938324649868861,0.3649851311302885,-0.5956776732800647],[1,-88.86062829800781,-64.93578652963728,2.045881247051268]],[56,"(__autogen 0)",19,[-26],[1,"d3EbGDaMxQ6JBMtpY6FKXT",1,0],[1,-0.00001525879997643642,547.819091796875,0.000003814699994109105],[3,0.894762605105627,-0.09883532825415552,-0.36193066889377173,0.2421521201798409],[1,1,0.9999997615814208,0.9999987483024596],[1,157.25962313887766,39.8567413879255,-20.61905087645998]],[2,"(__autogen 0)",20,[-27],[1,"15YD6CGX5X6LWrTvm17/zK",1,0],[1,0,532.7470092773438,0],[3,0.6655598839450192,-0.43436472190079284,-0.2401113031910732,-0.5574081909436065],[1,-90.07515078955845,57.74216396360361,-18.09005574936555]],[6,"(__autogen 0)",21,[[5,"(__autogen 0)",-28,[1,"afjatUxrBTXZI8O++wHqNB",1,0],[1,-0.00006103519990574569,166.968994140625,0.000003814699994109105],[3,0.7009877777486215,0.7009937382132818,-0.0927930204713785,-0.0928082420080048],[1,0,195.08378192690773,90]]],[1,"23k7qwh/Jai6mrCSmuT1Ii",1,0],[1,0.00001525879997643642,286.1807861328125,-0.000022888199964654632],[3,0.2559316759256886,-0.36201483080779057,0.32195320787279547,-0.8365347401474081],[1,-16.427231897542026,39.724385230706744,-46.381753786425435]],[2,"(__autogen 2)",2,[-29],[1,"76M2XLaABUtqjFU+eEn/5G",1,0],[1,-101.904296875,96.81951141357422,158.1428985595703],[3,-0.5870405257564847,-0.40257626658560947,0.37822481703080624,-0.5918291632587528],[1,88.586569858554,67.0530778311708,1.4307218742887127]],[2,"(__autogen 0)",23,[-30],[1,"9eQEGQX7pSgoBF5OEY+E2D",1,0],[1,0.00001525879997643642,547.8187866210938,0.00003051759995287284],[3,0.8947639389640977,-0.09883579614833789,0.3619275119387397,-0.24215171903377103],[1,-157.25961590342183,-39.85634230289106,-20.6190069026854]],[2,"(__autogen 0)",24,[-31],[1,"60x++LPJVYL7fULeFsdjpM",1,0],[1,-0.00006103519990574569,532.7479248046875,0.00003814700176008046],[3,-0.6655604010445741,0.43436091528479076,-0.24011345027936853,-0.5574096149415452],[1,90.07535786563588,-57.74193516654414,-18.089591914349427]],[6,"(__autogen 0)",25,[[5,"(__autogen 0)",-32,[1,"6dQE7p8iRcR4LHDbLrIyMR",1,0],[1,0,166.96800231933597,0.000011444099982327316],[3,0.7009931485605816,-0.7009893338631642,0.09279559176815283,-0.09279837083482606],[1,0,-195.0820818405487,-90]]],[1,"d1ynqWMadVrpvGqZ7j051J",1,0],[1,-0.00001525879997643642,286.1813049316406,-0.00005340580173651688],[3,-0.2559326303493828,0.3620181399255785,0.3219507352227109,-0.8365339677364131],[1,16.427248643918226,-39.724830089746916,-46.381566960390366]],[2,"(__autogen 3)",2,[-33],[1,"acF6uyxcxZep63cXD4fhrk",1,0],[1,-229.2772979736328,51.57170867919922,3.920083999633789],[3,-0.003788019163281142,-0.008884812936174182,-0.6532931497639466,-0.757043440947354],[1,-2.2976000864793598,3.3272553576417057,81.57554817395913]],[2,"(__autogen 0)",27,[-34],[1,"f5UDXoeWlWca5q0qb5lvC4",1,0],[1,-0.000007629389983776491,275.1336059570313,2.38419005427204e-7],[3,-5.957689386719382e-7,-2.2050939226025164e-7,-0.12589137266476597,-0.9920440324341342],[1,0.00006665874956906297,0.00001701210128166529,14.46446866060961]],[6,"(__autogen 0)",28,[[5,"(__autogen 0)",-35,[1,"97fkcGGapfCI+sYNFpe3mj",1,0],[1,0.00001525879997643642,374.1900939941406,0],[3,0.00039858983784868873,0.9999999205575486,3.396345526654993e-7,0.000003304860587833964],[1,-0.00003876831250622641,179.99962130629547,0.045675032268866246]]],[1,"933mvI2EBanbEp34owuGJJ",1,0],[1,-0.000022888199964654632,339.0889892578125,0],[3,8.796734313734493e-7,6.967138536499547e-7,-0.11349057159081799,-0.9935390732924048],[1,-0.00009349963271222309,-0.00006967637386959528,13.033142367926612]],[57,"(__autogen 1)",4,[[82,-36,[0,"84DHxTG9xaAZy5OIyQ11Dc"],[0],[46],1,1,2]],[1,"feBtCQ5jVdDZm7CHaRxszb",1,0]]],0,[0,4,1,0,0,1,0,-1,4,0,-1,7,0,-2,19,0,-3,23,0,-4,27,0,-1,8,0,-2,9,0,-3,14,0,-1,5,0,-2,30,0,-1,6,0,2,8,0,-1,10,0,-1,11,0,-1,12,0,-1,13,0,2,13,0,-1,15,0,-1,16,0,-1,17,0,-1,18,0,2,18,0,-1,20,0,-1,21,0,-1,22,0,2,22,0,-1,24,0,-1,25,0,-1,26,0,2,26,0,-1,28,0,-1,29,0,2,29,0,0,30,0,5,1,2,2,6,3,2,7,36],[0,0,0,0,0],[-1,14,19,-1,20],[17,18,19,7,7]],[[[11,".bin",2309934026,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":56160,"length":5304,"count":2652,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":56160,"count":780,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,6,7,8,9,10,12,13,14,15,16,18,19,20,21,23,24,25,26,28,29,30]]},"minPosition",8,[1,-15.45071029663086,-33.22121047973633,-1.280419945716858],"maxPosition",8,[1,7.313104152679443,25.41493034362793,33.43614959716797]]],-1],0,0,[],[],[]],[[{"base":"1,2,0,0,2,0","mipmaps":["f45b048c-c59c-4446-9b99-bb78e3e13dd9"]}],[2],0,[],[],[]],[[[83,"Armature",565122574,["Node-0/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 1)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 1)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 1)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 1)/(__autogen 0)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 1)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 1)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 2)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 2)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 2)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 2)/(__autogen 0)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 2)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 2)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 2)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 2)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 2)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 2)/(__autogen 0)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 2)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 1)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 1)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 1)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 1)/(__autogen 0)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 1)/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 3)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 3)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 3)/(__autogen 0)/(__autogen 0)","Node-0/(__autogen 0)/(__autogen 0)/(__autogen 0)/(__autogen 3)/(__autogen 0)/(__autogen 0)/(__autogen 0)"],[[[7,-0.0000037845886708964827,0.000001066909931068949,39.37007141113281,0,34.17087173461914,-19.553890228271484,0.0004678663390222937,0,19.55389976501465,34.170860290527344,0.0011702172923833132,0,-189.962646484375,-372.6257629394531,164.80160522460938,1],[7,0.7246422171592712,0.23118777573108673,39.362728118896484,0,-37.4864616394043,-12.007909774780273,0.760614812374115,0,12.010120391845703,-37.49348068237305,-0.0007885770173743367,0,-248.42788696289062,488.5586242675781,166.54995727539062,1],[7,0.5625198483467102,0.5126296281814575,39.36272048950195,0,-38.51408004760742,-8.138677597045898,0.6562485098838806,0,8.145709037780762,-38.51625061035156,0.3850197196006775,0,-595.4669799804688,553.4956665039062,158.8065948486328,1],[7,0.08274169266223907,0.7563745379447937,39.36272048950195,0,-23.539899826049805,-31.55069923400879,0.6558281779289246,0,31.55739974975586,-23.536869049072266,0.3857434093952179,0,-1114.9803466796875,-243.6012725830078,158.78648376464844,1],[7,0.0016002163756638765,0.000051287330279592425,39.37007141113281,0,6.159170150756836,-38.885318756103516,-0.00013101064541842788,0,38.885311126708984,6.159173965454102,-0.0017385476967319846,0,-728.9612426757812,-1100.780517578125,151.37864685058594,1],[7,0.00032019245554693043,-0.00017670409579295665,39.37007141113281,0,-38.884971618652344,-6.161375045776367,-0.000045746550313197076,0,6.161377906799316,-38.88496017456055,0.000009458510248805396,0,-1445.9603271484375,728.8848266601562,151.3394775390625,1],[7,-7.196049213409424,38.693748474121094,-1.0065795183181763,0,-38.343528747558594,-6.986098289489746,5.565013885498047,0,5.290790557861328,1.9974838495254517,38.961769104003906,0,-961.60693359375,-84.4945068359375,-619.783203125,1],[7,-1.3729572296142578,13.616029739379883,36.9150505065918,0,-36.09183120727539,14.273381233215332,-6.607046127319336,0,-15.668350219726562,-34.07162857055664,11.984521865844727,0,-517.477783203125,956.5531616210938,-439.7917175292969,1],[7,3.5539886951446533,-7.87567663192749,38.41022872924805,0,-38.89324188232422,-5.59541130065918,2.451385021209717,0,4.968608856201172,-38.16630935668945,-8.285377502441406,0,-823.8735961914062,352.3837585449219,-47.77032470703125,1],[7,-25.562118530273438,8.5573091506958,28.69413948059082,0,-19.30299186706543,-33.55144119262695,-7.190162658691406,0,22.8904972076416,-18.737030029296875,25.979822158813477,0,-367.2312927246094,-682.1725463867188,-284.85540771484375,1],[7,22.504329681396484,1.8948806524276733,32.248531341552734,0,5.691967010498047,-38.91997146606445,-1.6852034330368042,0,31.79873275756836,5.625637054443359,-22.52098846435547,0,59.98469924926758,-967.2982177734375,-177.95005798339844,1],[7,1.8947956562042236,-2.8962244987487793,39.2176513671875,0,-38.920318603515625,-5.752632141113281,1.4555919170379639,0,5.623280048370361,-38.83967971801758,-3.1399950981140137,0,-1135.06884765625,-142.32920837402344,-122.41960144042969,1],[7,8.362737655639648,-38.47134017944336,0.1535530835390091,0,-37.93096923828125,-8.271406173706055,-6.544384002685547,0,6.427262306213379,1.2422161102294922,-38.82202911376953,0,-914.1256103515625,-395.78338623046875,592.552490234375,1],[7,1.3728978633880615,-13.61598014831543,36.91508102416992,0,-36.091880798339844,14.273308753967285,6.606933116912842,0,-15.66825008392334,-34.07170104980469,-11.984488487243652,0,-515.1690673828125,850.9053344726562,723.311279296875,1],[7,-3.5541064739227295,7.875777244567871,38.41019058227539,0,-38.89324188232422,-5.595467567443848,-2.4514989852905273,0,4.968634128570557,-38.16627883911133,8.285514831542969,0,-857.7206420898438,407.7952880859375,343.2920227050781,1],[7,25.562402725219727,-8.557424545288086,28.693849563598633,0,-19.303028106689453,-33.5513916015625,7.190315246582031,0,22.89017105102539,-18.737070083618164,-25.980077743530273,0,-171.9140625,-756.0164794921875,503.83135986328125,1],[7,-22.50330924987793,-1.894769310951233,32.249229431152344,0,5.691967964172363,-38.919979095458984,1.6851085424423218,0,31.7994384765625,5.625638008117676,22.519981384277344,0,-108.46186065673828,-988.3306884765625,428.4156188964844,1],[7,1.8950382471084595,-2.8956034183502197,39.217681884765625,0,38.920310974121094,5.75260591506958,-1.4559330940246582,0,-5.623254776000977,38.83974075317383,3.1394128799438477,0,1156.1031494140625,125.27894592285156,423.76947021484375,1],[7,-35.94831848144531,16.03691291809082,-0.7338514924049377,0,-15.610621452331543,-34.49972915649414,10.774060249328613,0,3.74558424949646,10.128641128540039,37.86006164550781,0,-55.066802978515625,-121.91159057617188,-396.3647766113281,1],[7,-31.915760040283203,-13.415301322937012,-18.74608612060547,0,7.395655632019043,24.36492919921875,-30.027599334716797,0,21.833248138427734,-27.863649368286133,-17.231609344482422,0,-41.462005615234375,778.307373046875,-34.56593322753906,1],[7,-27.096147537231445,17.01443099975586,22.941452026367188,0,-27.951011657714844,-22.302579879760742,-16.472347259521484,0,5.8772196769714355,-27.624380111694336,27.4290714263916,0,-125.06892395019531,16.327390670776367,-217.49588012695312,1],[7,-16.579750061035156,16.855243682861328,31.480388641357422,0,-5.94674015045166,-35.526798248291016,15.889791488647461,0,35.21009826660156,1.9365758895874023,17.507171630859375,0,33.11083221435547,-366.5816345214844,17.013702392578125,1],[7,-16.855443954467773,7.817393779754639,-34.71001052856445,0,35.52671813964844,1.6075643301010132,-16.88996124267578,0,-1.936425805091858,-38.552650451660156,-7.742480754852295,0,533.5498657226562,-36.394630432128906,-7.8145904541015625,1],[7,35.94837188720703,-16.036787033081055,-0.7339943051338196,0,-15.610538482666016,-34.49977111816406,-10.77400016784668,0,3.7454426288604736,10.12864875793457,-37.86006164550781,0,245.91444396972656,-256.180908203125,390.2197265625,1],[7,31.915679931640625,13.415268898010254,-18.746313095092773,0,7.395844459533691,24.364910125732422,30.027599334716797,0,21.833322525024414,-27.863679885864258,17.23154067993164,0,225.75357055664062,890.628173828125,-122.38768768310547,1],[7,27.09604263305664,-17.014297485351562,22.941728591918945,0,-27.951128005981445,-22.302600860595703,16.472192764282227,0,5.877434253692627,-27.62449073791504,-27.428958892822266,0,101.79106140136719,-126.12516784667969,409.57708740234375,1],[7,16.579679489135742,-16.855106353759766,31.480531692504883,0,-5.946636199951172,-35.52687072753906,-15.889738082885742,0,35.21015167236328,1.936562180519104,-17.507118225097656,0,171.92398071289062,-507.7025146484375,246.55894470214844,1],[7,-16.8544864654541,7.816822052001953,-34.710628509521484,0,-35.527191162109375,-1.6075226068496704,16.889028549194336,0,1.9359772205352783,38.55278015136719,7.742061138153076,0,-674.6668701171875,101.83708190917969,-282.8154602050781,1],[7,-0.0010757093550637364,-0.0005330167477950454,39.37007141113281,0,-17.36750030517578,35.33232116699219,0.00009345635044155642,0,-35.33232116699219,-17.36750030517578,0.000010110439689015038,0,428.08367919921875,85.72987365722656,164.81373596191406,1],[7,0.0000017081608802982373,-0.000003541692194630741,39.37007141113281,0,-7.991696834564209,38.550418853759766,-0.000013343949831323698,0,-38.55044174194336,-7.991695880889893,0.00007668324542464688,0,367.2102355957031,-290.3256530761719,164.814208984375,1],[7,-0.0008118554833345115,0.0031074662692844868,39.37007141113281,0,0.9078503251075745,39.35960006713867,0.00007050114800222218,0,-39.35961151123047,0.9078567028045654,0.00009114205022342503,0,215.8052520751953,-695.9992065429688,164.81265258789062,1],[7,-0.0006014595273882151,-0.00001720898217172362,-39.37007141113281,0,-0.8764730095863342,39.360321044921875,-0.000001758338044055563,0,39.360321044921875,0.8764805793762207,-0.000008525739758624695,0,-216.66427612304688,-1070.030029296875,-164.8150177001953,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[0],0,[],[],[]],[[[79,"1",[{}],[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{"USE_ALBEDO_MAP":true,"OCCLUSION_CHANNEL":"b","ROUGHNESS_CHANNEL":"r","METALLIC_CHANNEL":"g"}]]],0,0,[0],[6],[6]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["951249e0-9f16-456d-8b85-a6ca954da16b"]}],[2],0,[],[],[]],[[{"name":"default_btn_disabled","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[3],0,[0],[1],[20]],[[{"name":"auto-atlas","spriteFrames":["sheep_jump_0","5024c915-9acb-4506-8508-d6d55cbe57fb@f9941","sheep_down_2","c32b5341-90fa-4e43-a906-b7eabefaafbd@f9941"]}],[8],0,[],[],[]],[[{"name":"auto-atlas","spriteFrames":["sheep_jump_0","5024c915-9acb-4506-8508-d6d55cbe57fb@f9941","sheep_down_2","c32b5341-90fa-4e43-a906-b7eabefaafbd@f9941"]}],[8],0,[],[],[]],[[[84,"alien-pro","\r\nalien-pro.png\r\nsize: 1853,1159\r\nformat: RGBA8888\r\nfilter: Linear,Linear\r\nrepeat: none\r\nback-foot\r\n  rotate: false\r\n  xy: 2, 2\r\n  size: 16, 11\r\n  orig: 16, 11\r\n  offset: 0, 0\r\n  index: -1\r\nback-shin\r\n  rotate: false\r\n  xy: 487, 10\r\n  size: 42, 48\r\n  orig: 42, 48\r\n  offset: 0, 0\r\n  index: -1\r\nback-thigh\r\n  rotate: false\r\n  xy: 531, 11\r\n  size: 45, 47\r\n  orig: 47, 47\r\n  offset: 2, 0\r\n  index: -1\r\nbackarmor\r\n  rotate: true\r\n  xy: 1103, 49\r\n  size: 162, 181\r\n  orig: 162, 182\r\n  offset: 0, 1\r\n  index: -1\r\nbody\r\n  rotate: true\r\n  xy: 866, 5\r\n  size: 196, 235\r\n  orig: 196, 235\r\n  offset: 0, 0\r\n  index: -1\r\nburst01\r\n  rotate: false\r\n  xy: 578, 123\r\n  size: 286, 309\r\n  orig: 286, 309\r\n  offset: 0, 0\r\n  index: -1\r\nburst02\r\n  rotate: false\r\n  xy: 267, 60\r\n  size: 309, 361\r\n  orig: 311, 361\r\n  offset: 2, 0\r\n  index: -1\r\nburst03-bg\r\n  rotate: false\r\n  xy: 1300, 708\r\n  size: 551, 449\r\n  orig: 551, 453\r\n  offset: 0, 0\r\n  index: -1\r\nburst03-fg\r\n  rotate: true\r\n  xy: 856, 487\r\n  size: 670, 442\r\n  orig: 678, 442\r\n  offset: 0, 0\r\n  index: -1\r\neye\r\n  rotate: false\r\n  xy: 1663, 55\r\n  size: 146, 146\r\n  orig: 150, 150\r\n  offset: 2, 2\r\n  index: -1\r\neye-highlight\r\n  rotate: false\r\n  xy: 856, 444\r\n  size: 41, 41\r\n  orig: 43, 43\r\n  offset: 1, 1\r\n  index: -1\r\neye-pupil\r\n  rotate: false\r\n  xy: 1816, 671\r\n  size: 35, 35\r\n  orig: 35, 35\r\n  offset: 0, 0\r\n  index: -1\r\neye-stalk\r\n  rotate: true\r\n  xy: 1530, 54\r\n  size: 147, 131\r\n  orig: 147, 131\r\n  offset: 0, 0\r\n  index: -1\r\nfront-foot\r\n  rotate: false\r\n  xy: 705, 6\r\n  size: 19, 12\r\n  orig: 19, 12\r\n  offset: 0, 0\r\n  index: -1\r\nfront-lower-arm\r\n  rotate: true\r\n  xy: 578, 11\r\n  size: 110, 125\r\n  orig: 110, 125\r\n  offset: 0, 0\r\n  index: -1\r\nfront-shin\r\n  rotate: false\r\n  xy: 267, 2\r\n  size: 49, 56\r\n  orig: 49, 56\r\n  offset: 0, 0\r\n  index: -1\r\nfront-thigh\r\n  rotate: false\r\n  xy: 433, 4\r\n  size: 52, 54\r\n  orig: 54, 54\r\n  offset: 2, 0\r\n  index: -1\r\nfront-upper-arm\r\n  rotate: false\r\n  xy: 318, 3\r\n  size: 113, 55\r\n  orig: 113, 55\r\n  offset: 0, 0\r\n  index: -1\r\nhead\r\n  rotate: false\r\n  xy: 899, 213\r\n  size: 297, 272\r\n  orig: 297, 272\r\n  offset: 0, 0\r\n  index: -1\r\nlower-back-arm\r\n  rotate: true\r\n  xy: 705, 20\r\n  size: 101, 91\r\n  orig: 101, 91\r\n  offset: 0, 0\r\n  index: -1\r\nmetaljaw\r\n  rotate: false\r\n  xy: 1286, 31\r\n  size: 242, 170\r\n  orig: 243, 172\r\n  offset: 1, 2\r\n  index: -1\r\nsplat01\r\n  rotate: false\r\n  xy: 1300, 203\r\n  size: 514, 503\r\n  orig: 514, 503\r\n  offset: 0, 0\r\n  index: -1\r\nsplat01-fg\r\n  rotate: true\r\n  xy: 2, 15\r\n  size: 406, 263\r\n  orig: 406, 264\r\n  offset: 0, 0\r\n  index: -1\r\nsplat02\r\n  rotate: true\r\n  xy: 2, 423\r\n  size: 734, 511\r\n  orig: 734, 511\r\n  offset: 0, 0\r\n  index: -1\r\nsplat03\r\n  rotate: true\r\n  xy: 515, 434\r\n  size: 723, 339\r\n  orig: 723, 339\r\n  offset: 0, 0\r\n  index: -1\r\nupper-back-arm\r\n  rotate: false\r\n  xy: 798, 35\r\n  size: 60, 86\r\n  orig: 60, 86\r\n  offset: 0, 0\r\n  index: -1\r\n",["alien-pro.png"],{"skeleton":{"hash":"flzfoa/SvZpMMIUhTlCBLj/TYTU","spine":"3.8.99","x":-191.3,"y":-4.51,"width":368.26,"height":384.69,"images":"./images/","audio":""},"bones":[{"name":"root"},{"name":"hip","parent":"root","x":-8.17,"y":73.5,"color":"fff200ff"},{"name":"back-thigh","parent":"hip","length":44.3,"rotation":-54.08,"x":-2.82,"y":-2.64,"color":"ff0008ff"},{"name":"back-shin","parent":"back-thigh","length":31.17,"rotation":-50.15,"x":44.3,"y":0.06,"color":"ff0008ff"},{"name":"back-foot","parent":"back-shin","length":11.75,"rotation":91.8,"x":31.17,"y":0.09,"color":"ff0008ff"},{"name":"body","parent":"root","length":116.25,"rotation":99.84,"x":-42.45,"y":77.7,"color":"fff200ff"},{"name":"eye-root","parent":"root","color":"fff200ff"},{"name":"eye","parent":"eye-root","rotation":63.5,"x":51.29,"y":236.96,"color":"fff200ff"},{"name":"eye-highlight","parent":"eye","x":16.4,"y":-5.7,"color":"fff200ff"},{"name":"eyeball","parent":"eye","scaleX":0.6231,"scaleY":0.6231,"color":"fff200ff"},{"name":"eye-pupil","parent":"eyeball","x":18.46,"y":-41.33,"scaleX":1.3321,"scaleY":1.3321,"color":"fff200ff"},{"name":"eye-splat","parent":"root","x":256.36,"y":-17.76,"scaleX":-2.33,"scaleY":1.99,"color":"fff200ff"},{"name":"eye-stalk-root","parent":"eyeball","rotation":-10.63,"x":-75.66,"y":16.9,"color":"fff200ff"},{"name":"eye-stalk","parent":"eye-stalk-root","length":16.14,"rotation":179.1,"x":-9.1,"y":-2.42,"color":"fff200ff"},{"name":"eye-stalk2","parent":"eye-stalk","length":16.14,"x":16.14,"color":"fff200ff"},{"name":"eye-stalk3","parent":"eye-stalk2","length":16.14,"x":16.14,"color":"fff200ff"},{"name":"eye-stalk4","parent":"eye-stalk3","length":16.14,"x":16.14,"color":"fff200ff"},{"name":"eye-veins-controller","parent":"eyeball","color":"fff200ff"},{"name":"front-thigh","parent":"hip","length":52.72,"rotation":-55.89,"x":-42.79,"y":4.11,"color":"04ff00ff"},{"name":"front-shin","parent":"front-thigh","length":34.38,"rotation":-45.22,"x":52.73,"y":0.06,"color":"04ff00ff"},{"name":"front-foot","parent":"front-shin","length":13.58,"rotation":86.84,"x":34.36,"y":-0.12,"color":"04ff00ff"},{"name":"front-upper-arm","parent":"body","length":47.09,"rotation":121.33,"x":90.9,"y":42.96,"color":"04ff00ff"},{"name":"front-lower-arm","parent":"front-upper-arm","length":75.87,"rotation":71.97,"x":47.09,"y":-0.29,"color":"04ff00ff"},{"name":"head","parent":"body","length":213.84,"rotation":-36.34,"x":116.68,"y":2.67,"color":"fff200ff"},{"name":"upper-back-arm","parent":"body","length":50.28,"rotation":172.11,"x":50.4,"y":-84.36,"color":"ff0008ff"},{"name":"lower-back-arm","parent":"upper-back-arm","length":65.27,"rotation":74.17,"x":50.28,"y":-0.11,"color":"ff0008ff"},{"name":"metaljaw","parent":"root","length":75.82,"rotation":-74.86,"x":-37.1,"y":230.8,"color":"fff200ff"},{"name":"splat","parent":"root","x":-11.45,"y":318.24,"scaleX":0.6213,"scaleY":0.6213,"color":"fff200ff"}],"slots":[{"name":"metaljaw-bg","bone":"metaljaw","attachment":"metaljaw"},{"name":"eye-splat","bone":"eye-splat"},{"name":"burst-bg","bone":"head","color":"aaff80ff","dark":"000000"},{"name":"splat-bg","bone":"splat"},{"name":"upper-back-arm","bone":"upper-back-arm","attachment":"upper-back-arm"},{"name":"lower-back-arm","bone":"lower-back-arm","attachment":"lower-back-arm"},{"name":"back-thigh","bone":"back-thigh","attachment":"back-thigh"},{"name":"back-foot","bone":"back-foot","attachment":"back-foot"},{"name":"back-shin","bone":"back-shin","attachment":"back-shin"},{"name":"backarmor","bone":"body","attachment":"backarmor"},{"name":"eyeball","bone":"eyeball","color":"dfa921ff","dark":"c57c1e","attachment":"eye"},{"name":"eye-pupil","bone":"eye-pupil","color":"000000ff","attachment":"eye-pupil"},{"name":"eye-highlight","bone":"eye-highlight","color":"ffffffc8","attachment":"eye-highlight","blend":"additive"},{"name":"eye-stalk","bone":"eye-stalk-root","dark":"000000"},{"name":"splat-fg","bone":"splat"},{"name":"head","bone":"head","attachment":"head"},{"name":"body","bone":"body","attachment":"body"},{"name":"metaljaw","bone":"metaljaw","attachment":"metaljaw"},{"name":"front-thigh","bone":"front-thigh","attachment":"front-thigh"},{"name":"front-foot","bone":"front-foot","attachment":"front-foot"},{"name":"front-shin","bone":"front-shin","attachment":"front-shin"},{"name":"front-upper-arm","bone":"front-upper-arm","attachment":"front-upper-arm"},{"name":"front-lower-arm","bone":"front-lower-arm","attachment":"front-lower-arm"}],"transform":[{"name":"eye","order":2,"target":"head","x":91.94,"y":-84.12,"bones":["eye"]},{"name":"eye-root","target":"head","rotation":-63.5,"x":-143,"y":-143.95,"rotateMix":0,"scaleMix":0,"bones":["eye-root"]},{"name":"jaw","order":1,"target":"head","rotation":-138.36,"x":47,"y":-7.76,"rotateMix":0,"scaleMix":0,"bones":["metaljaw"]}],"skins":[{"name":"default","attachments":{"back-foot":{"back-foot":{"x":4.53,"y":2.76,"rotation":12.42,"width":16,"height":11}},"back-shin":{"back-shin":{"x":9.6,"y":0.84,"rotation":104.23,"width":42,"height":48}},"back-thigh":{"back-thigh":{"x":21.8,"y":-0.35,"rotation":54.08,"width":47,"height":47}},"backarmor":{"backarmor":{"x":121.41,"y":-18.48,"rotation":-99.84,"width":162,"height":182}},"body":{"body":{"x":96.07,"y":-9.51,"rotation":-99.84,"width":196,"height":235}},"burst-bg":{"burst03-bg":{"type":"mesh","hull":31,"width":551,"height":453,"uvs":[0.10357,0.21935,0.18465,0.07668,0.27288,0.01093,0.35907,0.03574,0.42894,0.13623,0.51308,0.0438,0.64058,0.01155,0.75065,0.03004,0.76009,0.09807,0.76726,0.14971,0.79281,0.16059,0.84556,0.20354,0.80039,0.21646,0.77961,0.32105,0.79923,0.43056,0.82924,0.40178,0.79577,0.30912,0.80399,0.2203,0.85017,0.2073,0.94358,0.28336,0.9308,0.33775,1,0.50248,1,0.58796,0.93591,0.63613,0.85286,0.83817,0.6791,1,0.42356,1,0.1642,0.776,0.09312,0.68855,0,0.57397,0,0.46449,0.15811,0.25358,0.05714,0.33546,0.21907,0.41635,0.4003,0.21573,0.70676,0.18972,0.7821,0.45969,0.86576,0.32396,0.91039,0.44964,0.89678,0.50703,0.85623,0.54472,0.56516,0.20173,0.60087,0.11642,0.27445,0.05938,0.27264,0.17616,0.28517,0.2429,0.13458,0.37415,0.11928,0.49774,0.14964,0.5664],"triangles":[43,2,3,1,2,43,42,5,6,8,42,6,8,6,7,4,5,42,44,1,43,44,43,3,44,3,4,35,42,8,35,8,9,41,4,42,41,42,35,34,44,4,34,4,41,12,10,11,0,1,44,45,44,34,31,0,44,45,31,44,10,12,9,9,12,35,13,35,12,37,18,19,17,18,37,16,17,37,32,0,31,20,37,19,46,32,31,15,16,37,33,31,45,46,31,33,33,45,34,37,38,15,20,38,37,36,13,14,35,13,36,32,30,0,30,32,46,47,30,46,47,46,33,38,20,21,38,14,15,39,38,21,39,14,38,36,14,39,40,36,39,48,47,33,29,30,47,29,47,48,39,21,22,23,39,22,40,39,23,28,29,48,36,26,27,28,48,27,24,36,40,24,40,23,34,36,33,33,36,48,48,36,27,41,35,36,41,36,34,25,26,36,24,25,36],"vertices":[243.87,224.76,312.76,212.12,354.77,183.53,363.03,140.82,340.13,92.86,391.14,70.52,428.74,18.79,444.15,-33.56,421.01,-49.08,403.45,-60.86,404.6,-74.1,399.44,-104.85,385.57,-86.77,342.87,-94.82,306.52,-121.77,323.17,-130.43,350.52,-100.07,384.88,-89.02,398.99,-107.54,389.84,-161.98,367.24,-165.28,320.56,-223.6,289.1,-237.78,258.43,-217.08,167.3,-213.42,72.66,-162.46,21.08,-48.05,51.2,105.25,69.05,151.58,92.43,212.29,132.73,230.45,242.28,194.65,191.76,226.28,194.66,140.35,305.09,92.5,376.51,-40.41,292.34,-118.94,359.19,-133.87,321.93,-174.71,298.05,-178.14,276,-166.23,343.51,21,382.13,19.17,337.24,174.79,293.89,156.22,271.85,139.53,193.15,185.19,144.56,171.53,125.42,146.55],"edges":[54,52,50,52,50,48,48,46,46,44,44,42,42,40,40,38,20,18,14,12,12,10,10,8,8,6,6,4,4,2,2,0,0,62,62,64,58,60,64,60,60,0,54,56,56,58,66,68,70,72,20,22,22,24,24,26,26,28,28,30,30,32,32,34,36,38,34,36,28,72,32,74,74,40,36,74,30,76,76,42,74,76,28,78,78,44,76,78,46,80,80,72,78,80,14,16,16,18,68,82,82,70,8,84,84,16,82,84,84,12,4,86,2,86,86,6,0,88,88,8,86,88,88,90,68,90,90,62,64,92,92,66,62,92,92,94,56,96,96,66,94,96,94,58,60,92]}},"eye-highlight":{"eye-highlight":{"width":43,"height":43}},"eye-pupil":{"eye-pupil":{"type":"mesh","hull":8,"width":35,"height":35,"uvs":[0.33333,0,0.66667,0,1,0.33333,1,0.66667,0.66667,1,0.33333,1,0,0.66667,0,0.33333,0.33333,0.33333,0.66667,0.33333,0.33333,0.66667,0.66667,0.66667],"triangles":[8,0,1,7,0,8,2,9,1,8,1,9,6,7,8,10,8,9,6,8,10,11,9,2,10,9,11,11,2,3,5,6,10,4,10,11,5,10,4,4,11,3],"vertices":[-5.83,17.5,5.83,17.5,17.5,5.83,17.5,-5.83,5.83,-17.5,-5.83,-17.5,-17.5,-5.83,-17.5,5.83,-5.83,5.83,5.83,5.83,-5.83,-5.83,5.83,-5.83],"edges":[0,2,4,6,8,10,12,14,2,4,0,14,12,10,8,6]}},"eye-splat":{"splat03":{"type":"mesh","hull":8,"width":723,"height":339,"uvs":[0,0,0.33333,0,0.66667,0,1,0,1,1,0.66667,1,0.33333,1,0,1],"triangles":[0,7,1,1,7,6,1,6,2,2,6,5,2,5,3,3,5,4],"vertices":[-112.07,10.93,-38.11,17.26,38.11,16.81,108,10.03,114.33,-17.26,33.14,-26.75,-39.01,-31.27,-114.33,-17.26],"edges":[0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,0]}},"eye-stalk":{"eye-stalk":{"type":"mesh","hull":23,"width":147,"height":131,"uvs":[1,0.17186,0.87544,0.29277,0.89315,0.69314,1,0.90273,1,1,0.7891,1,0.5655,0.70926,0.44374,0.59641,0.34633,0.55745,0.27217,0.58566,0.2124,0.55341,0.13048,0.57894,0,0.57625,0,0.46609,0.1327,0.46206,0.23011,0.43922,0.26995,0.46877,0.3574,0.45265,0.43489,0.46743,0.49134,0.42712,0.58764,0.22829,0.83891,0,1,0],"triangles":[14,11,13,11,12,13,11,14,10,10,14,15,10,15,16,8,9,16,9,10,16,8,16,17,8,18,7,8,17,18,7,18,19,5,3,4,5,2,3,5,6,2,7,19,6,2,19,1,1,19,20,19,2,6,20,21,1,1,21,0,21,22,0],"vertices":[1,12,79.5,42.99,1,1,12,59.69,27.15,1,1,12,62.51,-25.3,1,1,12,79.5,-52.76,1,1,12,79.5,-65.5,1,1,12,45.97,-65.5,1,3,12,10.41,-27.41,0.70014,13,-19.9,24.68,0.25564,14,-36.04,24.68,0.04422,4,12,-8.95,-12.63,0.39574,13,-0.31,10.2,0.4047,14,-16.45,10.2,0.19226,15,-32.6,10.2,0.0073,4,12,-24.43,-7.53,0.15434,13,15.26,5.34,0.37965,14,-0.89,5.34,0.35628,15,-17.03,5.34,0.10973,5,12,-36.23,-11.22,0.02406,13,26.99,9.22,0.22083,14,10.84,9.22,0.43184,15,-5.3,9.22,0.25041,16,-21.44,9.22,0.07286,4,13,36.56,5.15,0.06689,14,20.41,5.15,0.29978,15,4.27,5.15,0.3765,16,-11.88,5.15,0.25684,3,14,33.38,8.7,0.13576,15,17.24,8.7,0.31231,16,1.09,8.7,0.55192,3,14,54.13,8.67,0.01597,15,37.99,8.67,0.22361,16,21.84,8.67,0.76041,3,14,54.36,-5.76,0.0282,15,38.22,-5.76,0.22512,16,22.07,-5.76,0.74668,3,14,33.27,-6.62,0.15732,15,17.13,-6.62,0.33196,16,0.98,-6.62,0.51072,4,13,33.98,-9.85,0.07948,14,17.83,-9.85,0.31806,15,1.69,-9.85,0.37309,16,-14.46,-9.85,0.22937,5,12,-36.58,4.09,0.01783,13,27.58,-6.08,0.25225,14,11.44,-6.08,0.42239,15,-4.71,-6.08,0.2484,16,-20.85,-6.08,0.05913,4,12,-22.67,6.2,0.13761,13,13.71,-8.41,0.43417,14,-2.43,-8.41,0.32491,15,-18.58,-8.41,0.10331,4,12,-10.35,4.27,0.36851,13,1.36,-6.67,0.45713,14,-14.78,-6.67,0.16417,15,-30.93,-6.67,0.0102,3,12,-1.38,9.55,0.67485,13,-7.53,-12.09,0.29353,14,-23.67,-12.09,0.03163,2,12,13.93,35.59,0.8884,13,-22.43,-38.37,0.1116,1,12,53.89,65.5,1,1,12,79.5,65.5,1],"edges":[26,28,28,30,30,32,32,34,34,36,36,38,38,40,42,44,40,42,24,26,24,22,22,20,20,18,18,16,16,14,14,12,8,10,12,10,8,6,6,4,4,2,0,44,2,0]}},"eyeball":{"eye":{"type":"mesh","hull":22,"width":150,"height":150,"uvs":[0.85047,0.13875,0.98667,0.3431,0.98667,0.47303,0.98667,0.61454,0.94572,0.71073,0.87413,0.83398,0.77706,0.9087,0.64923,0.98667,0.4973,0.98667,0.35595,0.98667,0.23924,0.92448,0.14613,0.8644,0.07706,0.75411,0.01333,0.63014,0.01333,0.50033,0.01333,0.37742,0.07112,0.26126,0.12819,0.14655,0.24031,0.08097,0.35595,0.01333,0.5103,0.01333,0.65547,0.01333,0.366,0.90333,0.6247,0.89943,0.8132,0.79283,0.9159,0.61083,0.9159,0.36513,0.808,0.19483,0.6325,0.09083,0.379,0.08433,0.1905,0.20133,0.0826,0.38333,0.0865,0.61473,0.2022,0.80973,0.50622,0.08759,0.29444,0.13681,0.13626,0.29283,0.08455,0.49897,0.13693,0.69972,0.27542,0.85157,0.49981,0.90131,0.72342,0.8436,0.87136,0.68977,0.9159,0.47303,0.91047,0.22878,0.85853,0.27458,0.76322,0.08263,0.72248,0.14415,0.50307,0.48708,0.33447,0.33295,0.28782,0.37309,0.26812,0.4291,0.2617,0.49394,0.27452,0.55711,0.29889,0.60566,0.34608,0.65543,0.38241,0.68026,0.43365,0.69791,0.50138,0.70162,0.56522,0.69777,0.62072,0.67742,0.66618,0.64788,0.69809,0.59441,0.71324,0.55008,0.72398,0.47956,0.71325,0.42499,0.68781,0.37664,0.65111,0.3452,0.60899,0.32153,0.56154,0.30809,0.50458,0.29603,0.44539,0.29983,0.39825,0.31109],"triangles":[59,58,48,48,58,57,60,59,48,56,48,57,61,60,48,48,56,55,55,54,48,61,48,62,54,53,48,62,48,63,53,52,48,63,48,64,52,51,48,48,65,64,48,66,65,48,67,66,48,68,67,48,69,68,51,50,48,50,49,48,49,72,48,72,71,48,48,70,69,48,71,70,7,8,23,8,40,23,6,23,41,6,7,23,9,22,8,8,22,40,9,10,22,11,33,10,10,39,22,10,33,39,6,24,5,6,41,24,22,57,40,22,56,57,22,39,56,23,40,59,40,58,59,40,57,58,23,59,41,41,59,60,11,12,33,39,55,56,39,33,55,60,61,41,41,61,24,24,42,5,5,42,4,12,38,33,55,38,54,55,33,38,24,61,42,42,61,62,12,32,38,12,13,32,42,25,4,4,25,3,38,53,54,38,32,53,62,63,42,42,63,25,13,14,32,14,37,32,53,37,52,53,32,37,25,2,3,25,63,43,63,64,43,25,43,2,14,31,37,14,15,31,52,37,51,51,37,31,64,65,43,2,26,1,65,26,43,2,43,26,31,36,51,51,36,50,65,45,26,65,66,45,15,16,31,31,16,36,45,66,27,49,50,30,1,26,44,66,67,27,67,47,27,67,68,47,26,45,44,50,36,30,72,49,35,47,68,28,49,30,35,71,72,29,68,69,28,28,69,34,34,70,71,29,72,35,69,70,34,34,71,29,36,16,30,45,27,44,16,17,30,27,0,44,1,44,0,30,18,35,30,17,18,47,46,27,27,46,0,47,28,46,35,18,29,34,20,28,28,21,46,28,20,21,34,29,20,18,19,29,29,19,20,21,0,46],"vertices":[1,9,52.57,54.19,1,1,9,73,23.53,1,1,9,73,4.05,1,1,9,73,-17.18,1,1,9,66.86,-31.61,1,1,9,58.65,-50.88,1,1,9,41.56,-61.3,1,1,9,22.38,-73,1,1,9,-0.4,-73,1,1,9,-21.61,-73,1,1,9,-38.33,-63.87,1,1,9,-54.84,-54.86,1,1,9,-63.44,-38.12,1,1,9,-73,-19.52,1,1,9,-73,-0.05,1,1,9,-73,18.39,1,1,9,-64.33,35.81,1,1,9,-55.77,53.02,1,1,9,-38.95,62.85,1,1,9,-21.61,73,1,1,9,1.55,73,1,1,9,23.32,73,1,2,9,-20.1,-60.5,0.79808,17,-20.1,-60.5,0.20192,2,9,18.71,-59.91,0.79438,17,18.71,-59.91,0.20562,2,9,46.98,-43.92,0.79438,17,46.98,-43.92,0.20562,2,9,62.39,-16.62,0.79808,17,62.39,-16.62,0.20192,2,9,62.39,20.23,0.79808,17,62.39,20.23,0.20192,2,9,46.2,45.78,0.79438,17,46.2,45.78,0.20562,2,9,19.88,61.38,0.79808,17,19.88,61.38,0.20192,2,9,-18.15,62.35,0.79808,17,-18.15,62.35,0.20192,2,9,-46.42,44.8,0.79438,17,-46.42,44.8,0.20562,2,9,-62.61,17.5,0.79808,17,-62.61,17.5,0.20192,2,9,-62.02,-17.21,0.79808,17,-62.02,-17.21,0.20192,2,9,-44.67,-46.46,0.79438,17,-44.67,-46.46,0.20562,2,9,0.93,61.86,0.79808,17,0.93,61.86,0.20192,2,9,-30.83,54.48,0.79728,17,-30.83,54.48,0.20272,2,9,-54.56,31.08,0.79728,17,-54.56,31.08,0.20272,2,9,-62.32,0.15,0.79808,17,-62.32,0.15,0.20192,2,9,-54.46,-29.96,0.79728,17,-54.46,-29.96,0.20272,2,9,-33.69,-52.74,0.79728,17,-33.69,-52.74,0.20272,2,9,-0.03,-60.2,0.79728,17,-0.03,-60.2,0.20272,2,9,33.51,-51.54,0.79648,17,33.51,-51.54,0.20352,2,9,55.7,-28.47,0.79728,17,55.7,-28.47,0.20272,2,9,62.39,4.05,0.79808,17,62.39,4.05,0.20192,1,9,61.57,40.68,1,2,9,53.78,33.81,0.79728,17,53.78,33.81,0.20272,1,9,39.48,62.61,1,2,9,33.37,53.38,0.79728,17,33.37,53.38,0.20272,2,9,0.46,1.94,0.33108,17,0.46,1.94,0.66892,2,9,-24.83,25.06,0.38094,17,-24.83,25.06,0.61906,2,9,-31.83,19.04,0.38174,17,-31.83,19.04,0.61826,2,9,-34.78,10.63,0.38544,17,-34.78,10.63,0.61456,2,9,-35.74,0.91,0.38624,17,-35.74,0.91,0.61376,2,9,-33.82,-8.57,0.38544,17,-33.82,-8.57,0.61456,2,9,-30.17,-15.85,0.38174,17,-30.17,-15.85,0.61826,2,9,-23.09,-23.32,0.38094,17,-23.09,-23.32,0.61906,2,9,-17.64,-27.04,0.38174,17,-17.64,-27.04,0.61826,2,9,-9.95,-29.69,0.38464,17,-9.95,-29.69,0.61536,2,9,0.21,-30.24,0.38174,17,0.21,-30.24,0.61826,2,9,9.78,-29.67,0.38014,17,9.78,-29.67,0.61986,2,9,18.11,-26.61,0.37724,17,18.11,-26.61,0.62276,2,9,24.93,-22.18,0.38014,17,24.93,-22.18,0.61986,2,9,29.71,-14.16,0.38174,17,29.71,-14.16,0.61826,2,9,31.99,-7.51,0.38544,17,31.99,-7.51,0.61456,2,9,33.6,3.07,0.38624,17,33.6,3.07,0.61376,2,9,31.99,11.25,0.38544,17,31.99,11.25,0.61456,2,9,28.17,18.5,0.38174,17,28.17,18.5,0.61826,2,9,22.67,23.22,0.38094,17,22.67,23.22,0.61906,2,9,16.35,26.77,0.38174,17,16.35,26.77,0.61826,2,9,9.23,28.79,0.38544,17,9.23,28.79,0.61456,2,9,0.69,30.6,0.38624,17,0.69,30.6,0.61376,2,9,-8.19,30.03,0.38544,17,-8.19,30.03,0.61456,2,9,-15.26,28.34,0.38174,17,-15.26,28.34,0.61826],"edges":[38,40,40,42,56,68,68,58,40,68,38,36,36,34,58,70,70,60,36,70,30,32,32,34,60,72,72,62,32,72,26,28,28,30,62,74,74,64,28,74,26,24,24,22,64,76,76,66,24,76,18,20,20,22,44,78,78,66,20,78,14,16,16,18,44,80,80,46,16,80,14,12,12,10,46,82,82,48,12,82,6,8,8,10,48,84,84,50,8,84,2,4,4,6,50,86,86,52,4,86,2,88,88,0,52,90,90,54,88,90,42,92,92,0,54,94,94,56,92,94,42,0,0,2,18,44,26,64,30,62,6,50,2,52,56,42,38,58,60,98,98,96,72,100,100,96,98,100,62,102,102,96,100,102,74,104,104,96,102,104,64,106,106,96,104,106,76,108,108,96,106,108,66,110,110,96,108,110,78,112,112,96,110,112,44,114,114,96,112,114,80,116,116,96,114,116,46,118,118,96,116,118,82,120,120,96,118,120,48,122,122,96,120,122,84,124,124,96,122,124,50,126,126,96,124,126,86,128,128,96,126,128,52,130,130,96,128,130,90,132,132,96,130,132,54,134,134,96,132,134,94,136,136,96,134,136,56,138,138,96,136,138,68,140,140,96,138,140,58,142,142,96,140,142,70,144,144,96,142,144,144,98,66,22,46,14,10,48,54,0,60,34]}},"front-foot":{"front-foot":{"x":5.11,"y":2.54,"rotation":14.27,"width":19,"height":12}},"front-lower-arm":{"front-lower-arm":{"x":52.88,"y":5.47,"rotation":102.64,"width":110,"height":125}},"front-shin":{"front-shin":{"x":10.32,"y":1.86,"rotation":101.12,"width":49,"height":56}},"front-thigh":{"front-thigh":{"x":26.99,"y":0.4,"rotation":55.89,"width":54,"height":54}},"front-upper-arm":{"front-upper-arm":{"x":35.92,"y":6.58,"rotation":174.62,"width":113,"height":55}},"head":{"burst01":{"type":"mesh","hull":22,"width":286,"height":309,"uvs":[0.36349,0,0.20193,0.04228,0.05938,0.15467,0,0.30323,0,0.40237,0,0.45545,0,0.63455,0.0731,0.79288,0.20404,0.93264,0.38778,1,0.51283,1,0.56457,0.93822,0.54979,0.8053,0.58569,0.74861,0.60681,0.79064,0.77682,0.77402,0.92887,0.60983,0.9925,0.45944,1,0.44173,1,0.25017,0.78522,0.0547,0.55713,0,0.6308,0.6872,0.512,0.63474,0.30885,0.46497,0.30864,0.24042,0.42904,0.1072,0.71787,0.2181,0.76391,0.39125,0.71579,0.53877,0.62069,0.66092,0.54219,0.60911,0.44912,0.49953,0.40608,0.42094,0.40336,0.36818,0.42572,0.30955,0.47773,0.26688,0.5624,0.24828,0.66793,0.28394,0.71224,0.33292,0.06316,0.46033,0.03888,0.30945,0.0805,0.1714,0.21751,0.07028,0.37554,0.07911,0.60541,0.06136,0.76431,0.09983,0.90739,0.28282,0.64139,0.06273,0.60291,0.06727,0.64106,0.08235,0.60234,0.65202,0.36457,0.15883,0.51743,0.07211,0.51605,0.06855,0.2901,0.34409,0.46451,0.65207,0.5742,0.67639,0.57697,0.6685,0.62787,0.70305,0.67394,0.65823,0.84092,0.61257,0.35144,0.15357,0.29883,0.23755,0.19781,0.27899,0.67524,0.60437,0.7023,0.61751,0.73997,0.54751,0.75917,0.47179,0.73584,0.46801,0.73809,0.39256,0.73511,0.32459,0.68329,0.26738,0.63055,0.23751,0.56328,0.22615,0.51191,0.23162,0.46692,0.24929,0.43645,0.26948,0.40962,0.30229,0.3919,0.33509,0.38417,0.36538,0.381,0.39693,0.38829,0.42807,0.40647,0.47477,0.43147,0.50927,0.47783,0.56691,0.52692,0.62035,0.49518,0.55385,0.42788,0.46075,0.40459,0.39214,0.41534,0.33676,0.45452,0.28593,0.51781,0.25363,0.6201,0.25937,0.64837,0.19561,0.56718,0.16332,0.495,0.17556,0.44329,0.22733,0.42043,0.26462,0.35067,0.39764,0.35427,0.35979,0.36329,0.32417,0.37652,0.29356,0.38856,0.25794,0.41983,0.20951,0.47696,0.14996,0.56838,0.12992,0.65498,0.16221,0.05343,0.39989],"triangles":[48,45,21,20,48,21,45,54,21,54,0,21,49,54,45,43,1,0,53,54,49,44,0,54,43,0,44,50,45,48,49,45,50,46,48,20,50,48,46,26,44,54,26,54,53,106,53,49,105,26,53,105,53,106,62,43,44,52,62,44,42,2,1,26,52,44,27,107,50,106,49,50,107,106,50,106,96,105,95,106,107,43,42,1,95,96,106,94,95,107,104,52,26,104,26,105,104,105,96,46,27,50,94,107,27,74,96,95,74,95,94,97,104,96,75,96,74,97,96,75,73,74,94,63,43,62,64,42,43,25,63,62,25,62,52,37,75,74,93,37,74,76,97,75,47,46,20,47,27,46,92,75,37,36,76,75,103,52,104,98,103,104,25,52,103,73,93,74,97,98,104,77,98,97,92,36,75,72,94,27,73,94,72,38,93,73,76,77,97,91,77,76,63,64,43,20,19,47,72,38,73,36,91,76,102,25,103,78,103,98,78,98,77,35,78,77,102,103,78,3,2,42,41,3,42,64,41,42,91,35,77,101,25,102,28,71,27,72,27,71,39,38,72,71,39,72,79,102,78,101,102,79,90,78,35,79,78,90,55,64,63,55,63,25,55,25,101,100,55,101,100,101,79,80,100,79,34,79,90,80,79,34,47,28,27,89,34,90,70,71,28,39,71,70,81,100,80,89,81,80,89,80,34,99,55,100,99,100,81,108,41,64,4,3,41,4,41,108,88,33,89,81,89,33,82,81,33,47,19,18,17,28,47,5,4,108,18,17,47,55,40,108,5,108,40,91,90,35,88,90,91,88,89,90,24,55,99,70,87,39,28,69,70,68,28,17,68,69,28,88,82,33,83,82,88,92,32,88,84,83,88,32,84,88,70,69,87,67,29,69,68,67,69,92,91,36,91,92,88,37,87,32,37,32,92,93,87,37,87,93,38,87,38,39,85,32,87,84,32,85,87,29,31,69,29,87,65,31,29,17,61,68,61,67,68,17,16,61,66,65,29,66,29,67,66,67,61,86,87,31,85,87,86,6,5,40,55,108,64,23,85,86,24,84,85,24,83,84,99,81,82,24,99,82,24,82,83,85,23,24,51,31,65,56,24,23,65,30,51,65,66,30,60,66,61,30,66,22,58,31,51,86,31,58,23,86,58,57,23,58,56,23,57,66,60,22,58,51,30,22,58,30,22,57,58,59,57,22,59,22,60,13,57,59,15,60,61,59,60,15,15,61,16,14,13,59,14,59,15,40,24,6,24,40,55,7,24,56,7,6,24,13,12,56,13,56,57,8,7,56,9,8,56,12,9,56,11,9,12,10,9,11],"vertices":[219.99,58.9,187.68,94.42,138.41,115.41,89.75,110.13,62.33,96.46,47.65,89.14,-1.87,64.45,-36.32,23.9,-58.26,-28.87,-53.44,-85.18,-37.48,-117.19,-13.79,-121.92,21.07,-99.81,41.33,-101.18,32.4,-112.38,58.69,-153.6,123.5,-169.88,173.21,-165.43,179.06,-164.91,232.03,-138.5,258.68,-56.58,244.7,9.34,64.06,-104.26,63.41,-66.62,84.43,8.78,146.5,39.79,198.71,27.34,204.9,-61.87,162.89,-97.52,115.95,-105.55,70.04,-98.04,74.35,-70.81,92.77,-31.88,109.01,-10.03,123.26,-2.07,142.33,0.29,160.77,-7.13,176.71,-26.24,180.32,-58.16,172.42,-76.26,54.36,72.3,92.99,99.32,136.48,107.7,181.92,86.57,199.65,44.91,233.89,-11.47,243.53,-57.45,211.18,-119.3,238.1,-20.87,231.94,-11.65,232.64,-23.49,70.16,-92.12,176.2,36.72,219.69,9.56,220.5,10.4,115.47,30.24,52.56,-56.85,59.83,-88.28,62.37,-87.9,59.31,-105.69,77.58,-111.3,111.52,-147.75,175.98,40.81,146.04,42.7,121.69,62.84,92.64,-104.21,92.46,-112.95,116.62,-112.94,140.01,-107.41,138.08,-100.92,159.23,-91.1,177.65,-80.96,186.86,-59.81,188.39,-42.19,182.95,-23.41,174.88,-11.02,164.25,-1.94,154.78,3.08,142.28,5.42,130.95,5.43,121.58,3.23,112.45,-0.31,104.77,-6.46,94.18,-17.55,87.83,-28.71,77.81,-48.52,69.3,-68.45,83.63,-51.16,100.79,-21.1,116.79,-5.68,133.48,-0.8,152.54,-3.82,169.55,-15.56,181.01,-42.53,202.25,-40.98,200.82,-15.75,188.22,1.04,167.31,7.14,154.08,7.84,108.39,7.36,119.31,11.65,130.32,14.26,140.47,15.09,151.86,16.92,169.24,15.6,193,9.19,210.21,-11.45,212.33,-38.07,69.83,83.12],"edges":[0,2,2,4,4,6,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,36,38,38,40,40,42,0,42,46,48,54,56,76,78,10,12,12,80,82,84,84,86,86,88,92,94,32,34,34,36,94,34,90,96,96,92,98,100,54,100,60,102,102,62,50,104,104,52,52,106,106,98,88,108,108,90,48,110,110,50,48,112,112,114,44,116,116,46,114,118,118,120,120,122,122,32,88,124,124,126,126,128,128,82,58,130,130,60,44,132,132,134,134,136,136,56,138,58,78,140,140,138,56,142,142,144,144,146,146,148,148,150,150,152,152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,62,174,174,64,174,170,62,172,172,116,64,176,176,66,176,166,64,168,66,164,66,178,178,68,162,178,68,160,68,180,180,70,158,180,70,182,182,72,154,182,72,184,184,74,150,184,74,186,186,76,146,186,188,190,190,192,192,194,194,196,196,156,198,200,200,202,202,204,204,206,206,208,208,210,210,212,212,214,214,54,54,188,6,8,8,10,80,216,216,82,8,216]},"burst02":{"type":"mesh","hull":25,"width":311,"height":361,"uvs":[0.01285,0.25357,0.07336,0.15544,0.18165,0.07341,0.34988,0.01536,0.44435,0.00001,0.55991,0.00001,0.66539,0.01591,0.76543,0.05169,0.85764,0.10606,0.91801,0.17116,0.96506,0.23283,0.99999,0.34882,0.9955,0.46319,0.93625,0.55954,0.87565,0.63112,0.7364,0.78076,0.54858,0.80724,0.53834,0.9205,0.51102,1,0.33333,1,0.20881,0.9205,0.13881,0.819,0.0688,0.66603,0.04281,0.4682,0.00892,0.36404,0.33333,0.66666,0.63526,0.66666,0.64751,0.11218,0.55601,0.09848,0.36572,0.13683,0.2736,0.24127,0.28087,0.39269,0.37057,0.51592,0.48573,0.60782,0.62878,0.63393,0.76212,0.57649,0.85304,0.47519,0.88455,0.36972,0.85788,0.25693,0.78515,0.1713,0.34671,0.12165,0.28479,0.16702,0.31315,0.177,0.2599,0.31162,0.32067,0.4637,0.42253,0.56627,0.46648,0.10604,0.55897,0.63574,0.70162,0.61337,0.81727,0.52695,0.87372,0.41999,0.87524,0.30618,0.82405,0.21485,0.72533,0.14046,0.24368,0.23084,0.22764,0.31199,0.24649,0.40276,0.28977,0.4821,0.34979,0.54281,0.40911,0.58729,0.4754,0.63177,0.55495,0.66302,0.70705,0.64077,0.7824,0.59448,0.83822,0.54037,0.88147,0.48386,0.90589,0.42736,0.91495,0.37085,0.90727,0.30233,0.88564,0.25124,0.85353,0.20075,0.80538,0.15567,0.74188,0.1166,0.65465,0.08414,0.55557,0.07153,0.44603,0.08296,0.60235,0.3294,0.4498,0.01929,0.35621,0.03605,0.19861,0.09679,0.08963,0.17114,0.03818,0.25247,0.03342,0.36103,0.06749,0.46077,0.12146,0.61502,0.55968,0.01782,0.65932,0.0404,0.75598,0.08041,0.8399,0.12881,0.89909,0.18883,0.94031,0.24756,0.97328,0.34953,0.96055,0.45732,0.91583,0.55182,0.8566,0.62597,0.72506,0.70338],"triangles":[5,77,4,85,5,6,85,77,5,78,3,4,78,4,77,86,85,6,86,6,7,74,77,85,74,85,86,79,2,3,87,86,7,75,78,77,75,77,74,73,74,86,73,86,87,78,79,3,28,74,73,46,75,74,28,46,74,87,7,8,27,28,73,72,73,87,53,27,73,40,79,78,40,78,75,88,87,8,71,72,87,29,40,75,29,75,46,72,53,73,80,1,2,88,71,87,41,79,40,79,80,2,88,8,9,39,72,71,53,72,39,42,41,40,42,40,29,89,88,9,70,88,89,71,88,70,52,71,70,39,71,52,54,79,41,80,79,54,89,9,10,30,54,41,30,41,42,90,89,10,69,70,89,69,89,90,81,1,80,81,0,1,38,70,69,52,70,38,68,69,90,51,38,69,51,69,68,43,54,30,55,80,54,55,54,43,81,80,55,76,28,27,76,27,53,76,53,39,76,39,52,76,52,38,76,38,51,46,28,76,29,46,76,42,29,76,30,42,76,43,30,76,91,90,10,91,68,90,10,11,91,82,0,81,82,81,55,24,0,82,37,51,68,67,37,68,91,67,68,31,43,76,56,55,43,56,43,31,82,55,56,37,50,76,37,76,51,66,50,37,67,66,37,92,67,91,66,67,92,83,82,56,12,91,11,92,91,12,44,31,76,23,82,83,24,82,23,36,76,50,57,31,44,56,31,57,65,50,66,65,66,92,36,50,65,32,44,76,49,76,36,64,49,36,64,36,65,58,44,32,57,44,58,93,65,92,64,65,93,13,93,92,13,92,12,45,32,76,76,33,45,58,32,45,49,35,76,59,58,45,63,35,49,63,49,64,47,33,76,59,45,33,35,48,76,57,84,83,57,83,56,94,64,93,63,64,94,14,94,93,14,93,13,60,59,33,48,34,76,34,47,76,63,62,48,63,48,35,34,48,62,47,60,33,61,60,47,84,23,83,22,23,84,25,57,58,25,58,59,84,57,25,26,34,62,61,47,34,26,61,34,95,62,63,26,62,95,95,63,94,15,95,94,15,94,14,16,60,61,16,61,26,95,15,16,95,16,26,21,84,25,22,84,21,20,21,25,60,16,25,25,16,19,20,25,19,60,25,59,17,19,16,18,19,17],"vertices":[136.81,147.92,176.91,146.88,218.44,129.95,260.54,92.48,278.6,68.66,294.63,36.49,304.13,4.57,306.45,-29.04,301.68,-63.45,289.02,-90.74,275.62,-113.77,242.99,-142.17,205.42,-159.34,166.07,-158.36,134.54,-153.03,66.87,-138.36,32.26,-90.35,-5.75,-105.74,-35.22,-110.94,-59.87,-61.48,-51.46,-14.02,-28.39,21.8,11.31,65.92,71.62,105.01,100.57,131.22,47.81,-7.8,89.7,-91.84,270.55,-5.96,262.28,21.72,223.49,68.5,176.96,77.32,129.05,50.91,101.68,6.11,87.97,-40.75,99.38,-84.76,136.44,-112.63,181.78,-121.62,220.23,-113.41,252.97,-87.82,270.54,-53.78,225.75,76.24,202.5,86.17,203.22,76.67,152.33,69.81,111.63,28.4,92.62,-16.46,247.41,45.42,89.11,-65.63,116.13,-101.73,160.09,-120,202.48,-118.49,239.46,-100.58,261.87,-71.62,272.21,-32.17,176.18,87.33,147.74,78.73,121.03,58.86,101.4,34.04,90.11,7.56,83.97,-16.11,78.8,-41.73,79.74,-68.9,108.03,-107.65,133.44,-121.17,158.66,-127.99,182.92,-130.93,204.57,-128.63,224.08,-122.05,245.15,-108.88,258.66,-94.63,270.52,-77.56,278.4,-56.9,282.21,-32.93,280.6,-3.43,270.93,26.18,252.03,54.83,194.1,-28.37,273.13,64.04,254.73,87.38,213.24,121.47,174.1,139.82,140.68,141.05,104.95,124.89,77.45,99.34,35.1,59.48,288.85,33.69,295.38,2.32,295.86,-31.03,291.87,-62.18,280.69,-88.32,267.43,-109.25,239.06,-134.85,202.47,-148.67,165.73,-151.44,133.56,-146.89,90.3,-122.75],"edges":[20,22,6,4,4,2,0,48,2,0,48,46,46,44,44,42,42,40,40,38,22,24,28,30,30,32,32,34,36,38,34,36,54,56,80,82,58,84,84,60,60,86,86,62,62,88,88,64,64,90,90,66,58,92,92,56,66,94,94,68,68,96,96,70,70,98,98,72,72,100,100,74,74,102,102,76,76,104,104,78,54,106,106,78,82,108,108,110,110,112,112,114,114,116,116,118,118,120,120,122,122,52,52,124,124,126,126,128,128,130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,80,102,152,152,86,6,8,8,10,10,12,12,14,14,16,16,18,18,20,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,42,154,170,170,172,172,174,174,176,176,178,178,180,180,182,182,184,184,186,24,26,26,28,186,188,32,190,190,188,124,190,190,30]},"burst03-fg":{"type":"mesh","hull":47,"width":678,"height":442,"uvs":[0.0142,0.14945,0.03578,0.07618,0.04982,0.02654,0.07323,0.00796,0.14111,0,0.18069,0.01405,0.21991,0.03981,0.27396,0.10499,0.32077,0.19118,0.39937,0.31401,0.47115,0.36178,0.54215,0.39572,0.61315,0.37197,0.68728,0.31498,0.74813,0.21758,0.79027,0.10173,0.8324,0.05131,0.88702,0.02919,0.94553,0.05131,0.97908,0.09023,0.98767,0.19308,0.98532,0.24595,0.9705,0.24823,0.96738,0.33423,0.9549,0.3705,0.92057,0.40058,0.91198,0.35635,0.88233,0.36562,0.84566,0.40012,0.81055,0.52421,0.77388,0.58082,0.72005,0.66221,0.66231,0.71529,0.53747,0.74103,0.52577,0.86182,0.53279,0.9317,0.5164,1,0.43214,1,0.27921,0.90959,0.20899,0.60559,0.15437,0.48015,0.11848,0.42442,0.09196,0.39788,0.04514,0.40231,0.03422,0.37488,0,0.28823,0,0.19628,0.02564,0.23269,0.05372,0.09564,0.089,0.07332,0.10034,0.26269,0.15048,0.26837,0.14374,0.10931,0.18895,0.1602,0.07709,0.33851,0.06456,0.20831,0.11053,0.03722,0.15619,0.05304,0.07241,0.15571,0.11789,0.16678,0.91413,0.19533,0.8863,0.24493,0.84631,0.28779,0.80123,0.33248,0.74882,0.39098,0.19534,0.29923,0.24507,0.35229,0.30776,0.4215,0.43623,0.46709,0.54559,0.50021,0.70193,0.44642,0.61673,0.47574,0.37946,0.75892],"triangles":[56,3,4,2,3,56,57,4,5,57,5,6,56,4,57,49,2,56,1,2,49,48,1,49,57,49,56,52,49,57,0,1,48,58,48,49,58,49,52,0,48,58,6,52,57,53,6,7,53,52,6,59,58,52,59,52,53,65,53,7,18,16,17,60,18,19,60,19,20,60,16,18,15,16,60,55,0,58,55,58,59,46,0,55,15,62,14,47,46,55,60,61,15,20,22,60,22,61,60,20,21,22,50,55,59,51,59,53,50,59,51,61,62,15,45,46,47,8,65,7,51,53,65,66,65,8,63,13,14,62,63,14,22,27,61,61,27,62,50,47,55,50,45,47,54,45,50,9,66,8,26,27,22,27,63,62,26,22,23,24,26,23,44,45,54,64,13,63,42,51,65,51,54,50,51,42,54,41,42,65,44,54,42,28,63,27,64,63,28,25,26,24,43,44,42,67,66,9,66,41,65,70,13,64,12,13,70,68,9,10,68,10,11,67,9,68,71,12,70,11,12,71,40,41,66,40,66,67,69,11,71,68,11,69,29,64,28,70,64,29,30,70,29,39,40,67,30,71,70,31,71,30,71,32,69,31,32,71,33,68,69,33,69,32,68,39,67,72,68,33,72,39,68,34,72,33,38,39,72,37,38,72,34,37,72,35,37,34,36,37,35],"vertices":[97.36,198.53,124.34,201.87,140.19,202.19,152.33,195.6,170,167.75,170.84,148.37,171.81,126.1,165.19,92.05,147.96,58.17,136.6,11.64,133.86,-28.49,140.06,-63.74,161.44,-91.42,193.63,-115.4,232.39,-128.94,271.18,-132.35,299.5,-140.99,319.71,-160.4,323.89,-189.92,316.28,-211.83,297.88,-225.64,277.47,-234.55,275.96,-227.3,257.4,-234.86,240.87,-236.36,222,-227.24,237.02,-215.11,234.34,-200.44,213.27,-191.14,183.09,-187.23,153.58,-182.13,110.93,-174.33,78.23,-159.45,45.24,-108.49,21.79,-113.86,-3.35,-130.19,-32.94,-136.09,-51.11,-99.65,-49.6,-16.31,22.32,57.47,32.82,92.2,46.34,118.32,50.74,134.84,38.96,154.24,47.07,164.18,58.25,188.24,71.75,194.97,76.6,183.54,120.79,190.41,133.93,178.42,97.47,153.6,106.11,130.84,140.72,154.09,141.55,128.28,70.19,152.56,87.47,167.95,149.21,173.9,155.62,151.26,110.5,173.14,119.01,153.85,298.64,-185.55,273.72,-182.94,248.75,-173.8,221.98,-162.8,188.36,-151.26,104.01,105.57,94.5,73.97,81.61,33.69,91.93,-30.54,102.87,-84.14,157.1,-141.53,127.55,-110.25,29.5,-31.01],"edges":[74,76,76,78,78,80,80,82,82,84,84,86,86,88,88,90,90,94,90,92,94,92,92,0,0,96,96,98,98,2,2,4,4,6,6,8,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,72,74,70,72,84,102,100,102,98,104,12,106,106,102,104,106,88,108,108,84,108,100,94,110,110,100,8,10,10,12,98,112,112,8,4,112,104,114,114,10,112,114,98,116,116,110,0,116,100,118,118,104,116,118,0,2,54,44,32,120,120,40,36,120,30,122,122,44,120,122,30,124,124,54,122,124,28,126,126,56,124,126,26,128,128,58,126,128,14,130,130,82,102,130,16,132,132,80,130,132,18,134,134,78,132,134,134,136,136,138,24,140,140,60,140,128,138,142,142,140,142,64,78,144,136,144,144,74]},"head":{"type":"mesh","hull":24,"width":297,"height":272,"uvs":[0.89327,0.1264,0.74405,0.05875,0.63411,0.0089,0.42766,0,0.32866,0.01774,0.25087,0.03168,0.09383,0.20554,0.01257,0.39859,0,0.55806,0.02575,0.68996,0.13995,0.87222,0.35629,1,0.50563,1,0.56603,0.92378,0.5792,0.73073,0.63301,0.7715,0.68133,0.68636,0.80761,0.75831,0.90535,0.66478,0.94997,0.5523,1,0.42617,1,0.40756,1,0.38901,1,0.29427,0.75883,0.43332,0.29543,0.28915,0.24432,0.36077,0.4232,0.55331,0.66598,0.62865,0.77076,0.57656,0.53883,0.36488,0.54487,0.33895,0.3925,0.20994,0.45361,0.12275,0.57257,0.13075,0.71598,0.2304,0.6679,0.33361,0.84124,0.22315,0.30431,0.16244,0.87994,0.42216,0.90528,0.50053,0.54287,0.353,0.40207,0.32233,0.6688,0.40531,0.32187,0.44424,0.53578,0.58825,0.76798,0.54323,0.6016,0.3844,0.71826,0.4207,0.71612,0.60373,0.36884,0.4948,0.46578,0.34215,0.34463,0.30446,0.27573,0.39459,0.25505,0.34573,0.29336,0.37153,0.35076,0.40032,0.41173,0.42726,0.48074,0.461,0.56158,0.5,0.66515,0.53303,0.74896,0.43025,0.75395,0.50853,0.73793,0.50764,0.66772,0.49101,0.57596,0.46382,0.49686,0.43328,0.42748,0.40246,0.36609,0.37703,0.30903,0.35103,0.45113,0.44382,0.47881,0.4652,0.55762,0.53179,0.62626,0.56881,0.66063,0.55615,0.69923,0.53245,0.61932,0.61417,0.42705,0.4337,0.46724,0.48153,0.54566,0.55765,0.62306,0.59843,0.66652,0.58571,0.72143,0.53688,0.75628,0.54223,0.52256,0.47952,0.53727,0.44888,0.61411,0.51822,0.62226,0.47754,0.45021,0.46126,0.46213,0.41785,0.51782,0.49906,0.50571,0.51887,0.58949,0.55521,0.58467,0.5782,0.46856,0.45658,0.48828,0.50196,0.502,0.48431,0.45893,0.4501,0.4411,0.45042,0.04802,0.40368,0.13052,0.19803,0.26396,0.06233,0.3249,0.0401,0.43162,0.02742,0.62131,0.03827,0.76313,0.09103,0.87141,0.1678,0.95269,0.27308,0.97734,0.38722,0.97265,0.41089,0.92473,0.54092],"triangles":[104,103,3,4,3,103,2,104,3,102,5,4,102,4,103,104,2,1,101,5,102,0,105,1,104,1,105,34,33,103,104,34,103,38,101,102,106,105,0,100,5,101,100,101,38,100,6,5,102,33,38,33,102,103,32,38,33,37,105,106,105,34,104,35,105,37,35,34,105,23,107,0,106,0,107,37,106,107,25,100,38,38,52,25,52,38,42,51,38,41,38,51,42,36,34,35,34,32,33,31,34,36,34,31,32,38,32,41,54,100,25,69,25,52,54,25,69,31,41,32,26,100,54,30,51,41,55,54,69,68,52,42,69,52,68,41,36,108,43,47,41,30,41,47,108,107,23,37,107,108,36,35,37,108,36,37,36,41,31,108,23,22,55,26,54,53,26,55,56,69,68,55,69,56,67,42,51,68,42,67,99,7,6,99,6,100,108,43,41,108,22,21,43,39,48,109,108,21,89,67,51,89,51,30,43,108,39,109,39,108,109,21,20,57,68,67,56,68,57,61,48,39,66,89,30,24,61,39,77,57,67,77,67,89,70,77,89,58,97,70,56,53,55,44,53,56,85,66,30,85,30,47,58,70,66,98,77,70,98,70,97,58,94,97,70,89,66,88,98,97,88,97,94,65,85,47,71,94,58,87,47,43,65,47,87,84,66,85,58,66,84,78,88,94,78,94,71,96,58,84,71,58,96,78,71,96,64,87,43,64,43,48,57,44,56,50,44,57,98,50,57,98,57,77,50,98,88,90,96,84,65,84,85,59,84,65,90,84,59,40,39,109,95,78,96,95,96,90,63,48,61,62,63,61,64,48,63,24,62,61,87,59,65,86,87,64,86,59,87,91,95,90,72,90,59,72,59,86,91,90,72,75,64,63,60,86,64,60,64,75,82,75,63,109,20,110,109,110,40,46,83,62,63,62,83,82,63,83,24,46,62,24,39,46,46,39,40,19,110,20,27,50,88,27,88,78,27,78,95,92,72,86,74,86,60,73,92,86,74,60,75,79,91,72,79,72,92,8,7,99,74,73,86,29,46,40,29,40,110,93,79,92,93,92,73,81,74,75,73,74,81,81,75,82,45,91,79,45,79,93,27,95,91,45,27,91,80,93,73,80,73,81,49,81,82,49,82,83,29,49,83,29,83,46,76,93,80,45,93,76,28,80,81,28,81,49,76,80,28,110,17,29,18,110,19,16,28,49,44,9,8,14,45,76,16,14,76,18,17,110,49,29,17,16,49,17,16,15,14,28,16,76,26,99,100,53,99,26,53,8,99,50,9,44,27,9,50,53,44,8,9,27,10,45,14,27,11,10,27,14,11,27,13,11,14,12,11,13],"vertices":[231.28,-119.66,227.98,-71.79,225.55,-36.52,200.36,19.43,182.93,43.59,169.22,62.58,106.09,83.22,48.33,81.4,7.84,65.39,-20.84,42.54,-50.08,-9.93,-52.52,-82.93,-32.73,-122.63,-6.17,-129.44,42.56,-109.51,39.76,-128.76,66.89,-131.27,66.11,-173.57,101.82,-188.2,135.11,-186.41,172.45,-184.4,176.98,-182.15,181.49,-179.9,204.56,-168.4,138.75,-121.17,112.45,19.49,88.24,24.39,65.08,-46.52,78.9,-120.19,105.47,-141.72,126.27,-54.39,133.38,-52.84,144.59,3.3,173.92,-2.35,187.73,-34.95,182.47,-85.16,150.98,-84.9,200.84,-117.57,144.47,32.5,157.52,-152.01,141.8,-168.25,129.69,-54.02,118.5,-12.87,133.64,-93.84,78.2,-6.35,71.49,-80.68,113.21,-136.94,129.83,-73.44,136.45,-108.85,91.61,-130.49,72.12,-24.97,122.12,-32.21,115.24,4.56,84.17,11.93,93.32,23.36,92.12,10.04,92.72,-8.7,94.24,-28.17,95.17,-50.61,96.39,-76.83,102.07,-108.37,138.19,-118.17,119.8,-129,117.89,-124.63,112.63,-103.95,107.1,-76.26,104.06,-51.53,102.37,-29.35,100.42,-9.94,99.19,8.37,95.43,-40.66,93.9,-50.61,88.13,-79.63,88.21,-102.37,95.84,-109.97,106.72,-117.36,76.24,-106.03,94.7,-33.03,88.39,-49.52,80.25,-79.59,80.57,-105.11,89.42,-115.12,108.59,-123.8,111.9,-133.71,96.21,-63.97,105.61,-64.17,98.91,-93,109.89,-90.23,91.07,-42.53,103.21,-40.43,90.82,-65.09,84.39,-64.27,86.65,-90.95,80.41,-92.46,94.64,-46.84,86.2,-57.59,92.32,-59.09,94.94,-43.49,92.5,-38.79,51.79,71.36,112.78,74.38,163.49,55.38,176.99,41.88,194.21,15.05,216.7,-36.68,222.65,-80.78,218.31,-118.87,203.45,-153.25,178.92,-173.66,172.55,-175.28,134.54,-178.32],"edges":[4,6,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,46,0,62,64,64,66,66,68,68,70,70,72,72,62,0,2,2,4,6,8,8,10,40,42,78,80,76,82,42,44,44,46,48,92,92,58,60,94,94,86,96,86,56,98,98,58,54,100,100,88,60,102,102,84,50,104,104,84,52,106,106,88,54,90,50,108,108,52,110,106,108,110,112,88,110,112,100,114,112,114,48,122,122,96,122,124,124,126,86,128,128,120,126,128,94,130,130,118,60,132,132,116,102,134,134,114,84,136,136,112,134,136,104,138,138,110,136,138,108,138,140,116,142,116,144,118,148,120,146,148,120,150,148,150,56,152,152,90,114,154,54,156,156,142,90,158,158,144,146,160,160,152,56,162,162,148,160,162,164,150,162,164,124,166,166,164,166,92,116,168,168,118,130,170,170,132,168,170,118,172,172,120,128,174,174,130,172,174,176,156,176,100,132,178,178,134,140,178,180,144,182,158,180,182,144,184,184,146,158,186,186,160,184,186,188,142,176,188,156,190,190,182,142,192,192,180,190,192,154,140,140,194,194,188,154,196,196,176,194,196,196,100,16,198,12,200,200,76,198,200,200,202,8,204,204,76,202,204,204,206,206,208,2,210,210,74,208,210,4,208,206,6,210,212,46,214,214,74,212,214,44,216,216,82,214,216,42,218,218,78,216,218,218,220,220,34,80,220,36,38,38,40,220,38]}},"lower-back-arm":{"lower-back-arm":{"x":42.34,"y":10.93,"rotation":-5.4,"width":101,"height":91}},"metaljaw":{"metaljaw":{"x":85.12,"y":55.13,"rotation":64.15,"width":243,"height":172}},"metaljaw-bg":{"metaljaw":{"color":"7a7a7aff","x":101.82,"y":83.41,"scaleX":0.693,"scaleY":0.9431,"rotation":66.62,"width":243,"height":172}},"splat-bg":{"splat01":{"x":109.41,"y":290.86,"scaleX":1.702,"scaleY":1.702,"rotation":7.05,"width":514,"height":503},"splat02":{"x":75.9,"y":342.4,"scaleX":1.7457,"scaleY":1.7457,"width":734,"height":511}},"splat-fg":{"splat01-fg":{"x":134.75,"y":95.12,"scaleX":1.7236,"scaleY":1.7236,"rotation":8.63,"width":406,"height":264},"splat03":{"type":"mesh","hull":11,"width":723,"height":339,"uvs":[1,0.74645,0.78576,1,0.65397,1,0.45628,1,0.25552,1,0,1,0.03484,0.33136,0.24862,0.05845,0.45117,0.08768,0.65627,0.11728,1,0.50786],"triangles":[9,3,8,7,4,6,8,4,7,5,6,4,3,4,8,3,9,2,9,10,2,0,2,10,1,2,0],"vertices":[461.11,62.25,265.75,-46.16,145.56,-46.16,-34.71,-46.16,-217.78,-46.16,-450.79,-46.16,-419.02,239.73,-224.07,356.42,-39.37,343.92,147.66,331.27,461.11,164.27],"edges":[0,2,10,12,12,14,18,20,0,20,8,10,14,8,2,4,18,4,14,16,16,18,4,6,6,8,16,6]}},"upper-back-arm":{"upper-back-arm":{"x":38.71,"y":2.9,"rotation":68.76,"width":60,"height":86}}}}],"events":{"squish":{}},"animations":{"death":{"slots":{"burst-bg":{"twoColor":[{"time":1.3,"light":"aaff80ff","dark":"083e00"}],"attachment":[{"time":1.3,"name":"burst03-bg"}]},"eye-highlight":{"color":[{"color":"ffffff0e","curve":0.732,"c2":0.01,"c3":0.831,"c4":0.89},{"time":0.8333,"color":"ffffff86"},{"time":1.3333,"color":"ffffff4a"},{"time":1.9333,"color":"ffffff40"}],"attachment":[{"name":null},{"time":0.3,"name":"eye-highlight"}]},"eye-splat":{"attachment":[{"time":1.9333,"name":"splat03"}]},"eye-stalk":{"twoColor":[{"time":1.3,"light":"ffffffff","dark":"000000"},{"time":2,"light":"ffffffff","dark":"193400"}],"attachment":[{"time":1.3,"name":"eye-stalk"}]},"eyeball":{"twoColor":[{"light":"d5a905ff","dark":"787625"},{"time":0.2333,"light":"ffcb07ff","dark":"787625"}]},"head":{"color":[{"time":0.2333,"color":"ffffffff","curve":0.846,"c2":0.01,"c3":0.75},{"time":1.2667,"color":"f6ff85ff"},{"time":1.4,"color":"ffffffff"}],"attachment":[{"time":0.2333,"name":"burst01"},{"time":0.4667,"name":"burst02"},{"time":1.3,"name":"burst03-fg"}]},"splat-bg":{"attachment":[{"time":1.3,"name":"splat01"},{"time":1.4,"name":"splat02"},{"time":1.5,"name":null}]},"splat-fg":{"attachment":[{"time":1.2667,"name":"splat01-fg"},{"time":1.4,"name":null},{"time":1.5,"name":"splat03"}]}},"bones":{"head":{"rotate":[{},{"time":0.1,"angle":8.46},{"time":0.8333,"angle":8.59},{"time":0.8667,"angle":3.12},{"time":0.9,"angle":7.81},{"time":0.9333,"angle":4.16},{"time":0.9667,"angle":9.05},{"time":1,"angle":4.21},{"time":1.0333,"angle":8.65},{"time":1.0667,"angle":2.32},{"time":1.1,"angle":5.07},{"time":1.1333,"angle":1.87},{"time":1.1667,"angle":8.86},{"time":1.2,"angle":3.18},{"time":1.2333,"angle":9.6},{"time":1.2667,"angle":5.68}],"scale":[{"time":0.4667},{"time":0.8333,"x":1.507,"y":1.474,"curve":"stepped"},{"time":1.2333,"x":1.507,"y":1.474},{"time":1.2667,"x":1.571,"y":1.536}]},"hip":{"translate":[{},{"time":0.1333,"y":-9.23,"curve":"stepped"},{"time":1.4,"y":-9.23},{"time":1.5,"x":-20.27,"y":-19.1},{"time":1.6333,"x":-39.1,"y":-19.1}]},"back-thigh":{"rotate":[{"angle":-4.38},{"time":0.1333,"angle":-1.22,"curve":"stepped"},{"time":1.4,"angle":-1.22},{"time":1.5,"angle":14.85}],"scale":[{},{"time":0.1333,"x":0.92}]},"body":{"rotate":[{"angle":0.36},{"time":0.8333,"angle":-7.59},{"time":0.8667,"angle":-10.51},{"time":0.9,"angle":-7.73},{"time":0.9667,"angle":-11.74},{"time":1,"angle":-8.24},{"time":1.0667,"angle":-8.24},{"time":1.1,"angle":-3.25},{"time":1.1333,"angle":-5.07},{"time":1.3667,"angle":-0.93},{"time":1.5,"angle":30.29},{"time":1.6333,"angle":74.27}],"translate":[{},{"time":0.2,"x":-1.55,"y":-14.45}]},"front-thigh":{"rotate":[{"angle":-15.6},{"time":0.1333,"angle":-5.96,"curve":"stepped"},{"time":0.8333,"angle":-5.96},{"time":1.4,"angle":6.79},{"time":1.4667,"angle":7.9},{"time":1.5,"angle":19.67},{"time":1.6333,"angle":23.38}]},"back-shin":{"rotate":[{"angle":12.88},{"time":0.1333,"angle":48.03,"curve":"stepped"},{"time":1.4,"angle":48.03},{"time":1.5,"angle":39.59}]},"front-shin":{"rotate":[{"angle":-20.49},{"time":0.1333,"angle":-46.7,"curve":"stepped"},{"time":0.8333,"angle":-46.7},{"time":1.4,"angle":-52.98},{"time":1.5,"angle":-55.88},{"time":1.6,"angle":-20.01},{"time":1.6333,"angle":27.07}]},"front-upper-arm":{"rotate":[{"angle":-37.4,"curve":0.647,"c3":0.93,"c4":0.87},{"time":0.4,"angle":-41.66,"curve":0.216,"c2":0.28,"c3":0.574,"c4":0.65},{"time":0.6,"angle":-17.17,"curve":0.317,"c2":0.35,"c3":0.653,"c4":0.68},{"time":0.9,"angle":30.9,"curve":0.329,"c2":0.35,"c3":0.662,"c4":0.68},{"time":0.9667,"angle":17.57,"curve":0.33,"c2":0.35,"c3":0.664,"c4":0.69},{"time":1.0333,"angle":22.26,"curve":0.332,"c2":0.36,"c3":0.666,"c4":0.7},{"time":1.1,"angle":8.16,"curve":0.334,"c2":0.37,"c3":0.668,"c4":0.71},{"time":1.1667,"angle":11.83,"curve":0.335,"c2":0.4,"c3":0.669,"c4":0.73},{"time":1.2333,"angle":-1.09,"curve":0.339,"c2":0.57,"c3":0.674,"c4":0.92},{"time":1.3333,"angle":0.3,"curve":0.423,"c2":0.01,"c3":0.721,"c4":0.99},{"time":1.4667,"angle":-23.3},{"time":1.5,"angle":-11.1},{"time":1.6,"angle":43.86},{"time":1.6333,"angle":50.52}]},"upper-back-arm":{"rotate":[{"angle":-327.38,"curve":0.518,"c3":0.872,"c4":0.77},{"time":0.5667,"angle":-13.54,"curve":0.189,"c2":0.36,"c3":0.59},{"time":0.6333,"angle":-18.33,"curve":0.501,"c3":0.75},{"time":0.8333,"angle":-10.06},{"time":1.3667,"angle":-13.54},{"time":1.4667,"angle":-21.13},{"time":1.5,"angle":-36.05},{"time":1.6,"angle":-52.59}],"translate":[{},{"time":0.5667,"x":14.08,"y":-3.26,"curve":"stepped"},{"time":1.4667,"x":14.08,"y":-3.26},{"time":1.5,"x":7.82,"y":9.2},{"time":1.6,"x":0.17,"y":15.5}]},"back-foot":{"rotate":[{},{"time":0.1333,"angle":-38,"curve":"stepped"},{"time":0.6333,"angle":-38},{"time":0.8333,"angle":-46.36}],"scale":[{},{"time":0.1333,"x":0.69}]},"front-foot":{"rotate":[{"angle":25.3},{"time":0.1333,"angle":41.81,"curve":"stepped"},{"time":0.8333,"angle":41.81},{"time":1.4,"angle":14.08},{"time":1.4667,"angle":27.15},{"time":1.5,"angle":27.54},{"time":1.6,"angle":-5.57},{"time":1.6667,"angle":-34.27}]},"front-lower-arm":{"rotate":[{"curve":0.647,"c3":0.93,"c4":0.87},{"time":0.4333,"angle":-33.51,"curve":0.204,"c2":0.28,"c3":0.572,"c4":0.67},{"time":0.8667,"angle":-26.79},{"time":0.9,"angle":-40.59},{"time":0.9667,"angle":-29.11},{"time":1,"angle":-24.38},{"time":1.0333,"angle":-26.62},{"time":1.0667,"angle":-18.33},{"time":1.1,"angle":-22.08},{"time":1.1333,"angle":-17.4},{"time":1.2,"angle":-25.04},{"time":1.3333,"angle":-16.61,"curve":0.423,"c2":0.01,"c3":0.721,"c4":0.99},{"time":1.4667,"angle":16.55},{"time":1.5,"angle":20.52},{"time":1.6333,"angle":-18.51},{"time":1.7333,"angle":-32.15}],"translate":[{},{"time":1.8,"x":-2.43,"y":9.7}]},"lower-back-arm":{"rotate":[{"curve":0.518,"c3":0.872,"c4":0.77},{"time":0.5667,"angle":-70.85,"curve":0.189,"c2":0.36,"c3":0.59},{"time":0.6333,"angle":-75.64,"curve":0.501,"c3":0.75},{"time":0.8333,"angle":-67.37},{"time":1.3667,"angle":-70.85},{"time":1.4,"angle":-81.64},{"time":1.5,"angle":-70.07},{"time":1.6,"angle":-61.11}]},"metaljaw":{"rotate":[{"curve":0.366,"c3":0.853,"c4":0.74},{"time":0.1667,"angle":-21.58,"curve":0.155,"c2":0.33,"c3":0.652,"c4":0.99},{"time":0.2333,"angle":-13.04,"curve":0.25,"c3":0.833,"c4":0.76},{"time":0.3333,"angle":-17.51},{"time":0.6,"angle":-15.89},{"time":0.8333,"angle":-16.29,"curve":0.178,"c2":0.6,"c3":0.832,"c4":0.94},{"time":1.2667,"angle":-9.16},{"time":1.3,"angle":-7.37},{"time":1.3333,"angle":36.46},{"time":1.4,"angle":58.99},{"time":1.4667,"angle":54.61},{"time":1.5,"angle":36.01},{"time":1.5667,"angle":-4.41,"curve":0.2,"c2":0.32,"c3":0.708},{"time":1.7,"angle":-36.18,"curve":0.537,"c2":0.01,"c3":0.643},{"time":1.8667,"angle":25.47,"curve":0.2,"c2":0.32,"c3":0.708},{"time":1.9333,"angle":17.92},{"time":1.9667,"angle":15.04},{"time":2,"angle":18.05}],"translate":[{"x":23.96,"y":-2.74},{"time":0.8333,"x":11.46,"y":27.02,"curve":0.178,"c2":0.6,"c3":0.832,"c4":0.94},{"time":1.2667,"x":1.42,"y":23.67},{"time":1.3,"x":74.86,"y":-64.13},{"time":1.3333,"x":166.87,"y":-115.22},{"time":1.4,"x":280.71,"y":-140.52,"curve":0.417,"c2":0.56,"c3":0.831,"c4":0.9},{"time":1.4667,"x":367.6,"y":-169.48},{"time":1.5333,"x":488.01,"y":-110.44},{"time":1.5667,"x":524.98,"y":-68.19},{"time":1.6667,"x":611.02,"y":-21.24},{"time":1.7,"x":621.11,"y":-17.87},{"time":1.7333,"x":611.73,"y":-23.45},{"time":1.7667,"x":577.67,"y":-38.01},{"time":1.8,"x":539.3,"y":-72.95},{"time":1.8333,"x":516.09,"y":-116.3},{"time":1.8667,"x":508.58,"y":-132.73},{"time":1.9,"x":515.31,"y":-120.95},{"time":1.9333,"x":518.67,"y":-115.9},{"time":1.9667,"x":525.2,"y":-112.64},{"time":2,"x":519.49,"y":-116.72}]},"splat":{"rotate":[{"time":1.3,"angle":5.59},{"time":1.6,"angle":2.33}],"translate":[{"time":0.4,"x":0.36,"y":11.28},{"time":0.8333,"x":-20.56,"y":-10.54,"curve":"stepped"},{"time":1.2667,"x":25.93,"y":45.92,"curve":"stepped"},{"time":1.3,"x":10.4,"y":73},{"time":1.3667,"x":-11.66,"y":52.21,"curve":"stepped"},{"time":1.4,"x":-47.48,"y":155.58,"curve":0.39,"c3":0.846,"c4":0.77},{"time":1.4927,"x":-84.49,"y":305.24,"curve":"stepped"},{"time":1.5,"x":-89.36,"y":464.81,"curve":0.796,"c3":0.939,"c4":0.75},{"time":1.7,"x":-84.17,"y":-342.24}],"scale":[{"time":1.2667,"x":0.827,"y":0.827},{"time":1.3,"x":1.135,"y":0.885},{"time":1.3667,"x":1.248,"y":1.766,"curve":"stepped"},{"time":1.4,"x":1.371,"y":1.373},{"time":1.4927,"x":1.908,"y":1.581,"curve":"stepped"},{"time":1.5,"x":2.663,"y":1.949},{"time":1.6333,"x":3.152,"y":1.544},{"time":1.7,"x":3.599,"y":0.648}]},"eye-pupil":{"rotate":[{"time":0.2333},{"time":0.4333,"angle":21.87},{"time":0.6,"angle":43.08},{"time":0.6667,"angle":71.18},{"time":0.8667,"angle":36.34},{"time":0.9,"angle":-13.68},{"time":1.2,"angle":3.13},{"time":1.9333,"angle":-30.81}],"translate":[{},{"time":0.4333,"x":-56.97,"y":20.88},{"time":0.6,"x":-46.98,"y":25.19},{"time":0.6667,"x":-32.81,"y":64.25,"curve":"stepped"},{"time":0.8667,"x":-32.81,"y":64.25},{"time":0.9333,"x":-35.12,"y":22.56},{"time":1,"x":28.07,"y":40.3},{"time":1.3333,"x":26.59,"y":39.3},{"time":1.9,"x":13.33,"y":42.72},{"time":1.9333,"x":11.79,"y":43.73}],"scale":[{},{"time":0.4333,"x":0.9,"y":1.21},{"time":0.6,"x":0.991,"y":0.691},{"time":0.6667,"x":0.774,"y":0.781},{"time":0.8333,"x":0.753,"y":0.804},{"time":0.9,"x":0.745,"y":1.156},{"time":0.9333,"x":0.814,"y":0.751},{"time":0.9667,"x":1.118,"y":0.698},{"time":1,"x":1.06,"y":1.244},{"time":1.2667,"x":1.21,"y":1.582},{"time":1.3333,"x":0.98,"y":1.281},{"time":1.9,"x":0.936,"y":1.043},{"time":1.9333,"x":0.699,"y":1.043}]},"eye-root":{"translate":[{"time":1.3,"curve":0.09,"c2":0.26,"c3":0.84,"c4":0.9},{"time":1.7667,"x":218.25}],"scale":[{"time":1.2667,"x":1.507,"y":1.474},{"time":1.9234,"x":1.507,"y":1.509},{"time":1.9333,"x":1.507,"y":1.312}]},"eye":{"rotate":[{"time":1.2667,"angle":-3.61},{"time":1.3,"angle":5.53,"curve":0.344,"c3":0.86,"c4":0.89},{"time":1.5333,"angle":-120},{"time":1.6667,"angle":120},{"time":1.8},{"time":1.9333,"angle":-120}],"translate":[{},{"time":0.1,"x":15.53,"y":15.38},{"time":0.2333,"x":1.7,"y":30.31},{"time":0.4667,"x":4.88,"y":94.3},{"time":0.5,"x":1.83,"y":78.16},{"time":0.8333,"x":20.47,"y":66.06},{"time":0.8667,"x":11.22,"y":65.46},{"time":0.9333,"x":14.59,"y":71.02},{"time":1,"x":17.11,"y":72.83},{"time":1.1333,"x":17.48,"y":77.21},{"time":1.1667,"x":23.34,"y":81.63},{"time":1.2,"x":21.32,"y":81.54},{"time":1.2333,"x":31.33,"y":90.55},{"time":1.2667,"x":30.28,"y":90.51},{"time":1.3,"x":8.02,"y":89.55,"curve":0.158,"c2":0.57,"c3":0.75},{"time":1.6333,"x":-16.07,"y":716.51,"curve":0.439,"c2":0.01,"c3":0.967,"c4":0.76},{"time":1.9333,"x":-9.43,"y":-209.96}],"scale":[{},{"time":0.2333,"x":1.624,"y":1.624},{"time":0.5,"x":2.418,"y":2.418},{"time":1.2333,"x":2.89,"y":3.311},{"time":1.2667,"x":3.246,"y":3.735},{"time":1.3,"x":3.342,"y":3.735},{"time":1.3093,"x":3.648,"y":2.369},{"time":1.4333,"x":3.005,"y":3.269},{"time":1.6333,"x":3.005,"y":2.437},{"time":1.9333,"x":2.495,"y":2.884}],"shear":[{"time":1.3},{"time":1.6333,"x":-18.53,"y":-22.38},{"time":1.9333}]},"eye-stalk-root":{"rotate":[{"time":1.9,"angle":-2.98},{"time":1.9333,"angle":-5.88},{"time":2,"angle":-7.23},{"time":2.0333,"angle":-3.79},{"time":2.1,"angle":-1.88},{"time":2.1333,"angle":-3.78}],"translate":[{"time":1.3,"x":-12.25,"y":-2.31},{"time":1.9,"x":-9.79,"y":3.48},{"time":1.9333,"x":-2.84,"y":2.01},{"time":2.0333,"x":-6.22,"y":11.69},{"time":2.1,"x":-9.3,"y":4.57},{"time":2.1333,"x":-7.89,"y":6.42}]},"eye-stalk":{"rotate":[{"time":1.3,"angle":-343.39},{"time":1.4333,"angle":-289.47},{"time":1.9333,"angle":-10.51},{"time":2,"angle":-38.96,"curve":0.385,"c2":0.68,"c3":0.73},{"time":2.1,"angle":-33.95}],"translate":[{"time":1.3,"x":43.2,"y":9.63},{"time":1.3333,"curve":"stepped"},{"time":1.9333},{"time":2,"x":4.51,"y":6.41}]},"eye-stalk2":{"rotate":[{"time":1.3,"angle":16.61},{"time":1.4333,"angle":38.16},{"time":1.8,"angle":-3.77},{"time":1.9333,"angle":12.66},{"time":2,"angle":-52.98,"curve":0.654,"c2":0.01,"c3":0.866,"c4":0.76},{"time":2.1,"angle":-48.29}]},"eye-stalk3":{"rotate":[{"time":1.3,"angle":16.61},{"time":1.4333,"angle":38.16},{"time":1.8,"angle":34.04},{"time":1.9333,"angle":12.66},{"time":2,"angle":-51.44,"curve":0.385,"c2":0.68,"c3":0.73},{"time":2.1,"angle":-39.73}]},"eye-stalk4":{"rotate":[{"time":1.3,"angle":16.61},{"time":1.4333,"angle":-7.55},{"time":1.8,"angle":57.92},{"time":1.9333,"angle":26.58},{"time":2,"angle":-53.31,"curve":0.385,"c2":0.68,"c3":0.73},{"time":2.1,"angle":-41.6}]},"eye-splat":{"scale":[{"time":1.9333,"x":0.852,"y":0.852},{"time":1.9667,"x":1.561,"y":1.561}]},"eye-veins-controller":{"translate":[{},{"time":0.4333,"x":-28.05,"y":-14.26},{"time":0.6,"x":-34.12,"y":-15.46},{"time":0.6667,"x":-19.62,"y":28.02},{"time":0.8667,"x":-23.86,"y":-22.58},{"time":0.9333,"x":-19.65,"y":-19.72},{"time":1,"x":40.46,"y":-0.58}]},"eye-highlight":{"rotate":[{},{"time":0.4333,"angle":-13.54},{"time":0.5667,"angle":-10.36},{"time":0.7,"angle":-17.94},{"time":0.7333,"angle":-45.23},{"time":0.8,"angle":-36.85},{"time":1.3,"angle":-97.35},{"time":1.3333,"angle":-57.95},{"time":1.3667,"angle":-35.03},{"time":1.4,"angle":-20.02},{"time":1.4333,"angle":-9.95},{"time":1.4667,"angle":5.7},{"time":1.5,"angle":37.38},{"time":1.5333,"angle":65.52},{"time":1.5667,"angle":73.86},{"time":1.6,"angle":139.11},{"time":1.6333,"angle":-143.91},{"time":1.7667,"angle":-83.17},{"time":1.8,"angle":-45.13},{"time":1.8333,"angle":-3.24},{"time":1.8667,"angle":12.9},{"time":1.9,"angle":53.9},{"time":1.9333,"angle":-79.36}],"translate":[{"x":12.34,"y":-1.22},{"time":0.3,"x":-0.93,"y":-12.41},{"time":0.8333,"x":-5.02,"y":-11.48},{"time":0.8667,"x":-5.83,"y":1.64},{"time":0.9,"x":-4.65,"y":-12.12},{"time":0.9333,"x":-5.83,"y":-1.98},{"time":0.9667,"x":-5.4,"y":-7.79},{"time":1,"x":-5.28,"y":-4.32},{"time":1.0333,"x":-4.49,"y":-11.5},{"time":1.0667,"x":-5.24,"y":0.9},{"time":1.1,"x":-2.86,"y":-12.6},{"time":1.1333,"x":-3.22,"y":-4.14},{"time":1.1667,"x":-3.7,"y":-15.7},{"time":1.2,"x":-3.38,"y":-7.7},{"time":1.2333,"x":-7.24,"y":-19.81},{"time":1.2667,"x":-4.91,"y":-9.91},{"time":1.3,"x":2.27,"y":-14.68},{"time":1.3333,"x":11.81,"y":-18.48},{"time":1.3667,"x":19.66,"y":-9.43},{"time":1.4,"x":21.7,"y":-4.62},{"time":1.4333,"x":22.89,"y":3.64},{"time":1.4667,"x":21.16,"y":13.24},{"time":1.5,"x":17.41,"y":17.68},{"time":1.5333,"x":11.32,"y":21.18},{"time":1.5667,"x":4.03,"y":27.71},{"time":1.6,"x":-6.09,"y":25.49},{"time":1.6333,"x":-15.72,"y":15.02},{"time":1.6667,"x":-17.19,"y":-2.44},{"time":1.7,"x":-8.29,"y":-15.02},{"time":1.7333,"x":1.29,"y":-17.8},{"time":1.7667,"x":11.62,"y":-14.37},{"time":1.8,"x":13.84,"y":-5.83},{"time":1.8333,"x":17.54,"y":10.85},{"time":1.8667,"x":15.56,"y":15.83},{"time":1.9,"x":9.28,"y":22.98},{"time":1.9333,"x":-1.92,"y":27.57}],"scale":[{"x":0.743,"y":1.34},{"time":0.3,"x":0.623,"y":0.653},{"time":0.5333,"x":0.345,"y":0.362},{"time":0.6667,"x":0.433,"y":0.454},{"time":0.8333,"x":0.527,"y":0.552},{"time":0.9333,"x":0.407,"y":0.427},{"time":0.9667,"x":0.274,"y":0.287},{"time":1.0333,"x":0.407,"y":0.427},{"time":1.0667,"x":0.349,"y":0.366},{"time":1.1,"x":0.392,"y":0.41},{"time":1.1333,"x":0.353,"y":0.37},{"time":1.1667,"x":0.434,"y":0.455},{"time":1.2,"x":0.353,"y":0.37},{"time":1.2333,"x":0.455,"y":0.477},{"time":1.2667,"x":0.372,"y":0.39},{"time":1.3333,"x":0.244,"y":0.251},{"time":1.3667,"x":0.184,"y":0.192},{"time":1.4333,"x":0.165,"y":0.209},{"time":1.5667,"x":0.271,"y":0.344},{"time":1.6,"x":0.318,"y":0.344},{"time":1.6667,"x":0.436,"y":0.472},{"time":1.7,"x":0.341,"y":0.369},{"time":1.7667,"x":0.282,"y":0.306},{"time":1.8,"x":0.221,"y":0.239},{"time":1.8333,"x":0.171,"y":0.186},{"time":1.9,"x":0.302,"y":0.378},{"time":1.9333,"x":0.401,"y":0.517}]}},"transform":{"eye":[{"rotateMix":0,"translateMix":0,"scaleMix":0,"shearMix":0}],"eye-root":[{"translateMix":0,"curve":"stepped"},{"time":1.2667,"translateMix":0,"scaleMix":0},{"time":1.3,"rotateMix":0,"translateMix":0,"scaleMix":0,"shearMix":0}],"jaw":[{"rotateMix":0,"scaleMix":0,"curve":"stepped"},{"time":1.2667,"rotateMix":0,"translateMix":0,"scaleMix":0,"shearMix":0}]},"deform":{"default":{"burst-bg":{"burst03-bg":[{"time":1.3,"offset":46,"vertices":[0.68384,5.64643,41.70734,46.50797,26.72791,67.89645]},{"time":1.3333,"vertices":[-1.73277,76.35558,-2.70367,88.34904,7.16451,81.63237,9.10474,71.60054,26.89132,41.93319,33.82707,14.16541,42.66042,2.01306,46.27941,-10.28481,40.8448,-13.92924,36.71939,-16.69566,36.99004,-19.80729,35.77646,-27.02861,32.51794,-22.78155,22.48866,-24.67291,17.67539,-78.5826,16.74049,-86.95723,33.88027,-93.50364,44.06644,-106.10403,38.59086,-115.00684,17.31061,-128.65402,6.34872,-121.58191,-23.11713,-102.43536,-44.83045,-86.50071,-38.39915,-54.1526,16.74898,10.60439,-7.97856,43.28199,0,0,-46.02549,22.32263,-41.83277,33.20684,-42.38047,80.06304,-32.91348,84.33014,-0.21538,78.17695,-19.0481,83.3494,-18.36562,63.1656,18.65974,41.84681,30.39143,-11.8921,16.57042,-72.18506,21.1253,-102.59708,-2.00249,-93.5976,-7.29897,-84.15235,-5.88057,-72.98954,22.63989,2.5323,31.70975,2.10254,3.04899,79.57899,16.0296,56.81528,10.8523,52.89594,-18.72171,73.69634,-30.13412,70.48869,-34.63183,64.61971]},{"time":1.3667,"vertices":[-28.63036,36.53115,-35.20681,39.71266,-34.16557,29.09573,-39.9383,22.02063,-31.8683,-0.66902,-36.18404,-31.92518,-39.46505,-44.94416,-45.83144,-54.46854,-51.44376,-52.82608,-55.70403,-51.5793,-57.68414,-53.54662,-47.87902,-55.91557,-62.2854,-52.18085,-69.32556,-46.38197,-64.856,-74.20721,-73.91029,-84.11636,-57.97267,-108.61402,-56.66564,-134.3905,-72.063,-140.7236,-108.18388,-132.31097,-111.6678,-115.80203,-138.59677,-66.23582,-149.73697,-34.55333,-122.68817,-4.89592,-46.63315,37.9272,-21.80757,67.6336,-19.94474,-4.60975,-42.24004,-1.19647,-42.70224,0.25723,-54.4291,31.54441,-53.01079,55.72008,-33.87254,45.68143,-45.22352,54.63241,-47.81532,37.10542,-36.64058,4.92978,-56.03099,-44.48704,-60.28207,-64.93195,-82.92386,-108.36906,-104.27381,-75.09884,-102.24123,-57.96945,-89.95052,-44.92264,-50.57152,-30.90934,-45.67356,-37.37893,-37.93099,30.74406,-27.8756,15.30476,-33.52905,16.61335,-46.03555,45.07694,-50.16603,32.58026,-44.19556,25.76055]},{"time":1.4,"vertices":[-85.06468,-33.90498,-101.8331,-38.83959,-112.78791,-50.47047,-126.45663,-50.92437,-127.01215,-61.43593,-146.0162,-92.23505,-163.93832,-101.35416,-180.9555,-103.55012,-184.62927,-95.59962,-187.41797,-89.56448,-191.58801,-89.26762,-171.10568,-84.34687,-194.57843,-82.7303,-194.96826,-69.07529,-178.86887,-66.78349,-196.6018,-76.86019,-185.05325,-119.74084,-195.25043,-157.60983,-220.47452,-159.54361,-268.10382,-125.68286,-262.18945,-100.70921,-281.1634,-20.07929,-278.5943,26.06285,-230.66162,49.32256,-132.58997,66.78984,-53.07204,87.58773,-39.88947,-9.2195,-52.80638,-43.75304,-59.20331,-55.2477,-82.96741,-46.30116,-92.66891,-5.33385,-96.56309,-15.88346,-95.87802,-6.14105,-101.76718,-13.39593,-125.39429,-50.537,-179.73691,-82.21091,-167.9089,-55.52215,-221.00143,-107.68742,-236.25949,-49.5895,-225.28995,-25.78461,-201.40793,-12.69044,-159.03928,-74.99959,-161.5159,-86.89804,-114.6363,-44.59824,-105.05503,-50.20983,-109.14633,-42.54154,-97.87101,-11.87038,-90.83913,-31.73106,-73.43052,-37.16026]},{"time":1.4667,"vertices":[-119.68082,-102.37854,-149.89587,-110.40956,-172.77509,-117.52663,-190.96182,-108.04595,-194.19272,-102.98049,-227.02118,-126.63018,-257.14905,-125.33231,-280.99283,-115.65919,-279.93173,-102.56793,-279.1262,-92.63052,-284.35373,-89.16964,-270.5389,-80.7443,-283.44174,-78.4277,-273.88754,-60.30602,-256.70236,-50.08109,-276.6675,-56.01134,-275.07828,-101.33076,-293.96286,-136.64569,-319.4999,-132.74673,-357.70126,-87.02367,-345.37234,-64.4873,-347.38345,20.00406,-334.4379,63.11477,-284.41574,74.71045,-185.04947,86.74957,-92.86766,94.20273,-69.16657,-1.32112,-70.14582,-63.49519,-74.40994,-83.94076,-88.93673,-89.82903,-97.40413,-65.52103,-129.96956,-80.05418,-113.19644,-72.6012,-130.69727,-59.55135,-184.04749,-89.93822,-263.6749,-88.68695,-243.20096,-41.40928,-308.054,-81.0432,-309.8206,-19.73067,-293.41415,1.41627,-266.63583,8.92852,-231.32803,-94.52206,-243.33133,-108.23704,-170.86154,-108.49509,-157.24203,-104.50037,-156.9343,-91.46993,-121.21587,-68.245,-109.71011,-75.48093,-95.92812,-74.18189]},{"time":1.5333,"vertices":[-145.09042,-120.86653,-194.807,-124.12709,-227.58821,-123.64662,-245.38031,-109.42378,-241.22562,-98.32921,-300.08417,-98.24397,-341.96143,-86.69765,-372.27563,-67.88405,-366.50287,-53.5891,-362.12085,-42.73803,-368.32843,-37.11354,-366.9734,-25.57621,-363.53375,-25.39778,-337.1137,-11.72807,-331.9942,-34.44117,-361.1655,-27.75139,-406.08472,-61.58719,-454.9775,-82.32776,-487.42798,-56.00835,-499.3933,15.00478,-466.21674,30.42004,-401.37433,108.20853,-355.24493,142.60115,-317.21164,112.3073,-216.67148,120.82071,-112.34171,116.20989,-78.34355,17.64208,-68.12334,-64.39978,-70.4538,-90.65836,-102.69727,-118.85889,-122.5974,-95.52684,-172.15723,-83.88164,-149.11832,-91.07712,-140.44006,-71.20289,-240.89162,-83.7411,-339.13574,-43.50141,-297.22635,-2.45705,-434.9395,-15.80909,-381.72412,39.40601,-345.54404,49.90036,-310.70377,48.50959,-295.627,-60.86879,-316.96753,-72.19572,-232.74759,-111.47705,-199.5794,-108.69385,-194.88446,-94.21463,-152.81549,-81.31654,-129.98297,-92.74498,-99.23401,-82.98563]},{"time":1.6333,"vertices":[-158.85898,-157.88821,-222.41895,-171.88745,-265.61752,-163.54323,-295.0162,-162.22234,-298.79596,-131.13844,-362.79938,-138.7018,-433.25107,-98.61046,-477.58896,-33.0961,-464.7487,-16.99556,-455.00192,-4.77399,-462.6796,4.09592,-465.00198,23.43459,-452.06088,17.27241,-418.03323,32.78734,-397.86447,53.22706,-423.10776,55.14351,-445.94412,15.30367,-485.93863,-8.62939,-511.99594,3.77512,-526.6751,57.78288,-498.78177,71.13768,-459.2037,145.88376,-421.043,175.42703,-366.40555,168.70264,-264.10452,171.92749,-141.5528,149.22067,-92.10904,46.08691,-65.08963,-65.75665,-64.51958,-100.73477,-57.10714,-135.81528,-63.258,-136.1058,-166.01343,-130.57944,-110.04475,-140.76263,-155.05429,-88.68021,-270.2941,-110.81262,-420.71603,-12.59779,-378.2645,55.97136,-471.31558,44.54113,-439.99777,98.30469,-410.42368,110.83441,-376.80576,107.88126,-360.46457,-47.26363,-381.6778,-75.78871,-260.41815,-159.90727,-228.69894,-152.92683,-221.67581,-132.34021,-132.3599,-116.78691,-109.39954,-110.22609,-104.19286,-96.19125]}]},"eye-pupil":{"eye-pupil":[{"time":1.9311},{"time":1.9333,"offset":2,"vertices":[4.47624,1.75668,-5.43562,-0.09229,-6.1716,-0.11565,3.39568,0.18896]}]},"eye-stalk":{"eye-stalk":[{"time":1.3,"vertices":[-13.55461,3.64995,-13.55461,3.64995,-13.55461,3.64995,-13.55461,3.64995,-13.55461,3.64995,-13.55461,3.64995,-13.55461,3.64995,12.05962,-7.1837,9.50334,-10.33129,-13.55461,3.64995,12.05962,-7.1837,9.50334,-10.33129,6.15363,-12.61681,-13.55461,3.64995,12.05962,-7.1837,9.50334,-10.33129,6.15363,-12.61681,-13.55461,3.64995,12.05962,-7.1837,9.50334,-10.33129,6.15363,-12.61681,2.29017,-13.84904,12.05962,-7.1837,9.50334,-10.33129,6.15363,-12.61681,2.29017,-13.84904,9.50334,-10.33129,6.15363,-12.61681,2.29017,-13.84904,9.50334,-10.33129,6.15363,-12.61681,2.29017,-13.84904,9.50334,-10.33129,6.15363,-12.61681,2.29017,-13.84904,9.50334,-10.33129,6.15363,-12.61681,2.29017,-13.84904,12.05962,-7.1837,9.50334,-10.33129,6.15363,-12.61681,2.29017,-13.84904,-13.55461,3.64995,12.05962,-7.1837,9.50334,-10.33129,6.15363,-12.61681,2.29017,-13.84904,-13.55461,3.64995,12.05962,-7.1837,9.50334,-10.33129,6.15363,-12.61681,-13.55461,3.64995,12.05962,-7.1837,9.50334,-10.33129,6.15363,-12.61681,-13.55461,3.64995,12.05962,-7.1837,9.50334,-10.33129,-13.55461,3.64995,12.05962,-7.1837,-13.55461,3.64995,-13.55461,3.64995]},{"time":1.9,"vertices":[-11.08029,2.30809,-11.08029,2.30809,-11.08029,2.30809,-11.08029,2.30809,-11.08029,2.30809,-11.08029,2.30809,-11.08029,2.30809,9.45856,-6.10838,7.09104,-8.88103,-11.08029,2.30809,9.45856,-6.10838,7.09104,-8.88103,4.30757,-10.49207,-11.08029,2.30809,9.45856,-6.10838,7.09104,-8.88103,4.30757,-10.49207,-11.08029,2.30809,9.45856,-6.10838,7.09104,-8.88103,4.30757,-10.49207,1.96801,-11.05282,9.45856,-6.10838,7.09104,-8.88103,4.30757,-10.49207,1.96801,-11.05282,7.09104,-8.88103,4.30757,-10.49207,1.96801,-11.05282,7.09104,-8.88103,4.30757,-10.49207,1.96801,-11.05282,7.09104,-8.88103,4.30757,-10.49207,1.96801,-11.05282,7.09104,-8.88103,4.30757,-10.49207,1.96801,-11.05282,9.45856,-6.10838,7.09104,-8.88103,4.30757,-10.49207,1.96801,-11.05282,-11.08029,2.30809,9.45856,-6.10838,7.09104,-8.88103,4.30757,-10.49207,1.96801,-11.05282,-11.08029,2.30809,9.45856,-6.10838,7.09104,-8.88103,4.30757,-10.49207,-11.08029,2.30809,9.45856,-6.10838,7.09104,-8.88103,4.30757,-10.49207,-11.08029,2.30809,9.45856,-6.10838,7.09104,-8.88103,-11.08029,2.30809,9.45856,-6.10838,-11.08029,2.30809,-11.08029,2.30809]},{"time":1.9333,"vertices":[-8.59176,1.34506,-8.59176,1.34506,-8.59176,1.34506,-8.59176,1.34506,-8.59176,1.34506,-8.59176,1.34506,-8.59176,1.34506,6.82865,-5.65678,4.62405,-7.86417,-8.59176,1.34506,6.82865,-5.65678,4.62405,-7.86417,2.12341,-8.95931,-8.59176,1.34506,6.82865,-5.65678,4.62405,-7.86417,2.12341,-8.95931,-8.59176,1.34506,6.82865,-5.65678,4.62405,-7.86417,2.12341,-8.95931,0.70037,-8.70487,6.82865,-5.65678,4.62405,-7.86417,2.12341,-8.95931,0.70037,-8.70487,4.62405,-7.86417,2.12341,-8.95931,0.70037,-8.70487,4.62405,-7.86417,2.12341,-8.95931,0.70037,-8.70487,4.62405,-7.86417,2.12341,-8.95931,0.70037,-8.70487,4.62405,-7.86417,2.12341,-8.95931,0.70037,-8.70487,6.82865,-5.65678,4.62405,-7.86417,2.12341,-8.95931,0.70037,-8.70487,-8.59176,1.34506,6.82865,-5.65678,4.62405,-7.86417,2.12341,-8.95931,0.70037,-8.70487,-8.59176,1.34506,6.82865,-5.65678,4.62405,-7.86417,2.12341,-8.95931,-8.59176,1.34506,6.82865,-5.65678,4.62405,-7.86417,2.12341,-8.95931,-8.59176,1.34506,6.82865,-5.65678,4.62405,-7.86417,-8.59176,1.34506,6.82865,-5.65678,-8.59176,1.34506,-8.59176,1.34506]},{"time":2.0333,"vertices":[-9.31314,-0.35416,-9.31314,-0.35416,-9.31314,-0.35416,-9.31314,-0.35416,-9.31314,-0.35416,-9.31314,-0.35416,-9.31314,-0.35416,6.37309,-3.86795,2.92618,-7.13972,-9.31314,-0.35416,6.37309,-3.86795,2.92618,-7.13972,0.41592,-9.66072,-9.31314,-0.35416,6.37309,-3.86795,2.92618,-7.13972,0.41592,-9.66072,-9.31314,-0.35416,6.37309,-3.86795,2.92618,-7.13972,0.41592,-9.66072,0.05828,-10.43551,6.37309,-3.86795,2.92618,-7.13972,0.41592,-9.66072,0.05828,-10.43551,2.92618,-7.13972,0.41592,-9.66072,0.05828,-10.43551,2.92618,-7.13972,0.41592,-9.66072,0.05828,-10.43551,2.92618,-7.13972,0.41592,-9.66072,0.05828,-10.43551,2.92618,-7.13972,0.41592,-9.66072,0.05828,-10.43551,6.37309,-3.86795,2.92618,-7.13972,0.41592,-9.66072,0.05828,-10.43551,-9.31314,-0.35416,6.37309,-3.86795,2.92618,-7.13972,0.41592,-9.66072,0.05828,-10.43551,-9.31314,-0.35416,6.37309,-3.86795,2.92618,-7.13972,0.41592,-9.66072,-9.31314,-0.35416,6.37309,-3.86795,2.92618,-7.13972,0.41592,-9.66072,-9.31314,-0.35416,6.37309,-3.86795,2.92618,-7.13972,-9.31314,-0.35416,6.37309,-3.86795,-9.31314,-0.35416,-9.31314,-0.35416]}]},"eyeball":{"eye":[{"time":1.9234},{"time":1.9333,"curve":0.612,"c3":0.961,"c4":0.85,"vertices":[2.30195,4.84045,-6.24465,24.31509,-18.24174,22.2739,-30.77019,23.47581,-33.87926,23.45443,-38.95153,23.98627,-34.9502,18.64992,-30.14416,12.82236,-21.8173,-2.96754,-13.31968,1.1067,-2.10858,1.39288,2.42243,-1.84196,5.94919,-4.52369,9.8671,-7.50283,12.31492,-9.3641,14.6324,-11.12628,15.38972,-11.70213,16.13764,-12.27084,14.59378,-11.09693,13.00154,-9.88621,9.17395,-6.97573,5.57406,-4.23845,-9.94695,0.20264,-9.94721,0.20223,-25.47261,11.38448,-25.47296,11.38448,-31.46003,19.05132,-31.4604,19.05161,-27.36235,20.51298,-27.36279,20.51315,-9.49651,17.27551,-9.49667,17.27538,-1.68325,1.85822,-1.68365,1.85748,3.8709,-2.94338,3.87091,-2.94342,10.27974,-7.8166,10.27979,-7.81664,12.74799,-9.69339,12.74804,-9.69345,11.99189,-9.11849,11.99193,-9.11852,7.5319,-5.72716,7.53192,-5.72721,0.38781,-0.3073,0.38766,-0.30762,7.06353,-5.37103,7.06358,-5.37108,11.38696,-8.65849,11.38698,-8.65854,12.36788,-9.40434,12.36791,-9.4045,9.76295,-7.42364,9.76303,-7.42368,4.6788,-3.55771,4.67889,-3.55776,-1.80754,1.19403,-1.80772,1.19377,-19.09809,2.46482,-19.09858,2.46502,-28.60839,15.39989,-28.60876,15.40005,-29.13958,19.87903,-29.1399,19.87918,-16.33226,19.23055,-16.33257,19.23074,3.91371,13.28555,-4.99462,8.72512,-4.99503,8.72488,0.48935,-0.51892,-0.96208,0.58485,-0.96218,0.58458,-8.55228,8.23908,-8.55267,8.23903,2.68275,-2.08037,2.68275,-2.08083,3.48771,-2.65166,3.48763,-2.65211,2.74517,-2.11385,2.74507,-2.11432,1.22514,-1.01873,1.22504,-1.01915,-1.78653,1.18036,-1.78666,1.1801,-3.90304,0.99792,-3.90348,0.99728,-8.0176,3.28572,-8.01794,3.28543,-10.92476,5.07293,-10.92514,5.0727,-14.40496,7.53363,-14.40521,7.53322,-18.1622,10.59957,-18.16252,10.59935,-22.38956,14.13091,-22.38988,14.13076,-24.60171,16.46433,-24.60199,16.46445,-25.20555,17.09343,-25.20588,17.09342,-22.75626,17.1347,-22.75659,17.13467,-21.20954,17.0104,-21.20993,17.01039,-17.62271,16.1749,-17.62304,16.1748,-15.49942,15.71741,-15.49973,15.71711,-11.04413,13.37115,-11.04425,13.37096,-8.16751,11.73045,-8.16785,11.73016,-4.56702,9.33353,-4.56739,9.33321,-1.3697,7.00007,-1.37008,6.99982,-2.7477,1.81529,-2.74784,1.815,-0.36564,0.09844,-0.36574,0.09808,1.04679,-0.91141,1.04672,-0.91181]},{"time":2.0333,"vertices":[3.24275,7.91407,-10.90369,19.33402,-18.24174,22.2739,-30.77019,23.47581,-33.87926,23.45443,-38.95153,23.98627,-34.9502,18.64992,-30.14416,12.82236,-20.97651,2.92524,-14.81287,0.26187,-2.10858,1.39288,-0.4933,4.43934,-0.07114,5.34762,0.3979,6.35674,1.12204,6.63992,1.80758,6.90797,2.65722,6.49156,3.49633,6.08028,4.25356,4.92377,5.03446,3.73087,5.57333,1.94191,6.08008,0.25922,-11.13084,-0.60674,-11.13115,-0.60712,-25.47261,11.38448,-25.47296,11.38448,-31.46003,19.05132,-31.4604,19.05161,-27.36235,20.51298,-27.36279,20.51315,-9.49651,17.27551,-9.49667,17.27538,-0.40323,5.37477,-0.40364,5.37405,5.67802,-0.01979,5.67812,-0.01985,4.82932,2.93262,4.82941,2.93254,3.51867,4.86237,3.51881,4.8623,2.12682,5.71601,2.12693,5.71597,0.8497,5.16611,0.84982,5.16597,0.16973,3.38345,0.16969,3.38303,5.25523,1.45103,5.25537,1.45089,4.24138,3.79829,4.24154,3.79819,2.81897,5.29156,2.81905,5.29148,1.48856,5.4412,1.48872,5.44109,0.55169,4.39623,0.55186,4.39612,-1.80754,1.19403,-1.80772,1.19377,-19.09809,2.46482,-19.09858,2.46502,-28.60839,15.39989,-28.60876,15.40005,-29.13958,19.87903,-29.1399,19.87918,-16.33226,19.23055,-16.33257,19.23074,-1.51704,11.7206,-4.92833,11.02434,-4.92876,11.0241,4.60013,-0.04099,4.35205,-0.18725,4.35202,-0.18759,-8.55228,8.23908,-8.55267,8.23903,3.38354,1.49375,3.38358,1.49323,3.39127,1.68725,3.39128,1.68668,2.738,2.00672,2.738,2.00632,1.74714,2.39383,1.74712,2.39344,0.59517,2.73257,0.59512,2.73225,-3.90304,0.99792,-3.90348,0.99728,-8.0176,3.28572,-8.01794,3.28543,-10.92476,5.07293,-10.92514,5.0727,-14.40496,7.53363,-14.40521,7.53322,-18.1622,10.59957,-18.16252,10.59935,-22.38956,14.13091,-22.38988,14.13076,-24.60171,16.46433,-24.60199,16.46445,-25.20555,17.09343,-25.20588,17.09342,-22.75626,17.1347,-22.75659,17.13467,-21.20954,17.0104,-21.20993,17.01039,-17.62271,16.1749,-17.62304,16.1748,-15.49942,15.71741,-15.49973,15.71711,-11.04413,13.37115,-11.04425,13.37096,-8.16751,11.73045,-8.16785,11.73016,-4.56702,9.33353,-4.56739,9.33321,-1.3697,7.00007,-1.37008,6.99982,1.81303,1.42351,1.81299,1.42317,2.54668,1.37999,2.54664,1.37957,2.96464,1.409,2.96464,1.40857]},{"time":2.1,"vertices":[3.24275,7.91407,-10.90369,19.33402,-18.24174,22.2739,-30.77019,23.47581,-33.87926,23.45443,-38.95153,23.98627,-34.9502,18.64992,-30.14416,12.82236,-20.97651,2.92524,-14.81287,0.26187,-2.10858,1.39288,0.47545,-0.3615,1.21325,-0.92252,2.03287,-1.5458,2.54498,-1.93515,3.0298,-2.30381,3.18821,-2.42429,3.34468,-2.54327,3.0217,-2.29768,2.68859,-2.04442,1.88788,-1.43551,1.13477,-0.8629,-11.13084,-0.60674,-11.13115,-0.60712,-25.47261,11.38448,-25.47296,11.38448,-31.46003,19.05132,-31.4604,19.05161,-27.36235,20.51298,-27.36279,20.51315,-9.49651,17.27551,-9.49667,17.27538,-0.40323,5.37477,-0.40364,5.37405,0.77848,-0.59193,0.7785,-0.59198,2.11919,-1.61148,2.11925,-1.61153,2.63555,-2.00404,2.6356,-2.0041,2.47738,-1.8838,2.47744,-1.88381,1.54435,-1.1743,1.54437,-1.17445,-0.08939,0.05556,-0.08952,0.0552,1.44635,-1.09981,1.44643,-1.0999,2.35082,-1.78755,2.35091,-1.78761,2.55606,-1.94357,2.55609,-1.94361,2.01108,-1.52922,2.01118,-1.52928,0.94748,-0.72044,0.94757,-0.72051,-1.80754,1.19403,-1.80772,1.19377,-19.09809,2.46482,-19.09858,2.46502,-28.60839,15.39989,-28.60876,15.40005,-29.13958,19.87903,-29.1399,19.87918,-16.33226,19.23055,-16.33257,19.23074,-1.51704,11.7206,-4.92833,11.02434,-4.92876,11.0241,-1.09258,0.68392,-1.43501,0.94445,-1.43511,0.94416,-8.55228,8.23908,-8.55267,8.23903,0.207,-0.19785,0.207,-0.19832,0.69833,-0.53062,0.69828,-0.53114,0.3305,-0.27785,0.33043,-0.27822,-0.46798,0.26863,-0.46804,0.2683,-1.78653,1.18036,-1.78666,1.1801,-3.90304,0.99792,-3.90348,0.99728,-8.0176,3.28572,-8.01794,3.28543,-10.92476,5.07293,-10.92514,5.0727,-14.40496,7.53363,-14.40521,7.53322,-18.1622,10.59957,-18.16252,10.59935,-22.38956,14.13091,-22.38988,14.13076,-24.60171,16.46433,-24.60199,16.46445,-25.20555,17.09343,-25.20588,17.09342,-22.75626,17.1347,-22.75659,17.13467,-21.20954,17.0104,-21.20993,17.01039,-17.62271,16.1749,-17.62304,16.1748,-15.49942,15.71741,-15.49973,15.71711,-11.04413,13.37115,-11.04425,13.37096,-8.16751,11.73045,-8.16785,11.73016,-4.56702,9.33353,-4.56739,9.33321,-1.3697,7.00007,-1.37008,6.99982,-2.7477,1.81529,-2.74784,1.815,-1.53276,0.98591,-1.53285,0.98552,-0.72917,0.43901,-0.72926,0.43862]},{"time":2.1667,"vertices":[3.24275,7.91407,-10.90369,19.33402,-18.24174,22.2739,-30.77019,23.47581,-33.87926,23.45443,-38.95153,23.98627,-34.9502,18.64992,-30.14416,12.82236,-20.97651,2.92524,-14.81287,0.26187,-2.10858,1.39288,-1.74232,1.39981,-0.33504,1.14755,1.22828,0.86729,2.52186,0.44093,3.74653,0.03722,4.60654,-0.45946,5.45589,-0.94996,5.53217,-1.3887,5.6108,-1.84122,4.8163,-2.14865,4.06898,-2.43792,-11.13084,-0.60674,-11.13115,-0.60712,-25.47261,11.38448,-25.47296,11.38448,-31.46003,19.05132,-31.4604,19.05161,-27.36235,20.51298,-27.36279,20.51315,-9.49651,17.27551,-9.49667,17.27538,-0.40323,5.37477,-0.40364,5.37405,3.24374,-2.20052,3.24379,-2.20058,4.61343,-1.71692,4.61352,-1.717,4.41793,-0.95703,4.41801,-0.95714,3.15983,-0.14434,3.15992,-0.14439,0.83397,0.60798,0.83404,0.6078,-1.96106,1.21719,-1.96115,1.21683,3.92605,-1.95956,3.92619,-1.95968,4.52572,-1.37605,4.52586,-1.37612,3.78548,-0.54843,3.78557,-0.5485,1.99743,0.23164,1.99757,0.23158,-0.27251,0.78668,-0.27241,0.78658,-1.80754,1.19403,-1.80772,1.19377,-19.09809,2.46482,-19.09858,2.46502,-28.60839,15.39989,-28.60876,15.40005,-29.13958,19.87903,-29.1399,19.87918,-16.33226,19.23055,-16.33257,19.23074,-1.51704,11.7206,-4.92833,11.02434,-4.92876,11.0241,1.4674,-1.45463,0.75603,-1.12101,0.75596,-1.12132,-8.55228,8.23908,-8.55267,8.23903,1.20663,-0.8295,1.20665,-0.83001,1.4439,-0.86632,1.44389,-0.86688,0.74517,-0.46391,0.74515,-0.46432,-0.4279,0.16244,-0.42794,0.16207,-2.09786,1.05663,-2.09795,1.05634,-3.90304,0.99792,-3.90348,0.99728,-8.0176,3.28572,-8.01794,3.28543,-10.92476,5.07293,-10.92514,5.0727,-14.40496,7.53363,-14.40521,7.53322,-18.1622,10.59957,-18.16252,10.59935,-22.38956,14.13091,-22.38988,14.13076,-24.60171,16.46433,-24.60199,16.46445,-25.20555,17.09343,-25.20588,17.09342,-22.75626,17.1347,-22.75659,17.13467,-21.20954,17.0104,-21.20993,17.01039,-17.62271,16.1749,-17.62304,16.1748,-15.49942,15.71741,-15.49973,15.71711,-11.04413,13.37115,-11.04425,13.37096,-8.16751,11.73045,-8.16785,11.73016,-4.56702,9.33353,-4.56739,9.33321,-1.3697,7.00007,-1.37008,6.99982,-2.7477,1.81529,-2.74784,1.815,-0.29255,-0.23069,-0.29261,-0.23111,0.42445,-0.52553,0.42439,-0.52595]}]},"head":{"head":[{},{"time":0.2,"vertices":[13.75111,4.85142,24.32014,1.12376,26.01038,9.53201,30.68427,18.44095,24.90535,25.67038,8.98901,37.05399,1.21941,32.73833,0.00002,0.00001,0.00002,0.00002,0.00001,0.00002,0,0.00001,0,0.00001,0,0,0,0,-6.6898,9.80194,-5.05742,9.26561,-4.96629,11.48915,-6.59993,23.32903,-12.01232,20.66869,-16.25858,19.40443,-12.71413,14.54102,-5.93674,14.7163,0.11565,15.91503,5.36177,14.31557,4.48566,-2.46352,-1.42722,-2.03418,-0.00001,0,0,0,-3.61057,7.04752,-3.51703,9.89339,30.78316,3.77597,79.82353,18.92043,55.77951,17.95429,50.40761,34.94055,50.55713,39.23791,61.27519,44.92727,79.54408,32.56362,18.54898,18.91411,6.64247,30.16319,-16.43497,10.62154,-13.17729,14.75938,51.7993,-0.26025,18.34035,2.16159,28.03456,7.0585,3.33049,-2.35816,2.00232,0.76244,11.03924,5.39703,31.70125,3.61331,19.72183,2.9424,-3.03603,7.64153,0.00001,0.00001,25.98085,4.27312,8.4198,0.44305,-6.60401,-1.06753,0,0,0,0,4.6051,0.5287,9.93486,10.03566,27.98062,7.05276,38.33069,6.80178,31.15146,9.09935,12.24789,4.55832,11.94951,6.85835,17.77548,7.54866,30.17921,-0.17654,38.40248,6.66553,28.92384,10.24368,16.81825,6.69662,9.21013,1.0574,2.04581,-0.27795,13.95413,15.73528,-1.43007,0.10522,-2.08388,0.08258,0,0,1.17355,0.34741,18.39603,0.88033,0,0,11.41278,11.51308,-2.88608,1.10176,-1.57054,-0.07635,-0.16765,-0.08842,0,0,7.97186,1.1478,3.2681,4.46464,36.27831,5.03716,36.27831,5.03716,36.66379,8.15264,37.1739,6.85481,-1.85954,3.00225,23.87404,7.3959,-1.38234,0.20156,-2.22337,-0.03172,-1.65433,-0.1206,-2.57883,-0.60804,-0.02429,1.84338,-2.52748,0.95428,-1.16122,0.25819,6.62007,11.85163,4.22813,10.46403,0,0,-1.81659,32.37084,9.25679,35.75591,26.71053,23.73249,32.4342,19.81351,29.77367,7.60575,24.80023,8.73225,13.30579,10.78311,-0.70573,5.85449,-1.23865,14.09991,-15.53979,14.14754,-18.412,20.94823]}],"burst01":[{"time":0.2333,"offset":44,"vertices":[12.08273,0.42989,5.85635,-3.15448,-14.58395,-14.16644,-42.0544,-27.86382,-61.27995,-40.99558,-54.93826,-31.80959,-24.33878,-17.19197,-6.21338,-8.34913,8.88202,-1.20689,2.66962,-4.62145,-10.58348,-11.60531,-20.12813,-16.53806,-26.57732,-19.76444,-33.7876,-23.26907,-39.09344,-25.70451,-41.505,-26.56489,-37.31277,-24.04845,-31.3895,-20.91614,0,0,4.10197,6.42991,0.58853,3.21655,5.11995,1.45657,2.49861,11.11131,0,0,0,0,0,0,0,0,-68.36334,-38.3297,-67.35854,-38.94537,7.82242,-1.80934,-54.96565,-36.99145,-65.9529,-39.90656,0,0,-29.34291,-21.60076,0,0,0,0,9.88068,-0.88555,0,0,0,0,0,0,12.89357,21.77497,3.83153,26.02618,-0.55229,28.95589,1.87724,-4.479,3.44228,-3.58939,-5.18176,-7.73711,-14.47705,-12.29416,-14.90198,-12.60027,-24.13503,-17.19472,-32.4474,-21.35122,-39.36365,-25.00894,-42.93295,-27.00154,-44.21417,-27.91209,-43.46233,-27.74467,-41.228,-26.81248,-38.70844,-25.67925,-34.65059,-23.76439,-30.60744,-21.8201,-26.88924,-19.99747,-23.02391,-18.08309,-19.22693,-16.16058,-13.5432,-13.25327,-9.36305,-11.06808,-2.38658,-7.40237,4.07083,-3.98443,-4.01335,-8.14338,-15.29329,-14.03935,-23.64859,-18.29926,-30.44191,-21.64285,-36.72517,-24.61744,-40.77979,-26.38342,-40.24191,-25.70207,-53.38672,-32.65142,-58.2805,-35.49346,-54.82005,-36.28709,-45.14799,-29.4385,-40.00992,-25.16666,-22.88824,-18.13795,-27.52473,-20.43511,-31.89749,-22.57889,-35.66429,-24.40355,-40.04185,-26.53755,-46.29327,-30.89571,-56.60077,-38.35271,-61.87022,-38.36944,-59.29791,-35.64544]},{"time":0.4333,"vertices":[40.54706,18.65558,38.06252,24.40632,27.65821,24.06248,16.09364,21.12307,6.57109,-0.3765,20.56963,-20.16034,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.57057,1.29805,0,0,1.18316,12.96902,11.88604,5.83296,19.81404,-0.12758,31.30681,4.98151,27.94331,0.83968,45.36443,5.16258,44.82766,19.18138,39.82458,-0.78847,0.56605,27.18461,4.84359,27.031,9.96158,40.96053,14.51502,35.36584,43.19155,-23.34477,46.56367,-22.69795,41.00872,-11.5978,38.11973,0.52029,10.31166,18.63938,3.20829,35.77074,3.08008,42.51454,7.03522,50.63188,32.48734,61.44403,50.61159,45.50713,56.06839,27.62417,58.40731,-3.67759,54.33757,-12.62103,26.68567,-7.81141,17.76682,23.94729,19.63043,27.02727,19.98313,30.44666,37.22532,28.55745,44.63566,19.18997,38.74739,-2.13748,14.80871,-11.43229,46.14268,15.4712,24.31715,12.62191,30.52795,-10.37407,22.00648,14.14368,5.84632,41.59464,16.12791,29.77016,45.7781,21.164,11.69496,43.37859,-0.82077,2.58945,-0.68969,-0.1915,19.50694,8.32717,-3.03913,-0.59166,2.29238,-1.61308,2.24205,7.7463,27.09621,42.43314,13.94484,47.09381,7.50664,30.2716,38.78389,-4.95724,40.50175,-8.41444,39.27843,-11.80223,42.26198,-18.93701,41.15641,-15.96172,45.61419,-19.41041,54.82236,-15.52848,58.18858,-5.62221,58.66469,8.2961,55.00331,27.52796,53.25496,34.06676,52.82998,44.95584,32.88763,61.04887,24.56279,61.63552,18.94136,60.29522,6.14145,53.07735,0.90195,45.72404,2.73484,44.77526,4.4589,40.7398,2.99844,38.01129,2.40748,29.50703,7.3909,17.21804,2.4403,27.30689,5.64411,39.70188,1.59144,42.72276,17.94904,59.72688,34.41533,58.73611,54.58006,33.30026,59.33932,9.6127,47.43507,6.32447,40.40736,21.28833,32.71583,39.14765,29.18468,52.61752,25.54237,57.98509,8.51183,47.33889,6.32254,48.8425,6.83596,54.05988,8.63521,55.39858,12.18268,55.04446,25.42243,49.9039,29.89964,34.52418,34.39793,18.36047,42.0993,4.18422,20.75233,6.80875]},{"time":0.4667,"vertices":[47.3049,21.76485,44.40627,28.47404,32.26791,28.0729,18.77591,24.64358,0,0,6.15318,19.76164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.83234,1.5144,0,0,1.38036,15.13052,13.86705,6.80511,23.11638,-0.14884,36.52461,5.81176,32.60052,0.97962,52.92517,6.02301,52.29893,22.37827,45.13234,-1.49643,0.36846,31.73622,8.76564,33.39234,19.31503,51.92636,27.37635,46.68877,60.23064,-22.43886,59.06487,-24.12051,49.56319,-12.64415,43.6768,0.30326,12.26945,22.01128,6.19104,43.16184,7.63224,51.85173,13.32143,61.85971,44.21729,75.05798,66.24655,56.87083,73.01474,36.15078,75.04478,-0.78735,69.30954,-11.74341,6.99788,18.18582,20.0443,26.86685,22.80408,30.99572,22.46033,35.27834,43.01311,31.46513,52.07494,22.3883,45.20529,-2.49372,17.27682,-13.33767,53.83313,18.04973,39.67324,20.46646,46.62216,-6.53596,25.05461,16.29762,16.19243,53.46538,29.99724,40.46952,53.40778,24.69133,19.21873,53.70358,-0.95757,3.02103,-0.80464,-0.22341,21.79544,9.35772,-3.54565,-0.69027,2.67444,-1.88193,2.61572,9.03735,29.46332,45.87617,15.63039,50.60509,8.84979,30.49088,45.61912,-5.54185,47.36246,-9.72351,47.37259,-12.98466,52.4026,-20.54906,51.18359,-17.02686,57.92318,-20.2846,70.05144,-15.06292,75.13141,-2.89599,76.28175,13.67413,72.22368,36.26307,70.05863,43.86377,69.19043,56.41232,45.50443,74.99865,35.11581,75.36394,27.88362,73.4762,12.33069,64.75158,5.57372,55.85366,7.07925,54.42634,8.14337,49.23374,5.74281,45.68628,3.89062,35.15369,8.62836,20.24689,4.20003,32.71037,9.8178,48.15385,6.48223,52.38819,26.69831,72.78359,46.9562,72.12347,71.15749,42.74264,76.62032,14.9936,64.92282,12.31555,57.53946,30.24706,47.98927,51.2152,42.25758,65.78861,37.15187,71.33881,14.4293,57.7468,12.64787,59.88387,13.97566,66.32811,16.70258,68.19404,21.57089,68.13657,38.05918,62.8656,44.90455,46.17664,51.12674,27.31055,59.68296,10.3176]}],"burst02":[{},{"time":0.4667,"vertices":[8.44717,-2.62617,-1.66246,-4.14964,2.94254,-7.04154,5.43728,-12.78315,6.10036,-18.48962,5.03693,-22.15525,6.39308,-34.54789,1.08167,-12.05763,0.60547,-7.26038,2.70239,-7.06268,0.03775,-4.26562,-1.33082,-5.03856,-7.04628,-8.33144,-1.5994,-7.02762,-4.01076,-8.73213,-6.70195,-2.17461,-5.16911,-3.3867,0,0,0,0,0,0.00001,0,0,0,0,53.98294,8.16872,4.19673,-12.93417,5.58393,-0.11341,0.00002,0.00002,3.54045,2.07458,-15.35167,-4.98116,-15.42085,-5.00362,-13.12766,-4.25951,-8.88725,-2.88364,-3.40128,-1.10363,0,0,0,0,0,0,0,0,-3.08499,-1.00098,-7.07841,-2.29671,-11.06462,-3.59012,-13.84425,-4.49206,-13.59177,-4.41013,-11.64641,-3.77888,-11.41626,-3.70422,-6.25803,-2.03055,-0.99994,-0.32445,0,0,-14.72412,-4.77753,-0.06894,0.21213,0,0,-1.03012,-0.33424,-5.19464,-1.68551,-9.35083,-3.03407,-12.43961,-4.03627,-14.68713,-4.76553,-9.12651,-2.96127,-6.09276,-1.9769,-2.87253,-0.93205,-0.18369,-0.05959,0,0,0,0,0.63629,0.20649,2.61421,0.61389,0,0,0,0,-0.63936,-0.20744,-2.90279,-0.94186,-5.07756,-1.64752,-7.18002,-2.3297,-9.64198,-3.12851,-11.40277,-3.69983,-13.09242,-4.24809,-14.50929,-4.70782,-15.63478,-5.07301,-16.40764,-5.32377,-16.40135,-5.32175,-15.46948,-5.0194,-7.22081,-2.34293,5.35602,-16.36661,3.39207,-12.22933,5.45975,-6.70846,-2.92706,-5.23907,4.60506,-4.3091,4.54066,-2.75301,8.24759,-13.26923,36.28853,8.47557,2.93465,-22.105,3.06993,-32.32308,4.05841,-8.09658,1.39204,-3.86498,2.66722,0.06961,-1.26559,-1.43877,-3.96754,-2.06429,-4.6916,-3.65018,-1.49208,-4.39505,-1.9169,-4.33731,-8.59688,-3.35921]},{"time":0.5667,"offset":2,"vertices":[0.55742,4.5388,4.61954,11.94549,19.69821,11.25572,17.98706,9.40695,18.03621,4.71638,16.60943,-4.66644,12.07512,-4.87935,8.63758,-1.62173,11.13341,-1.9513,9.96385,-3.6386,10.91671,-5.69052,2.31715,-4.1672,0,0,0,0,0,0,0,0,0,0,0,0,0,0.00001,0,0,14.68109,-2.59258,46.7749,-16.08387,-11.40092,-22.3923,-14.34756,-5.54877,0.00002,0.00002,8.12662,0.38493,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.04826,0.14849,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.4454,0.14454,1.82995,0.42972,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15.96719,9.33518,16.30797,12.00871,7.02026,10.42611,1.17055,5.32005,-0.68335,1.22897,-6.86345,-5.12416,1.56529,-11.20049,36.93623,-9.74122,15.83783,4.29235,14.99457,-2.1606,12.00398,-2.84351,9.549,-2.46903,8.39969,-3.43277,8.83499,-3.87868,7.49269,-6.96484]},{"time":0.8,"vertices":[-0.26183,5.74663,-2.28078,7.20129,5.75565,14.6267,23.17381,9.11411,26.18849,3.43199,22.84949,2.17424,22.67816,-7.66858,20.79485,-5.90974,19.69392,0.13771,13.30333,-9.10894,15.08726,-8.277,-0.23314,-22.08472,-11.88261,-14.95191,-2.10322,-12.20714,-4.33761,-9.91582,0,0,0,0,0,0,0,0,0,0.00001,0,0,0,0,38.42324,-12.28841,-12.92033,-4.63375,-3.80882,7.19092,0.00002,0.00002,24.66497,1.41425,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.62634,5.77114,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,18.23075,7.88931,19.32123,6.37689,19.32123,6.37689,19.32123,6.37689,24.49674,5.37766,19.34924,10.11178,8.89436,12.75521,0.25719,6.51787,-3.04557,5.42747,-2.94852,5.1211,-9.0126,-3.34344,19.91956,-11.78638,21.28212,2.96197,21.91681,-4.27737,20.64548,-1.31097,20.69061,3.78262,14.9139,-6.25056,15.20506,-7.17007,1.61307,-20.79971,-5.61815,-14.72208,-1.40562,-12.31559,-3.77174,-9.03355]},{"time":1.2667,"vertices":[-0.60118,40.21666,13.21951,39.18164,29.47369,45.0315,56.76008,32.39156,63.27009,21.81733,62.03564,15.01811,64.11848,-1.57637,62.48392,-5.05509,62.0004,-3.32251,53.43962,-21.25206,49.83433,-22.08006,26.56342,-42.88687,6.75268,-37.41826,11.62914,-34.05639,3.79571,-30.49985,1.76681,-5.8581,3.41879,-2.25661,0,0,0,0,0,0.00001,0,0,0,0,20.66207,1.18949,-38.5212,-16.28236,-28.98003,29.90348,0.00002,0.00002,54.44005,-6.72733,76.40656,18.00246,72.74952,28.6037,61.75354,48.36436,52.07378,54.99824,44.73683,49.02092,38.58128,33.86156,43.56477,18.99028,49.0436,2.25867,58.29994,-10.54558,67.76347,-17.15362,75.02335,-17.88821,79.06823,-10.23586,79.9537,0.7427,61.61975,50.98802,56.37247,56.29552,57.21532,52.81435,47.85279,54.11208,43.02682,42.18958,42.66728,27.4078,68.10815,38.25859,45.63157,9.92648,53.55116,-5.10542,63.43682,-14.96118,71.54783,-17.55838,77.39485,-13.83996,79.59405,-5.05167,78.67317,8.41954,51.17966,58.6673,46.29943,57.67178,42.59077,52.48447,40.6232,44.98309,40.39751,36.26408,40.96192,28.17683,41.85824,19.31689,44.05618,9.44077,52.41975,-6.643,58.35233,-13.4062,63.75209,-17.73891,68.67623,-20.59882,72.70447,-21.37257,76.00245,-20.44646,76.86877,-16.17442,78.71053,-12.37278,80.48174,-7.37115,81.70876,-0.96352,80.67078,7.40256,76.75462,20.30871,74.09646,29.57249,68.3063,41.31281,59.06873,14.56583,60.39012,23.31939,51.33841,32.70986,32.27072,41.44254,15.71152,37.21485,6.32091,36.14613,-22.47176,26.23696,-28.75047,-8.63012,2.37231,-1.98877,61.72414,16.07718,64.43069,2.65221,66.21148,1.35978,67.08562,0.58398,57.63603,-20.88151,52.01707,-22.67115,28.06324,-40.17508,13.56615,-35.38068,12.38645,-33.03455,4.29317,-28.45454,9.75845,-17.98366]}],"burst03-fg":[{"time":1.3},{"time":1.3333,"vertices":[4.92407,33.99561,5.00798,33.57872,5.12328,33.00543,5.48637,31.20123,6.74828,24.92905,7.53403,21.02349,8.43697,16.53606,9.75219,9.99911,10.97427,3.92524,-0.00002,0,-0.00002,0,-0.00002,0,6.69909,2.38814,23.66046,-7.08865,22.70099,-22.82669,25.84168,-38.43984,25.64882,-49.91971,20.14206,-58.28368,8.67352,-60.34131,-1.09209,-57.56573,-8.83326,-50.35564,-14.82484,-42.2756,-12.06253,-41.57684,-17.29308,-34.22359,-19.82881,-27.60732,-18.33358,-19.91221,-11.6693,-25.78771,-6.03783,-24.52315,-4.7291,-15.94568,-6.66511,-3.77949,3.41057,-5.9924,-4.38662,-6.14209,-0.00002,0,-0.00002,0,-0.00002,0,-0.00002,0,-0.00002,0,-0.00002,0,-0.00002,0,-0.00002,0,8.67569,15.34931,7.7352,20.02387,7.10682,23.14697,6.23163,27.49693,5.89768,29.15663,5.02141,33.51196,4.86009,34.3138,5.35844,31.83678,5.43989,31.43188,6.02796,28.50932,6.73043,25.01767,7.71515,20.12349,7.06047,23.37724,8.10455,18.18814,6.55185,25.90531,6.07323,28.28412,6.33308,26.99249,7.29481,22.21268,6.05077,28.39568,6.89485,24.20049,7.49718,-50.14923,5.64434,-40.11147,6.43589,-29.96807,7.76658,-19.08035,8.51981,-5.43632,8.71392,15.15949,9.90703,9.22946,-0.00002,0,-0.00002,0,-0.00002,0,4.88259,-2.24099]},{"time":1.3667,"vertices":[-70.41705,34.37442,-78.85695,44.50488,-83.04317,50.59951,-83.03895,55.86251,-75.4558,61.44423,-66.91991,62.35073,-56.43176,52.79782,-49.40193,42.13981,-38.02593,31.36853,-36.40095,25.16965,-30.55515,4.87659,-28.86868,-3.53624,-19.78248,-62.75611,-37.32115,-73.26339,-60.33855,-92.66755,-86.04379,-111.39024,-105.67757,-124.10738,-126.65024,-124.89159,-144.66449,-110.3586,-151.47311,-95.54165,-147.43042,-81.09411,-139.5922,-68.56383,-134.87042,-71.95443,-127.46339,-60.85379,-118.12346,-53.82679,-101.78126,-51.71567,-103.03056,-58.85463,-94.39997,-64.4724,-81.31036,-60.19676,-66.38394,-51.08508,-57.89868,-27.74495,-43.89296,3.38737,-32.66597,23.82576,-22.28335,10.90652,-14.9893,4.4808,-11.54865,12.23211,-0.40178,14.2431,-0.00002,0,-0.00002,0,-11.02068,-9.72176,-3.22299,19.71565,-14.78654,20.99318,-28.6498,21.94137,-34.75952,15.69332,-41.48957,17.95427,-55.62792,20.16899,-62.22404,24.79391,-58.0971,27.66769,-72.57096,44.13479,-70.28927,50.25853,-49.35699,38.34693,-46.55645,35.51911,-61.3503,49.97305,-53.62879,46.21342,-41.91972,27.90186,-53.5436,33.23147,-72.78381,52.92426,-64.69146,54.7669,-61.84596,41.67316,-54.95725,46.64687,-126.91089,-103.25671,-110.28194,-95.31543,-90.1948,-90.92423,-73.04885,-77.37818,-51.17789,-63.47858,-35.13591,37.52227,-23.79946,28.8777,-26.21375,17.88486,-44.01949,5.75304,-45.86902,6.67058,-40.1846,-33.0392,-49.56657,-2.09372,-25.76036,3.62906]},{"time":1.4,"vertices":[-131.45187,-51.45319,-148.6036,-31.17475,-157.28079,-18.14236,-158.10901,-3.50842,-145.73499,23.1334,-130.38083,34.89569,-111.24065,27.88556,-98.81904,19.49816,-80.39163,21.4846,-69.79592,33.42732,-69.73902,21.37726,-75.4065,3.71175,-75.45967,-33.76716,-104.78784,-42.37991,-145.88391,-72.17972,-196.42032,-103.78943,-233.52261,-122.97195,-274.29242,-115.09692,-310.17548,-74.71429,-323.07007,-38.21873,-313.74908,-6.95321,-296.78574,18.41047,-287.35056,8.77947,-271.37347,31.06201,-251.72612,43.2858,-218.07848,41.48261,-224.05377,25.88311,-207.60165,9.11362,-181.51706,11.20023,-150.47711,23.30289,-121.16852,39.72626,-84.64459,50.34229,-64.03001,58.64463,-49.08698,21.39314,-29.97859,8.96159,-23.09727,24.46422,-0.80354,28.48621,-0.00002,0,-0.00002,0,-22.04134,-19.44353,-8.44522,-28.56804,-26.14128,-40.86536,-52.5583,-47.01276,-62.81779,-70.08608,-75.57105,-70.08508,-101.96013,-77.13113,-114.84211,-70.43469,-107.6982,-58.59265,-136.96852,-26.33374,-133.73901,-7.18115,-93.29829,-20.74547,-89.84132,-13.69598,-118.09528,5.3364,-104.90922,11.42681,-77.94287,-42.83564,-100.19595,-38.87466,-139.40984,1.65357,-125.33388,17.3967,-116.82629,-23.16144,-104.92984,-2.90322,-273.27762,-65.72347,-238.62474,-54.36601,-197.13762,-52.49186,-166.77441,-32.02632,-125.5725,-12.32875,-68.02176,-1.8007,-49.42844,3.08038,-47.80422,9.75848,-88.03896,11.50607,-81.04648,23.43208,-104.64706,9.40743,-91.47524,18.19736,-51.5207,7.25812]},{"time":1.4333,"vertices":[-141.69418,-89.91953,-162.94035,-73.22871,-174.02481,-61.96138,-176.70424,-47.25473,-165.87697,-15.46182,-150.31453,0.60798,-127.95433,3.29795,-107.35299,8.17166,-84.27829,13.87565,-73.79984,33.52156,-93.42509,20.00843,-104.14333,8.25272,-119.50783,-11.15981,-152.42647,-6.79323,-196.82411,-16.03884,-248.4448,-34.77563,-292.5845,-39.65245,-334.42374,-28.66984,-362.43875,2.27655,-369.7325,31.38538,-355.0198,54.85098,-335.47263,74.67649,-317.94748,65.71158,-301.67886,80.76504,-285.0823,90.70033,-254.27272,92.3989,-258.01846,76.11541,-247.27003,62.99675,-222.94234,58.88057,-192.16331,61.03712,-161.14046,66.73997,-119.14156,67.93156,-93.84712,67.74237,-63.30359,29.2448,-46.31255,24.5336,-34.45641,40.38158,-12.44804,47.10272,-4.58382,31.15228,-0.00002,0,-28.90098,-28.60614,-18.64926,-40.53111,-33.24733,-53.89742,-55.80206,-67.21851,-64.24731,-93.07156,-78.21889,-96.00934,-106.27556,-109.26358,-121.19909,-105.41518,-114.80692,-91.7137,-150.78009,-65.6193,-149.56157,-45.37782,-103.61493,-49.86674,-98.50516,-37.39895,-133.44264,-26.61807,-118.11534,-13.91721,-84.11749,-68.81604,-108.97595,-69.91183,-156.42957,-35.92745,-142.50053,-15.33772,-129.09789,-57.74816,-118.51842,-34.38369,-322.1694,9.66158,-285.97684,16.62874,-246.23688,16.78676,-212.51012,19.22134,-169.27168,26.47505,-77.05382,-18.21582,-54.9422,-8.34502,-43.95517,9.95325,-102.89044,9.74546,-106.88592,19.99181,-139.58008,33.09819,-117.31013,24.49653,-53.92569,7.67862]},{"time":1.4667,"vertices":[-151.93654,-128.386,-177.27715,-115.28283,-190.76888,-105.78056,-195.29955,-91.00121,-186.01903,-54.05718,-170.2483,-33.67986,-144.66808,-21.28976,-115.88697,-3.15488,-88.16496,6.26667,-77.80376,33.6158,-117.11124,18.6396,-132.88025,12.79369,-159.7973,3.90851,-195.60782,6.3617,-244.76602,3.83169,-294.06616,-7.86333,-335.26804,-6.50256,-376.0525,8.01762,-396.54102,38.43305,-399.33905,69.30361,-381.08762,92.64108,-360.7377,113.81663,-336.11017,102.47171,-320.78897,115.28491,-308.1643,126.82421,-281.5598,134.00885,-283.22552,112.60371,-272.02405,92.61847,-247.27502,87.17693,-212.6863,87.1832,-179.44025,88.79045,-136.88281,86.75306,-107.59129,77.63562,-77.52026,37.09649,-62.64655,40.10567,-45.81557,56.299,-24.09258,65.7193,-9.16763,62.30466,-0.00002,0,-35.76065,-37.76878,-28.85333,-52.49422,-40.35339,-66.92953,-59.04583,-87.42433,-65.67684,-116.05714,-80.86673,-121.93368,-110.591,-141.39613,-127.55609,-140.3958,-121.91566,-124.83486,-164.59172,-104.905,-165.38417,-83.57462,-113.93161,-78.98813,-107.16903,-61.10201,-148.79005,-58.57266,-131.32152,-39.26133,-90.29212,-94.79652,-117.75597,-100.9491,-173.44936,-73.50861,-159.66725,-48.07225,-141.36952,-92.33501,-132.10704,-65.86427,-355.24713,47.61027,-319.47357,53.08123,-283.15186,52.52898,-249.21744,44.0771,-207.43579,47.6265,-86.08591,-34.631,-60.45599,-19.77045,-40.10611,10.14803,-117.74198,7.98483,-132.72545,16.55154,-171.94208,51.63213,-143.14511,30.79572,-56.33069,8.09913]},{"time":1.5,"vertices":[-151.93654,-128.386,-178.15945,-120.69106,-192.92516,-113.44209,-190.94879,-101.02086,-192.72208,-73.83811,-177.91005,-58.05946,-156.84607,-41.63752,-124.71217,-15.88078,-88.16496,6.26667,-77.80376,33.6158,-117.11124,18.6396,-132.88025,12.79369,-166.30356,17.1678,-202.37338,33.99169,-248.4867,39.35126,-298.22083,35.41038,-342.2739,38.15667,-376.2425,57.15323,-394.76685,89.66321,-396.4634,117.82472,-366.11874,131.6904,-350.1521,145.58844,-337.18158,136.10063,-322.84595,147.00995,-307.85916,152.25815,-286.51025,148.05208,-289.30066,126.24805,-280.40997,110.64816,-250.5748,99.70715,-213.0011,95.76285,-181.55362,94.97186,-136.88281,86.75306,-107.59129,77.63562,-77.52026,37.09649,-62.64655,40.10567,-45.81557,56.299,-24.09258,65.7193,-9.16763,62.30466,-0.00002,0,-35.76065,-37.76878,-28.85333,-52.49422,-40.35339,-66.92953,-59.04583,-87.42433,-65.67684,-116.05714,-80.86673,-121.93368,-110.591,-141.39613,-127.55609,-140.3958,-121.91566,-124.83486,-165.76842,-113.96886,-167.63979,-101.10149,-115.25388,-90.41172,-109.6324,-68.44429,-153.7794,-79.7434,-136.24835,-53.94591,-92.79071,-99.00262,-119.34332,-105.12422,-176.21503,-88.60848,-164.40157,-68.65309,-142.85818,-104.04455,-135.7806,-84.29303,-355.13516,87.35067,-323.20538,85.13422,-291.3755,76.85062,-249.22365,71.40271,-207.7596,63.4704,-90.05422,-43.44156,-60.45599,-19.77045,-40.10611,10.14803,-117.74198,7.98483,-132.72545,16.55154,-172.88249,59.08895,-143.14511,30.79572,-56.33069,8.09913]},{"time":1.5667,"vertices":[-141.01382,-98.47987,-163.29068,-91.81051,-175.38876,-85.46864,-172.25879,-78.55413,-175.35114,-57.08593,-162.90741,-46.73228,-145.45776,-37.89273,-118.06281,-20.81581,-88.16496,6.26667,-77.80376,33.6158,-117.11124,18.6396,-132.88025,12.79369,-166.30356,17.1678,-202.37338,33.99169,-248.4867,39.35126,-298.22083,35.41038,-342.2739,38.15667,-376.2425,57.15323,-394.76685,89.66321,-396.4634,117.82472,-366.11874,131.6904,-350.1521,145.58844,-337.18158,136.10063,-322.84595,147.00995,-307.85916,152.25815,-286.51025,148.05208,-289.30066,126.24805,-280.40997,110.64816,-250.5748,99.70715,-213.0011,95.76285,-181.55362,94.97186,-136.88281,86.75306,-107.59129,77.63562,-77.52026,37.09649,-62.64655,40.10567,-45.81557,56.299,-24.09258,65.7193,-9.16763,62.30466,-0.00002,0,-35.76065,-37.76878,-28.85333,-52.49422,-40.33588,-57.6875,-59.49745,-72.73655,-68.22011,-94.07352,-81.45741,-97.65981,-108.25979,-110.71755,-122.1894,-108.98652,-115.76294,-97.5073,-153.2168,-87.96709,-155.53464,-79.2407,-109.34637,-73.36073,-104.9814,-56.50557,-144.15125,-65.16235,-127.87166,-46.01543,-90.04642,-79.55262,-112.61389,-82.94587,-161.67697,-69.71903,-152.07272,-56.18338,-133.82422,-82.11716,-127.63764,-68.04272,-355.13516,87.35067,-323.20538,85.13422,-291.3755,76.85062,-249.22365,71.40271,-207.7596,63.4704,-86.68856,-37.81656,-60.45599,-19.77045,-40.10611,10.14803,-117.74198,7.98483,-132.72545,16.55154,-172.88249,59.08895,-143.14511,30.79572,-56.33069,8.09913]},{"time":1.6,"vertices":[-126.68488,-112.62257,-153.16333,-110.64824,-163.77899,-100.76437,-164.26962,-88.73792,-168.4284,-60.11137,-164.98157,-48.24212,-151.00478,-40.58978,-119.63441,-19.75203,-90.57693,4.81735,-77.80376,33.6158,-117.11124,18.6396,-132.88025,12.79369,-166.30356,17.1678,-202.37338,33.99169,-248.4867,39.35126,-298.22083,35.41038,-342.2739,38.15667,-376.2425,57.15323,-394.76685,89.66321,-396.4634,117.82472,-366.11874,131.6904,-350.1521,145.58844,-337.18158,136.10063,-322.84595,147.00995,-307.85916,152.25815,-286.51025,148.05208,-289.30066,126.24805,-280.40997,110.64816,-250.5748,99.70715,-213.0011,95.76285,-181.55362,94.97186,-136.88281,86.75306,-107.59129,77.63562,-77.52026,37.09649,-62.64655,40.10567,-45.81557,56.299,-24.09258,65.7193,-9.16763,62.30466,-0.00002,0,-35.76065,-37.76878,-28.85333,-52.49422,-43.02149,-59.61117,-60.27876,-66.33749,-66.19814,-95.96494,-75.72632,-99.5706,-99.12891,-126.89813,-111.4478,-118.78793,-108.13398,-108.09357,-144.74487,-100.57414,-148.9693,-85.6284,-109.34637,-73.36073,-104.97292,-53.80267,-144.15125,-65.16235,-127.87166,-46.01543,-89.42258,-80.5159,-105.08825,-88.26041,-154.57571,-76.8546,-155.04297,-57.3479,-127.3371,-86.70671,-127.63764,-68.04272,-355.13516,87.35067,-323.20538,85.13422,-291.3755,76.85062,-249.22365,71.40271,-207.7596,63.4704,-86.68856,-37.81656,-60.45599,-19.77045,-40.10611,10.14803,-117.74198,7.98483,-132.72545,16.55154,-172.88249,59.08895,-143.14511,30.79572,-56.33069,8.09913]},{"time":1.6333,"vertices":[-108.63416,-124.91017,-133.87291,-124.251,-142.6294,-115.84753,-143.20923,-102.44234,-148.82416,-70.71955,-137.87033,-52.09589,-131.98907,-38.28564,-115.27725,-15.78029,-90.57693,4.81735,-77.80376,33.6158,-117.11124,18.6396,-132.88025,12.79369,-166.30356,17.1678,-202.37338,33.99169,-248.4867,39.35126,-298.22083,35.41038,-342.2739,38.15667,-376.2425,57.15323,-394.76685,89.66321,-396.4634,117.82472,-366.11874,131.6904,-350.1521,145.58844,-337.18158,136.10063,-322.84595,147.00995,-307.85916,152.25815,-286.51025,148.05208,-289.30066,126.24805,-280.40997,110.64816,-250.5748,99.70715,-213.0011,95.76285,-181.55362,94.97186,-136.88281,86.75306,-107.59129,77.63562,-77.52026,37.09649,-62.64655,40.10567,-45.81557,56.299,-24.09258,65.7193,-9.16763,62.30466,-0.00002,0,-35.76065,-37.76878,-28.85333,-52.49422,-43.02149,-59.61117,-49.74921,-69.9977,-55.65605,-99.59956,-62.96867,-105.93137,-85.68259,-135.36412,-94.51278,-130.98228,-92.37325,-118.09144,-126.38745,-112.6104,-130.97462,-96.28339,-94.80884,-79.84474,-92.80672,-56.23335,-127.23772,-71.82628,-112.56506,-46.76895,-75.99547,-86.58072,-89.98784,-95.99784,-136.7193,-86.29273,-136.30603,-63.55061,-110.68084,-96.0786,-112.13541,-75.23594,-355.13516,87.35067,-323.20538,85.13422,-291.3755,76.85062,-249.22365,71.40271,-207.7596,63.4704,-83.78013,-35.61229,-60.45599,-19.77045,-40.10611,10.14803,-117.74198,7.98483,-132.72545,16.55154,-172.88249,59.08895,-143.14511,30.79572,-56.33069,8.09913]}]},"splat-fg":{"splat03":[{"time":1.4667,"offset":2,"vertices":[10.0782,-14.45856,5.80107,-64.63068,-4.33017,-85.72516,-0.56895,-26.34158,20.55198,46.75519,0.00001,-0.00006,5.4104,-18.72467]},{"time":1.6667,"vertices":[-30.33957,-86.29268,19.83765,-119.15993,3.91198,-199.36053,-24.9324,-176.0454,-23.386,-111.6241,19.24028,18.19496,-75.0881,-2.30758,13.37083,35.55253,-3.13088,47.11062,46.50816,-10.46628,29.48812,-24.96087]},{"time":1.7,"vertices":[47.91341,-94.33224,64.14584,-71.34769,45.37762,-89.88364,-20.35247,-63.58272,-19.63882,-19.61007,20.59519,91.7681,-76.96143,-48.30743,-7.3912,-76.66309,-7.51576,-60.56274,37.98726,-119.19406,-35.91211,-79.69955]}]}}},"drawOrder":[{"time":1.4333,"offsets":[{"slot":"burst-bg","offset":6},{"slot":"splat-bg","offset":6}]},{"time":1.6333,"offsets":[{"slot":"burst-bg","offset":7},{"slot":"backarmor","offset":-9},{"slot":"splat-fg","offset":8}]},{"time":1.6667,"offsets":[{"slot":"metaljaw-bg","offset":21},{"slot":"burst-bg","offset":6},{"slot":"backarmor","offset":-9},{"slot":"splat-fg","offset":6},{"slot":"metaljaw","offset":5}]},{"time":1.7667,"offsets":[{"slot":"metaljaw-bg","offset":10},{"slot":"burst-bg","offset":7},{"slot":"backarmor","offset":-8},{"slot":"splat-fg","offset":-14},{"slot":"metaljaw","offset":-6}]}],"events":[{"time":1.2667,"name":"squish"}]},"hit":{"slots":{"eye-highlight":{"attachment":[{"name":null}]}},"bones":{"hip":{"rotate":[{"angle":8.56},{"time":0.3333,"angle":17.04}],"translate":[{"x":-17.33,"y":19.69},{"time":0.3333,"x":-2.36,"y":6.3}]},"metaljaw":{"rotate":[{"angle":53.35},{"time":0.3333,"angle":22.34}],"translate":[{"x":-196.31,"y":-132.59},{"time":0.3333,"x":-111.57,"y":-37.47}]},"back-thigh":{"rotate":[{"angle":71.89},{"time":0.3333,"angle":7.6}],"translate":[{"x":-18.91,"y":2.36},{"time":0.3333}]},"body":{"rotate":[{"angle":79.37},{"time":0.3333,"angle":24.17}]},"front-thigh":{"rotate":[{"angle":15.56},{"time":0.3333,"angle":-7.16}]},"back-shin":{"rotate":[{"angle":17.2},{"time":0.3333,"angle":0.31}]},"front-shin":{"rotate":[{"angle":11.67},{"time":0.3333,"angle":-25.5}]},"front-upper-arm":{"rotate":[{"angle":43.23},{"time":0.3333,"angle":-61.4}]},"head":{"rotate":[{"angle":15.26},{"time":0.3333,"angle":1.58}],"translate":[{},{"time":0.3333,"x":-8.33,"y":-13}],"scale":[{"x":1.5,"y":0.834},{"time":0.3333,"x":0.953,"y":1.318}]},"upper-back-arm":{"rotate":[{"angle":-239.2},{"time":0.3333,"angle":-335.27}]},"front-foot":{"rotate":[{},{"time":0.3333,"angle":33.66}]},"front-lower-arm":{"rotate":[{"angle":30.24},{"time":0.3333,"angle":-72.16}]},"lower-back-arm":{"rotate":[{"angle":-31.93},{"time":0.3333,"angle":-36.5}]}}},"jump":{"slots":{"eye-highlight":{"attachment":[{"name":null}]}},"bones":{"front-thigh":{"rotate":[{"angle":26.18},{"time":0.1,"angle":-77.7},{"time":0.2333,"angle":-99.82},{"time":0.4,"angle":-96.94},{"time":0.4333,"angle":-99.54},{"time":0.5,"angle":-40.21},{"time":0.6667,"angle":-15.46}]},"front-shin":{"rotate":[{"angle":-29.42},{"time":0.1,"angle":43.97},{"time":0.2333,"angle":-5.79},{"time":0.4,"angle":45.02},{"time":0.4333,"angle":45.34},{"time":0.5,"angle":-20.45},{"time":0.6667,"angle":-38.85}]},"back-thigh":{"rotate":[{"angle":-83.38},{"time":0.1,"angle":46.33},{"time":0.2437,"angle":-47.1},{"time":0.4,"angle":-80.1},{"time":0.4333,"angle":-80.25},{"time":0.5,"angle":-19.81},{"time":0.6667,"angle":8.99}],"translate":[{},{"time":0.4,"y":6.83}]},"hip":{"rotate":[{},{"time":0.4333,"angle":-23.67},{"time":0.5,"angle":-5.92}],"translate":[{"y":-13.1},{"time":0.0667,"y":12.04},{"time":0.1,"y":-2.1},{"time":0.1667,"y":7.95},{"time":0.4333,"x":5.37,"y":-9.07},{"time":0.5,"y":-2.89}]},"metaljaw":{"rotate":[{"angle":28.25},{"time":0.1,"angle":5.51},{"time":0.2333,"angle":-1.94},{"time":0.4333,"angle":-9.19},{"time":0.5,"angle":18.31},{"time":0.6667,"angle":10.46}],"translate":[{"x":-54.5,"y":-12.42},{"time":0.1,"x":-16.52,"y":-5.35},{"time":0.2333,"x":31.77,"y":9.62},{"time":0.4333,"x":67.1,"y":22.11},{"time":0.5,"x":82.31,"y":-61.06},{"time":0.6667,"x":39.09,"y":4.74}],"scale":[{},{"time":0.2333,"x":1.23},{"time":0.4333,"x":1.555},{"time":0.5,"x":1.23},{"time":0.6667}]},"body":{"rotate":[{"angle":17.89},{"time":0.5,"angle":-42.29},{"time":0.6667,"angle":-12.34}]},"front-upper-arm":{"rotate":[{"angle":-11.37},{"time":0.1,"angle":-287.29},{"time":0.2333,"angle":-268.61},{"time":0.4333,"angle":4.09},{"time":0.5,"angle":6.27},{"time":0.6667,"angle":12.39}]},"front-lower-arm":{"rotate":[{"angle":9.75},{"time":0.2333,"angle":-22.81},{"time":0.4333,"angle":-72.32},{"time":0.5,"angle":-72.27},{"time":0.6667,"angle":3.89}]},"upper-back-arm":{"rotate":[{"angle":-339.16},{"time":0.1,"angle":-79.86},{"time":0.2333,"angle":-291.77},{"time":0.5,"angle":-71.4},{"time":0.6667,"angle":-341.82}]},"lower-back-arm":{"rotate":[{"angle":-12.56},{"time":0.2333,"angle":-33.93},{"time":0.5,"angle":-74.21},{"time":0.6667,"angle":7.46}]},"back-shin":{"rotate":[{},{"time":0.2437,"angle":-38.14},{"time":0.4,"angle":7.23},{"time":0.4333,"angle":50.06},{"time":0.5,"angle":-11.95},{"time":0.6667,"angle":4.26}]},"head":{"rotate":[{},{"time":0.2333,"angle":15.45},{"time":0.4333,"angle":48.8},{"time":0.5,"angle":21.66},{"time":0.6667,"angle":22.07}],"translate":[{},{"time":0.2333,"x":16.33,"y":-5.62},{"time":0.4333,"x":-4.06,"y":-12.29},{"time":0.5,"x":-19.69,"y":0.97,"curve":"stepped"},{"time":0.6667,"x":-4.06,"y":-12.29}],"scale":[{},{"time":0.0667,"x":0.891},{"time":0.4333,"x":1.606},{"time":0.5,"x":1.519},{"time":0.6667}]},"back-foot":{"rotate":[{},{"time":0.4333,"angle":-91.65},{"time":0.5,"angle":24.5}]},"front-foot":{"rotate":[{},{"time":0.1,"angle":-31.86},{"time":0.4,"angle":17.82},{"time":0.4333,"angle":-59.24},{"time":0.6667,"angle":16.42}]}},"transform":{"jaw":[{"time":0.2667,"rotateMix":0,"translateMix":0.995,"scaleMix":0},{"time":0.4667,"rotateMix":0,"translateMix":0.005,"scaleMix":0},{"time":0.6667,"rotateMix":0,"translateMix":0.995,"scaleMix":0}]},"deform":{"default":{"head":{"head":[{"time":0.2333},{"time":0.4333,"offset":8,"vertices":[0.76541,7.08882,-20.57962,30.84937,-14.24311,3.36091,18.8465,-57.61098,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18.8465,-57.61098,-14.24311,3.36091,-18.3862,20.67056,-0.17242,1.30704]},{"time":0.5}]}}}},"run":{"slots":{"eye-highlight":{"attachment":[{"name":null}]}},"bones":{"front-shin":{"rotate":[{"angle":46.48},{"time":0.0333,"angle":-19.25},{"time":0.0667,"angle":-16.44},{"time":0.1,"angle":35.98},{"time":0.1333,"angle":-13.49},{"time":0.1667,"angle":-27.81},{"time":0.2333,"angle":-46.66},{"time":0.2667,"angle":-62.65},{"time":0.3333,"angle":-26.02},{"time":0.3667,"angle":-2.18},{"time":0.4,"angle":46.48}]},"back-thigh":{"rotate":[{"angle":-86.45},{"time":0.0333,"angle":-62.71},{"time":0.0667,"angle":-7.96},{"time":0.1,"angle":8.31},{"time":0.1333,"angle":29.38},{"time":0.1667,"angle":15.43},{"time":0.2,"angle":2.12},{"time":0.2333,"angle":-0.97},{"time":0.2667,"angle":-38.85},{"time":0.3,"angle":-63.94},{"time":0.3333,"angle":-88.2},{"time":0.3667,"angle":-76.84},{"time":0.4,"angle":-86.45}],"translate":[{},{"time":0.3333,"x":-5.82},{"time":0.4}]},"back-shin":{"rotate":[{"angle":-17.82},{"time":0.0333,"angle":-31.8},{"time":0.0667,"angle":-48.72},{"time":0.1,"angle":-29.52},{"time":0.1333,"angle":-15.23},{"time":0.1667,"angle":16.27},{"time":0.2,"angle":42.32},{"time":0.2333,"angle":-13.7},{"time":0.2667,"angle":1.27},{"time":0.3,"angle":34.49},{"time":0.3333,"angle":-15.12},{"time":0.3667,"angle":-26.51},{"time":0.4,"angle":-17.82}]},"back-foot":{"rotate":[{"angle":-22.78},{"time":0.0333,"angle":-35.73},{"time":0.1,"angle":1.28},{"time":0.2,"angle":-7.86},{"time":0.2333,"angle":18.54},{"time":0.2667,"angle":16.13},{"time":0.3,"angle":-33.84},{"time":0.3333,"angle":-15.97},{"time":0.4,"angle":-22.78}]},"upper-back-arm":{"rotate":[{"angle":-19.69},{"time":0.1333,"angle":-10.14},{"time":0.2667,"angle":-5.43},{"time":0.4,"angle":-19.69}]},"body":{"rotate":[{"angle":-2.7},{"time":0.0667,"angle":-7.41},{"time":0.1333,"angle":-3.64},{"time":0.2,"angle":-2.7},{"time":0.2667,"angle":-7.41},{"time":0.3333,"angle":-3.64},{"time":0.4,"angle":-2.7}]},"metaljaw":{"rotate":[{"angle":-0.25},{"time":0.0333,"angle":2.21,"curve":0.181,"c2":0.38,"c3":0.75},{"time":0.0667,"angle":-8.85},{"time":0.1,"angle":2.21},{"time":0.1333,"angle":4.78},{"time":0.1667,"angle":7.18},{"time":0.2,"angle":-0.25},{"time":0.2333,"angle":-2.6,"curve":0.175,"c2":0.32,"c3":0.75},{"time":0.2667,"angle":-8.85},{"time":0.3,"angle":2.21},{"time":0.3333,"angle":4.78},{"time":0.3667,"angle":7.18},{"time":0.4,"angle":-0.25}],"translate":[{},{"time":0.0667,"x":-1.26,"y":-13.31},{"time":0.1333,"x":-5.86,"y":9.03},{"time":0.2,"x":-4.36,"y":-5.23},{"time":0.2667,"x":-2.61,"y":-4.36},{"time":0.3333,"x":-0.43,"y":1.3},{"time":0.4}]},"hip":{"translate":[{},{"time":0.0333,"y":-3.97},{"time":0.0667,"y":-1.35},{"time":0.1,"y":3.28},{"time":0.1333,"y":11.57},{"time":0.1667,"y":2.03},{"time":0.2,"y":-6.45},{"time":0.2333,"y":-3.97},{"time":0.2667,"y":-1.35},{"time":0.3,"y":3.28},{"time":0.3333,"y":11.57},{"time":0.3667,"y":2.03},{"time":0.4}]},"front-thigh":{"rotate":[{},{"time":0.0333,"angle":11.49},{"time":0.0667,"angle":-39.11},{"time":0.1,"angle":-67.88},{"time":0.1333,"angle":-87.79},{"time":0.1667,"angle":-74.85},{"time":0.2,"angle":-54.57},{"time":0.2333,"angle":-27.42},{"time":0.2667,"angle":2.48},{"time":0.3333,"angle":22.08},{"time":0.3667,"angle":23.18},{"time":0.4}],"translate":[{},{"time":0.0667,"x":6.81,"y":1.04},{"time":0.2,"x":23.4,"y":4.1},{"time":0.4}],"scale":[{"time":0.1333},{"time":0.2333,"x":0.886},{"time":0.4}]},"front-upper-arm":{"rotate":[{"curve":0.29,"c3":0.629,"c4":0.37},{"time":0.0667,"angle":-2.71,"curve":0.31,"c2":0.25,"c3":0.648,"c4":0.6},{"time":0.1333,"angle":-3.71,"curve":0.325,"c2":0.3,"c3":0.662,"c4":0.65},{"time":0.2,"angle":4.2,"curve":0.337,"c2":0.34,"c3":0.675,"c4":0.69},{"time":0.2667,"angle":0.94,"curve":0.351,"c2":0.4,"c3":0.689,"c4":0.74},{"time":0.3333,"angle":-3.36,"curve":0.37,"c2":0.62,"c3":0.709},{"time":0.4}]},"head":{"rotate":[{},{"time":0.0667,"angle":-2.94},{"time":0.2},{"time":0.2667,"angle":-2.94},{"time":0.4}],"scale":[{},{"time":0.0667,"x":0.819},{"time":0.2,"x":1.04},{"time":0.2667,"x":0.819},{"time":0.4}]},"front-foot":{"rotate":[{},{"time":0.0333,"angle":9.87},{"time":0.0667,"angle":12.87},{"time":0.1,"angle":-32.16},{"time":0.1667,"angle":-39.59},{"time":0.3333,"angle":13.67},{"time":0.4}]},"front-lower-arm":{"rotate":[{"curve":0.29,"c3":0.629,"c4":0.37},{"time":0.0667,"angle":-5.39,"curve":0.31,"c2":0.25,"c3":0.648,"c4":0.6},{"time":0.1333,"angle":-10.33,"curve":0.325,"c2":0.3,"c3":0.662,"c4":0.65},{"time":0.2,"angle":4.2,"curve":0.337,"c2":0.34,"c3":0.675,"c4":0.69},{"time":0.2667,"angle":-5.34,"curve":0.351,"c2":0.4,"c3":0.689,"c4":0.74},{"time":0.3333,"angle":-10.36,"curve":0.37,"c2":0.62,"c3":0.709},{"time":0.4}]},"lower-back-arm":{"rotate":[{},{"time":0.0667,"angle":-11.65},{"time":0.1333,"angle":-16.99},{"time":0.2,"angle":-7.9},{"time":0.2667,"angle":-8.99},{"time":0.3333,"angle":-10.59},{"time":0.4}]},"eye-pupil":{"scale":[{"x":1.399,"y":1.399}]}}}}},[0]]],0,0,[0],[-1],[21]],[[[85,"alien-pro",".atlas"],-1],0,0,[],[],[]],[[[9,"tile_iso_offset_with_tsx2","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<tileset name=\"tile_iso_offset_with_tsx2\" tilewidth=\"101\" tileheight=\"101\" tilecount=\"2\" columns=\"1\">\r\n <image source=\"tile_iso_offset_with_tsx2.png\" width=\"101\" height=\"202\"/>\r\n</tileset>\r\n"]],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["a78fff63-2db3-4f61-bd12-8d27e306c403"]}],[2],0,[],[],[]],[[{"name":"font","rect":{"x":3,"y":3,"width":497,"height":232},"offset":{"x":-4.5,"y":9},"originalSize":{"width":512,"height":256},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[1],[22]],[[[86,".bin"],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["b1175b57-92f3-4837-b54b-9fec5de20f32"]}],[2],0,[],[],[]],[[{"name":"tile_iso_offset","rect":{"x":0,"y":0,"width":256,"height":256},"offset":{"x":0,"y":0},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[1],[23]],[[[8,"cube"],[58,"cube",[[87,"Cube<MeshRenderer>",-2,[0,"90Dnri2+xC1qjUWyMvZavV"],[0],[46],1],[88,-3,[0,"55+Guu+BtEab0szJSuYf2G"]],[89,"cube<Animation>",-4,[0,"c1yb0+x4JCfaGqFYJApEJZ"]]],[1,"a2nXAQ1GdJC4l4aCOhBr2x",-1,0],[1,0,0,62.733],[1,100,100,100]]],0,[0,4,1,0,0,1,0,0,1,0,0,1,0,5,1,4],[0,0],[-1,14],[24,25]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["b6921aa9-72e5-4b6c-90b4-66893ed92b8c"]}],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["b8d0e6d9-53c0-4c74-b2df-17538a75c141"]}],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["c32b5341-90fa-4e43-a906-b7eabefaafbd"]}],[2],0,[],[],[]],[[{"name":"sheep_down_2","rect":{"x":3,"y":152,"width":165,"height":104},"offset":{"x":-6.5,"y":-3.5},"originalSize":{"width":228,"height":159},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[1],[5]],[[[90,"tile_iso_offset_with_tsx","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<map version=\"1.0\" tiledversion=\"1.1.4\" orientation=\"isometric\" renderorder=\"right-down\" width=\"10\" height=\"10\" tilewidth=\"100\" tileheight=\"50\" infinite=\"0\" nextobjectid=\"1\">\r\n <tileset firstgid=\"1\" source=\"tile_iso_offset_with_tsx2.tsx\"/>\r\n <tileset firstgid=\"3\" source=\"tile_iso_offset_with_tsx1.tsx\"/>\r\n <layer name=\"baseLayer\" width=\"10\" height=\"10\">\r\n  <data encoding=\"base64\" compression=\"zlib\">\r\n   eJxtkDEOADEIwwjk/2++GzpYUQYvrWtUNDMC97NAhXsYnst9ax7cdISZ2b9ob3lHz3G+Mcvw2Kbr8i9Fl3vx9D1tOAndD6DcANU=\r\n  </data>\r\n </layer>\r\n</map>\r\n",["tile_iso_offset_with_tsx2.png","tile_iso_offset_with_tsx1.png"],["tile_iso_offset_with_tsx2.tsx","tile_iso_offset_with_tsx1.tsx"],[0,1],[2,3],[[[5,101,202],[5,101,202]],8,8]]],0,0,[0,0,0,0],[-1,-2,-1,-2],[26,27,28,29]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["cea506fc-84e0-4e06-aa96-1db22f4e6a74"]}],[2],0,[],[],[]],[[{"name":"content","rect":{"x":0,"y":0,"width":512,"height":512},"offset":{"x":0,"y":0},"originalSize":{"width":512,"height":512},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[1],[30]],[[[12,"test-preload-scene"],[13,"Canvas",524288,"afOECD6lZNdJn6D02MSIcF",[-6,-7,-8,-9,-10],[[22,-1,[5,960,640]],[23,-3,-2],[24,45,-4],[26,"PreloadAssets",-5]],[1,480,320,0]],[14,"Button",524288,1,[-15],[[3,-11,[0,"128bn4OvZD44INytZJqgN7"],[5,100,40]],[10,1,0,-12,[0,"8bAB/93L9OLr5MKnIyM1Pz"],1],[28,2,-14,[0,"2c4z8a8zFOqa3sIg4JpTYn"],[[29,"f0a37xDA3xHMoLKQ53Qiv0O","onClick",1]],[4,4292269782],-13,2,3,4,5]],[1,0,-142.264,0]],[30,[-16,-17,1],[31,"d1181340-1753-404e-a449-860fcd763656"],[32,[33,0.78125,[2,0.2,0.5019607843137255,0.8,0.520833125],[2,0.2,0.5019607843137255,0.8,0.520833125]],[34,[4,4283190348]],[35],[36,[4,4292993505]],[37]]],[4,"Sprite",524288,1,[[3,-18,[0,"1176A36TdFhrCmX4LwF20C"],[5,960,640]],[27,0,-19,[0,"28nNtxxWlDoLcBKxdVaZzr"],[4,4282465080],0],[25,45,2,2,-20]]],[4,"Label",524288,1,[[3,-21,[0,"edHLDoejNGvbHOsHsl1yeT"],[5,80,50.4]],[38,"加载成功",20,20,-22,[0,"7dZrBagtxIB4o92qmWNCG/"]]]],[4,"Label",524288,2,[[3,-23,[0,"f3k6skx8ZJ0JtCQ7KHCjB2"],[5,100,40]],[39,"返回",20,20,1,false,-24,[0,"a0ApIfu/dO7qnRNUCD/mEx"],[4,4278190080]]]],[15,"Label-001",524288,1,[[3,-25,[0,"e5LdG1D31DE66pCVzU2dSM"],[5,346.88,50.4]],[40,"Test Preload Scene",40,-26,[0,"30z+VfUKhDO6s43TFTWA0a"]]],[1,0,254.207,0]],[16,"Main Light","c0y6F5f+pAvI805TdmxIjx",3,[[41,0.1,1,30,-27,[42]]],[3,-0.24999999999999997,-0.24999999999999997,-0.06698729810778066,0.9330127018922194],[1,-30,-30,0]],[17,"Main Camera","c9DMICJLFO5IeO07EPon7U",3,[[43,1820327937,-28]],[1,-10,10,10],[3,-0.27781593346944056,-0.36497167621709875,-0.11507512748638377,0.8811195706053617],[1,-35,-45,0]],[21,"UICamera_Canvas",524288,1,[-29]],[44,0,1073741824,2000,6,42467328,10,[4,0]]],0,[0,0,1,0,7,11,0,0,1,0,0,1,0,0,1,0,-1,4,0,-2,5,0,-3,2,0,-4,7,0,-5,10,0,0,2,0,0,2,0,8,2,0,0,2,0,-1,6,0,-1,8,0,-2,9,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,0,9,0,-1,11,0,9,3,1,2,3,29],[0,0,0,0,0,0],[3,3,10,11,12,13],[1,0,0,0,3,4]],[[{"fmt":"1","w":0,"h":0},-1],[0],0,[],[],[]],[[[91,"tile_iso_offset","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<map version=\"1.0\" orientation=\"isometric\" width=\"10\" height=\"10\" tilewidth=\"100\" tileheight=\"50\">\r\n <tileset firstgid=\"1\" name=\"wetlands-ipad\" tilewidth=\"100\" tileheight=\"100\" spacing=\"1\" margin=\"1\">\r\n  <tileoffset x=\"0\" y=\"15\"/>\r\n  <image source=\"tile_iso_offset.png\" width=\"256\" height=\"256\"/>\r\n     <tile id=\"0\">\r\n         <properties>\r\n             <property name=\"altitude\" value=\"0\"/>\r\n             <property name=\"isWater\" value=\"0\"/>\r\n         </properties>\r\n     </tile>\r\n     <tile id=\"1\">\r\n         <properties>\r\n             <property name=\"altitude\" value=\"0\"/>\r\n             <property name=\"isWater\" value=\"0\"/>\r\n         </properties>\r\n     </tile>\r\n     <tile id=\"2\">\r\n         <properties>\r\n             <property name=\"altitude\" value=\"2.5\"/>\r\n             <property name=\"isWater\" value=\"0\"/>\r\n         </properties>\r\n     </tile>\r\n     <tile id=\"3\">\r\n         <properties>\r\n             <property name=\"altitude\" value=\"-1\"/>\r\n             <property name=\"isWater\" value=\"1\"/>\r\n         </properties>\r\n     </tile>\r\n </tileset>\r\n <layer name=\"baseLayer\" width=\"10\" height=\"10\">\r\n  <data encoding=\"base64\" compression=\"zlib\">\r\n   eJxtkEEOwDAIwyDh/2/eDpsUWTlYSK0bCpoZBftygQr74fBc7lvmhktH0ZP5i+wr79Izzg+9jMp//hmcS8jNvXj6ng4OSfcBuQwA6g==\r\n  </data>\r\n </layer>\r\n</map>\r\n\r\n",["tile_iso_offset.png"],[0],[[[5,256,256]],8]]],0,0,[0],[-1],[31]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["eb661612-7613-4fbe-96aa-332775dd0ed3"]}],[2],0,[],[],[]],[[{"name":"tile_iso_offset_with_tsx1","rect":{"x":0,"y":0,"width":101,"height":202},"offset":{"x":0,"y":0},"originalSize":{"width":101,"height":202},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[1],[32]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["ef71dcf4-04f2-4190-87b4-63016816279f"]}],[2],0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["f45b048c-c59c-4446-9b99-bb78e3e13dd9"]}],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["f93c0560-a802-4204-8f66-5655fdef8a08"]}],[2],0,[],[],[]],[[{"name":"image","rect":{"x":0,"y":0,"width":137,"height":216},"offset":{"x":0,"y":0},"originalSize":{"width":137,"height":216},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[1],[33]]]]
