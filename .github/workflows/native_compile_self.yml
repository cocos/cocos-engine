name: <Native> Compile-self

on:
  pull_request:
    paths:
    - 'native/**'

jobs:
  compile_android:
    name: "Android"
    runs-on: aws-linux-action

    steps:
      - uses: actions/checkout@v2
      - name: Download external libraries
        shell: bash
        run: |
          EXT_VERSION=`grep version native/external-config.json  |awk -F'"' '{print $4}'`
          git clone --branch $EXT_VERSION --depth 1 https://github.com/cocos-creator/engine-native-external native/external

      - name: Generate bindings
        run: |
          NDK_ROOT='/home/tools/android-sdk-linux/ndk-bundle'
          ANDROID_NDK_HOME='/home/tools/android-sdk-linux/ndk-bundle'
          export NDK_ROOT ANDROID_NDK_HOME
          python3 ./native/tools/tojs/genbindings.py
          rm ./native/tools/tojs/userconf.ini

      - name: Compile
        env:
          COCOS_ENGINE_DEV: 1
        run: |
          COCOS2DX_ROOT=$GITHUB_WORKSPACE/native
          ANDORID_NDK='/home/tools/android-sdk-linux/ndk-bundle'
          ANDROID_NDK_HOME='/home/tools/android-sdk-linux/ndk-bundle'
          ANDROID_SDK_ROOT='/home/tools/android-sdk-linux'
          export ANDORID_NDK ANDROID_SDK_ROOT ANDROID_NDK_HOME
          NATIVE_DIR=$GITHUB_WORKSPACE/templates/android-template       
          echo "Compiling Android ... "
          cd $GITHUB_WORKSPACE/templates/
          if [ ! -d  android-template ]; then
            cp -r android/template android-template
          fi
          cd $GITHUB_WORKSPACE/templates/android/build
          mkdir -p build-android/proj
          touch build-android/proj/cfg.cmake
          echo "set(CC_USE_GLES3 ON)" >> build-android/proj/cfg.cmake
          echo "set(CC_USE_VULKAN ON)" >> build-android/proj/cfg.cmake
          echo "set(CC_USE_GLES2 ON)" >> build-android/proj/cfg.cmake
          echo "set(USE_WEBSOCKET_SERVER ON)" >> build-android/proj/cfg.cmake
          echo "set(CMAKE_CXX_STANDARD_REQUIRED ON)" >> build-android/proj/cfg.cmake
          mkdir -p build-android/assets
          ASSET_DIR=$GITHUB_WORKSPACE/templates/android/build/build-android/
          sed -i "s@^PROP_NDK_PATH.*@PROP_NDK_PATH=$ANDORID_NDK@g" gradle.properties
          sed -i "s@^APPLICATION_ID.*@APPLICATION_ID=com.cocos.android@g" gradle.properties
          sed -i "s@^RES_PATH.*@RES_PATH=$ASSET_DIR@g" gradle.properties
          sed -i "s@^COCOS_ENGINE_PATH.*@COCOS_ENGINE_PATH=$COCOS2DX_ROOT@g" gradle.properties
          sed -i "s@^NATIVE_DIR.*@NATIVE_DIR=$NATIVE_DIR@g" gradle.properties
          # To speedup CI, compile arm64-v8a only
          # sed -i "s@^PROP_APP_ABI.*@PROP_APP_ABI=armeabi-v7a:arm64-v8a:x86@g" gradle.properties
          sed -i "s@^PROP_APP_ABI.*@PROP_APP_ABI=arm64-v8a@g" gradle.properties
          echo "Compile Android - cmake ..."
          echo "ANDORID_NDK ${ANDROID_NDK} or ${ANDROID_NDK_HOME}"
          ./gradlew :CocosGame:assembleDebug --quiet
          echo "Compile Android Debug Done!"

  compile_windows:
    name: "Windows"  
    runs-on: aws-win-action

    steps:
      - uses: actions/checkout@v2
      - name: Download external libraries
        shell: bash
        run: |
          EXT_VERSION=`grep version  native/external-config.json  |awk -F'"' '{print $4}'`
          git clone --branch $EXT_VERSION --depth 1 https://github.com/cocos-creator/engine-native-external native/external

      - name: Generate bindings
        shell: bash
        run: |
          python2 -V
          cd ./native/tools/tojs
          echo "Create auto-generated jsbinding glue codes."
          python2 ./genbindings.py
          rm userconf.ini

      - name: Compile win64
        shell: bash
        env:
          COCOS_ENGINE_DEV: 1
        run: |
          cd $GITHUB_WORKSPACE/templates/windows
          mkdir -p build-win64/proj
          touch build-win64/proj/cfg.cmake
          echo "set(CC_USE_GLES3 ON)" >> build-win64/proj/cfg.cmake
          echo "set(CC_USE_VULKAN ON)" >> build-win64/proj/cfg.cmake
          echo "set(CC_USE_GLES2 ON)" >> build-win64/proj/cfg.cmake
          echo "set(USE_WEBSOCKET_SERVER ON)" >> build-win64/proj/cfg.cmake
          echo "set(CMAKE_CXX_STANDARD_REQUIRED ON)" >> build-win64/proj/cfg.cmake
          mkdir build-win64/assets
          cd build-win64
          RES_DIR=${GITHUB_WORKSPACE//\\//}/templates/windows/build-win64
          COCOS_X_PATH=${GITHUB_WORKSPACE//\\//}/native
          cmake ../ -G"Visual Studio 15 2017" -DRES_DIR=$RES_DIR -DCOCOS_X_PATH=$COCOS_X_PATH -Ax64
          cmake --build . --config Release
          echo "Compile Win64 Release Done!"
