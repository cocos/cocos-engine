name: run test cases

on: 
  pull_request_target:
  issue_comment:
    types: [created, edited]

# github.head_ref is only defined on pull_request events
concurrency:
  group: ${{ github.workflow }}-${{ github.actor }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  Win-RunTestCases:
    if: |
      contains(github.event.pull_request.body, '[X] needs automatic test cases check') ||
      contains(github.event.comment.body, '@cocos-robot run test cases')
    runs-on: self-hosted-win

    steps:
      - name: Get PR Number
        id: get_pr
        shell: pwsh
        run: |
          if ("${{ github.event_name }}" -eq "issue_comment") {
            Write-Host "::set-output name=pr_number::${{ github.event.issue.number }}"
          }
          else {
            Write-Host "::set-output name=pr_number::${{ github.event.pull_request.number }}"
          }
      - name: Get PR Details
        id: pr_details
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/cocos/cocos-engine/pulls/${{ steps.get_pr.outputs.pr_number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse Pull Request
        id: parse_pr
        shell: pwsh
        run: |
          $pull_request = @"
          ${{ steps.pr_details.outputs.data }}
          "@ | ConvertFrom-Json
          Write-Host $pull_request
          Write-Host "::set-output name=pr_html_url::$($pull_request.html_url)"
          Write-Host "::set-output name=pr_author::$($pull_request.user.login)"
          Write-Host "::set-output name=pr_head_ref::$($pull_request.head.ref)"
          Write-Host "::set-output name=pr_head_sha::$($pull_request.head.sha)"
          Write-Host "::set-output name=pr_base_ref::$($pull_request.base.ref)"
          Write-Host "::set-output name=pr_base_sha::$($pull_request.base.sha)"
      - name: Check Job Parameter
        run: |
          echo "${{ steps.parse_pr.outputs.pr_head_ref }}"
          echo "${{ steps.parse_pr.outputs.pr_head_sha }}"
          echo "${{ steps.parse_pr.outputs.pr_base_ref }}"
          echo "${{ steps.parse_pr.outputs.pr_base_sha }}"
      - name: Checkout engine
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ steps.parse_pr.outputs.pr_base_ref }}

      - name: Checkout rebase
        run: |
          git fetch origin
          git reset --hard   
          git checkout origin/${{ steps.parse_pr.outputs.pr_base_ref }}
          git pull origin ${{ steps.parse_pr.outputs.pr_base_ref }} --allow-unrelated-histories
          git branch -D ${{ steps.parse_pr.outputs.pr_base_ref }}
          git branch ${{ steps.parse_pr.outputs.pr_base_ref }}
          git fetch origin pull/${{ steps.get_pr.outputs.pr_number }}/head:pull-${{ steps.get_pr.outputs.pr_number }}
          git merge --ff -s recursive --no-verify -m "PR Test" origin/${{ steps.parse_pr.outputs.pr_base_ref }} pull-${{ steps.get_pr.outputs.pr_number }}

      - name: Download external libraries
        shell: bash
        run: |
          set -x
          EXT_VERSION=`node ./.github/workflows/get-native-external-version.js`
          PRECLONE_EXTERNAL="E:/preclone/cocos-engine-external"
          if [ ! -d $PRECLONE_EXTERNAL ]; then
              mkdir -p $PRECLONE_EXTERNAL
              git clone https://github.com/cocos/cocos-engine-external $PRECLONE_EXTERNAL
          else
              echo "directory $PRECLONE_EXTERNAL is ready"
          fi
          if [ ! -d native/external ]; then
              mkdir native/external
          fi
          git -C $PRECLONE_EXTERNAL reset --hard
          git -C $PRECLONE_EXTERNAL fetch --all --prune
          git -C $PRECLONE_EXTERNAL archive --format=tar $EXT_VERSION | tar -C native/external -xf -
      - name: Generate bindings
        run: |
          cd ./native/tools/swig-config
          echo "Create auto-generated jsbinding glue codes."
          node genbindings.js &&
          git status
          
      - name: npm install
        run: |
          npm -v
          npm install --registry https://registry.npm.taobao.org
      - name: Run test cases
        timeout-minutes: 120
        id: run_test_cases
        run: |
          cd ..
          python3 -u ./python/main.py --workspace ${{github.workspace}} --pr_number ${{ steps.get_pr.outputs.pr_number }} --author ${{ steps.parse_pr.outputs.pr_author }}  --base_ref ${{ steps.parse_pr.outputs.pr_base_ref }}  --base_sha  ${{ steps.parse_pr.outputs.pr_base_sha }}  --head_ref  ${{ steps.parse_pr.outputs.pr_head_ref }} --head_sha ${{ steps.parse_pr.outputs.pr_head_sha }}

      - name: Update Comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ steps.get_pr.outputs.pr_number }}
          body: |
            @${{ steps.parse_pr.outputs.pr_author }}, Please check the result of `run test cases`:
            - Test Platform: Windows
            - Editor Version: ${{ steps.run_test_cases.outputs.editor }}
            - Task Result: ${{ steps.run_test_cases.outputs.task }}
            - Task URL: ${{ steps.run_test_cases.outputs.url }}
            - GitHub Action: https://github.com/cocos/cocos-engine/actions/runs/${{ github.run_id }}
            ## Task Details
            ${{ steps.run_test_cases.outputs.report }}
  
  macOS-RunTestCases:
    if: |
      contains(github.event.pull_request.body, '[X] needs automatic test cases check') ||
      contains(github.event.comment.body, '@cocos-robot run test cases')
    runs-on: self-hosted-mac

    steps:
      - name: Get PR Number
        id: get_pr
        shell: pwsh
        run: |
          if ("${{ github.event_name }}" -eq "issue_comment") {
            Write-Host "::set-output name=pr_number::${{ github.event.issue.number }}"
          }
          else {
            Write-Host "::set-output name=pr_number::${{ github.event.pull_request.number }}"
          }
      - name: Get PR Details
        id: pr_deatils
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/cocos/cocos-engine/pulls/${{ steps.get_pr.outputs.pr_number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse Pull Request
        id: parse_pr
        shell: pwsh
        run: |
          $pull_request = @"
          ${{ steps.pr_deatils.outputs.data }}
          "@ | ConvertFrom-Json
          Write-Host $pull_request
          Write-Host "::set-output name=pr_html_url::$($pull_request.html_url)"
          Write-Host "::set-output name=pr_author::$($pull_request.user.login)"
          Write-Host "::set-output name=pr_head_ref::$($pull_request.head.ref)"
          Write-Host "::set-output name=pr_head_sha::$($pull_request.head.sha)"
          Write-Host "::set-output name=pr_base_ref::$($pull_request.base.ref)"
          Write-Host "::set-output name=pr_base_sha::$($pull_request.base.sha)"
      - name: Check Job Parameter
        run: |
          echo "${{ steps.parse_pr.outputs.pr_head_ref }}"
          echo "${{ steps.parse_pr.outputs.pr_head_sha }}"
          echo "${{ steps.parse_pr.outputs.pr_base_ref }}"
          echo "${{ steps.parse_pr.outputs.pr_base_sha }}"
          
      - name: Checkout engine
        uses: actions/checkout@v3
        with:
          fetch-depth: 0          
          ref: ${{ steps.parse_pr.outputs.pr_base_ref }}

      - name: Checkout rebase
        run: |
          git fetch origin
          git reset --hard   
          git checkout origin/${{ steps.parse_pr.outputs.pr_base_ref }}
          git pull origin ${{ steps.parse_pr.outputs.pr_base_ref }} --allow-unrelated-histories
          git branch -D ${{ steps.parse_pr.outputs.pr_base_ref }}
          git branch ${{ steps.parse_pr.outputs.pr_base_ref }}
          git fetch origin pull/${{ steps.get_pr.outputs.pr_number }}/head:pull-${{ steps.get_pr.outputs.pr_number }}
          git merge --ff -s recursive --no-verify -m "PR Test" origin/${{ steps.parse_pr.outputs.pr_base_ref }} pull-${{ steps.get_pr.outputs.pr_number }}
      - name: Download external libraries
        shell: bash
        run: |
          set -x
          EXT_VERSION=`node ./.github/workflows/get-native-external-version.js`
          PRECLONE_EXTERNAL="/Users/admin/Documents/actions-runner/preclone/cocos-engine-external"
          if [ ! -d $PRECLONE_EXTERNAL ]; then
              echo "create directory $PRECLONE_EXTERNAL"
              # remove all sub-folders 
              rm -rf /Users/admin/Documents/actions-runner/preclone
              mkdir -p $PRECLONE_EXTERNAL
              git clone https://github.com/cocos/cocos-engine-external $PRECLONE_EXTERNAL
          else
              echo "directory $PRECLONE_EXTERNAL is ready"
          fi
          if [ ! -d native/external ]; then
              mkdir native/external
          fi
          git -C $PRECLONE_EXTERNAL reset --hard
          git -C $PRECLONE_EXTERNAL fetch --all --prune
          git -C $PRECLONE_EXTERNAL archive --format=tar $EXT_VERSION | tar -C native/external -xf -
      - name: Generate bindings
        run: |
          cd ./native/tools/swig-config
          echo "Create auto-generated jsbinding glue codes."
          node genbindings.js &&
          git status
      - name: npm install
        run: |
          npm -v
          npm install --registry https://registry.npm.taobao.org
      - name: Run test cases
        timeout-minutes: 90
        id: run_test_cases
        run: |
          cd ..
          python3 -u ./python/main.py --workspace ${{github.workspace}} --pr_number ${{ steps.get_pr.outputs.pr_number }} --author ${{ steps.parse_pr.outputs.pr_author }}  --base_ref ${{ steps.parse_pr.outputs.pr_base_ref }}  --base_sha  ${{ steps.parse_pr.outputs.pr_base_sha }}  --head_ref  ${{ steps.parse_pr.outputs.pr_head_ref }} --head_sha ${{ steps.parse_pr.outputs.pr_head_sha }}

      - name: Update Comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ steps.get_pr.outputs.pr_number }}
          body: |
            @${{ steps.parse_pr.outputs.pr_author }}, Please check the result of `run test cases`:
            - Test Platform: macOS
            - Editor Version: ${{ steps.run_test_cases.outputs.editor }}
            - Task Result: ${{ steps.run_test_cases.outputs.task }}
            - Task URL: ${{ steps.run_test_cases.outputs.url }}
            - GitHub Action: https://github.com/cocos/cocos-engine/actions/runs/${{ github.run_id }}
            ## Task Details
            ${{ steps.run_test_cases.outputs.report }}
