name: <Native> Linter

on: pull_request

jobs:
  # Set the job key. The key is displayed as the job name
  # when a job name is not provided
  super-lint:
    # Name the Job
    name: ClangTidy Android
    # Set the type of machine to run on
    runs-on: ubuntu-latest

    steps:
      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Python3
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install python deps
        run: |
          python -m pip install PyYAML==5.4.1 Cheetah3
      - name: Download external
        run: |
          EXT_VERSION=`grep version native/external-config.json  |awk -F'"' '{print $4}'`
          git clone --branch $EXT_VERSION --depth 1 https://github.com/cocos-creator/engine-native-external native/external

      - name: Generate bindings
        shell: bash
        run: |
          python -V
          cd ./native/tools/tojs
          python ./genbindings.py
          rm userconf.ini
      - name: Get changed files
        uses: PatriceJiang/paths-filter@master
        id: listchanged
        with:
          list-files: shell
          filters: |
            source:
              - added|modified: '**/*.cpp'
              - added|modified: '**/*.h'
              - added|modified: '**/*.hpp'
              - added|modified: '**/*.m'
              - added|modified: '**/*.mm'
              - added|modified: '**/*.c'
              - exclude: 'native/cocos/editor-support/**'
              - exclude: 'native/cocos/base/etc1.*'
              - exclude: 'native/cocos/base/etc2.*'
              - exclude: 'native/cocos/bindings/manual/jsb_global.cpp'
              - exclude: 'native/cocos/bindings/manual/jsb_dragonbones_manual.cpp'
              - exclude: 'native/cocos/bindings/manual/jsb_spine_manual.cpp'
              - exclude: 'native/cocos/bindings/manual/jsb_socketio.cpp'
              - exclude: 'native/cocos/bindings/manual/jsb_conversions.*'
              - exclude: 'native/cocos/bindings/jswrapper/v8/debugger/**'
              - exclude: 'native/cocos/audio/android/audio_utils/**'
              - exclude: 'native/cocos/platform/android/GameActivityInclude.cpp'
            allChanges:
              - added|modified|deleted: '**'
            skipedDebug:
              - added|modified|deleted: '**'
              - exclude: 'native/cocos/editor-support/**'
      - name: Install CMake & Clang Tidy
        run: |
          sudo apt install -y cmake llvm clang-tidy-11

      - name: Full Compile
        run: |
          COCOS2DX_ROOT=$GITHUB_WORKSPACE/native
          ANDORID_NDK=$ANDROID_NDK_LATEST_HOME
          NATIVE_DIR=$GITHUB_WORKSPACE/templates/android-template
          echo "Compiling Android ... "
          cd $GITHUB_WORKSPACE/templates/
          if [ ! -d  android-template ]; then
            cp -r android/template android-template
          fi
          cd $GITHUB_WORKSPACE/templates/android/build
          mkdir -p build-android/proj
          touch build-android/proj/cfg.cmake
          echo "set(CC_USE_GLES3 ON)" >> build-android/proj/cfg.cmake
          echo "set(CC_USE_VULKAN ON)" >> build-android/proj/cfg.cmake
          echo "set(CC_USE_GLES2 ON)" >> build-android/proj/cfg.cmake
          echo "set(USE_WEBSOCKET_SERVER ON)" >> build-android/proj/cfg.cmake
          echo "set(CMAKE_CXX_STANDARD_REQUIRED ON)" >> build-android/proj/cfg.cmake
          # export compile commands
          echo "set(CMAKE_EXPORT_COMPILE_COMMANDS ON)" >> build-android/proj/cfg.cmake

          mkdir -p build-android/assets

          ASSET_DIR=$GITHUB_WORKSPACE/templates/android/build/build-android/

          sed -i "s@^PROP_NDK_PATH.*@PROP_NDK_PATH=$ANDORID_NDK@g" gradle.properties
          sed -i "s@^APPLICATION_ID.*@APPLICATION_ID=com.cocos.android@g" gradle.properties
          sed -i "s@^RES_PATH.*@RES_PATH=$ASSET_DIR@g" gradle.properties
          sed -i "s@^COCOS_ENGINE_PATH.*@COCOS_ENGINE_PATH=$COCOS2DX_ROOT@g" gradle.properties
          sed -i "s@^NATIVE_DIR.*@NATIVE_DIR=$NATIVE_DIR@g" gradle.properties

          # To speedup CI, compile arm64-v8a only
          # sed -i "s@^PROP_APP_ABI.*@PROP_APP_ABI=armeabi-v7a:arm64-v8a:x86@g" gradle.properties
          sed -i "s@^PROP_APP_ABI.*@PROP_APP_ABI=arm64-v8a@g" gradle.properties

          echo "Compile Android - cmake ..."
          echo "ANDORID_NDK ${ANDROID_NDK} or ${ANDROID_NDK_HOME}"
          ./gradlew :CocosGame:assembleDebug --quiet
          echo "Compile Android Debug Done!"
          echo "Copy Compile database"
          cp "$(find . -name compile_commands.json)" ${COCOS2DX_ROOT}/
      - name: Generate clang-fix.yaml
        shell: bash
        if: ${{ steps.listchanged.outputs.source == 'true' }}
        run: |
          CPP="${{ steps.listchanged.outputs.source_files }}"
          FILTERED=`node .github/workflows/filter_by_cdb.js $CPP`
          if [[ "$FILTERED-xxx" == "-xxx" ]]; then
            echo "no source files match"
          else
            clang-tidy-11 --format-style=file --export-fixes=clang-fixes.yaml $FILTERED
          fi
      - name: clang-tidy-action
        uses: PatriceJiang/clang-tidy-action@master
        if: hashFiles('clang-fixes.yaml') != ''
        with:
          fixesFile: clang-fixes.yaml
          noFailOnIssue: false
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          error-limit: 200