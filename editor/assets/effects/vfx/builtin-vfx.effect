CCEffect %{
  temporaries:
    b1: &b1
      targets:
      - blend: true
        blendSrc: src_alpha
        blendDst: one
        blendSrcAlpha: src_alpha
        blendDstAlpha: one
    b2: &b2
      targets:
      - blend: true
        blendSrc: src_alpha
        blendDst: one_minus_src_alpha
        blendSrcAlpha: zero
        blendDstAlpha: one
        blendAlphaEq: max
    b3: &b3
      targets:
      - blend: true
        blendSrc: dst_color
        blendDst: one
        blendSrcAlpha: zero
        blendDstAlpha: dst_alpha
    d1: &d1 { depthTest: true, depthWrite: false }
    r1: &r1 { cullMode: none }
    p1: &p1
      mainTexture:            { value: grey }
      mainTiling_Offset:      { value: [1, 1, 0, 0]  }
    p2: &p2
      <<: *p1
      tintColor:              { value: [0.5, 0.5, 0.5, 0.5], editor: { type: color } }

  techniques:
  - name: add
    passes:
    - vert: vfx-vs:vert
      frag: tinted-fs:add
      rasterizerState: *r1
      depthStencilState: *d1
      blendState: *b1
      properties: *p2
  - name: alpha-blend
    passes:
    - vert: vfx-vs:vert
      frag: tinted-fs:add
      rasterizerState: *r1
      depthStencilState: *d1
      blendState: *b2
      properties: *p2
  - name: add-multiply
    passes:
    - vert: vfx-vs:vert
      frag: tinted-fs:multiply
      rasterizerState: *r1
      depthStencilState: *d1
      blendState: *b3
      properties: *p2
  - name: add-smooth
    passes:
    - vert: vfx-vs:vert
      frag: no-tint-fs:addSmooth
      rasterizerState: *r1
      depthStencilState: *d1
      blendState: *b1
      properties: *p1
  - name: premultiply-blend
    passes:
    - vert: vfx-vs:vert
      frag: no-tint-fs:premultiplied
      rasterizerState: *r1
      depthStencilState: *d1
      blendState: *b2
      properties: *p1
}%

CCProgram vfx-vs %{
  precision highp float;
  #include <builtin/internal/vfx-common>
  
  in vec3 a_position;  // mesh position
  in vec3 a_texCoord;  // mesh uv
  in vec3 a_normal;    // mesh normal
  in vec4 a_color;     // mesh color

  uniform VertConstants {
    vec4 mainTiling_Offset;
  };

  out vec2 v_uv;
  out vec4 v_color;

  vec4 vert () {
    VFXParticleInput particleInput;
    CCVFXSetupParticleInput(particleInput);

    vec4 pos = cc_matViewProj * CCVFXApplyParticlePosition(particleInput, a_position);
    v_uv = CCVFXApplyParticleTexCoord(particleInput, a_texCoord.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;
    v_color = CCVFXApplyParticleColor(particleInput, a_color);

    return pos;
  }
}%

CCProgram tinted-fs %{
  precision mediump float;
  #include <legacy/output>

  in vec2 v_uv;
  in vec4 v_color;

  uniform sampler2D mainTexture;
  uniform FragConstants {
    vec4 tintColor;
  };

  vec4 add () {
    vec4 col = 2.0 * v_color * tintColor * texture(mainTexture, v_uv);
    return CCFragOutput(col);
  }

  vec4 multiply () {
    vec4 col;
    vec4 texColor = texture(mainTexture, v_uv);
    col.rgb = tintColor.rgb * texColor.rgb * v_color.rgb * vec3(2.0);
    return CCFragOutput(col);
  }
}%

CCProgram no-tint-fs %{
  precision mediump float;
  #include <legacy/output>

  in vec2 v_uv;
  in vec4 v_color;

  uniform sampler2D mainTexture;

  vec4 addSmooth () {
    vec4 col = v_color * texture(mainTexture, v_uv);
    col.rgb *= col.a;
    return CCFragOutput(col);
  }

  vec4 premultiplied () {
    vec4 col = v_color * texture(mainTexture, v_uv) * v_color.a;
    return CCFragOutput(col);
  }
}%
