// Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: color-grading
    passes:
    - vert: color-grading-vs:vert
      frag: color-grading-32-fs:frag
      pass: color-grading-32
      depthStencilState:
        depthTest: false
        depthWrite: false
      rasterizerState:
        cullMode: none
    - vert: color-grading-vs:vert
      frag: color-grading-8x8-fs:frag
      pass: color-grading-8x8
      depthStencilState:
        depthTest: false
        depthWrite: false
      rasterizerState:
        cullMode: none
}%

CCProgram color-grading-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>

  in vec2 a_position;
  in vec2 a_texCoord;
  out vec2 v_uv;

  vec4 vert () {
    vec4 pos = vec4(a_position, 0.0, 1.0);
    v_uv = a_texCoord;
    return pos;
  }
}%


CCProgram color-grading-32-fs %{
  precision highp float;
  uniform ColorGradingUBO {
    float contribute;
  };

  in vec2 v_uv;
  #pragma rate sceneColorMap pass
  uniform sampler2D sceneColorMap;
  uniform sampler2D colorGradingMap;

  #define COLORS 32.0
  #define COLOR_GRADING_SCALE  vec3((COLORS - 1.0) / (COLORS * COLORS), (COLORS - 1.0) / COLORS, 1.0 / COLORS)
  #define COLOR_GRADING_OFFSET vec2(1.0 / (2.0 * COLORS * COLORS), 1.0 / (2.0 * COLORS))

  vec3 ColorGrading(sampler2D lutTexture, vec3 color) {
    vec2 uv = vec2(color.r, 1.0 - color.g) * COLOR_GRADING_SCALE.xy + COLOR_GRADING_OFFSET;
    float b = color.b * (COLORS - 1.0);
    vec2 lr = floor(vec2(b, b + 1.0));
    float lerp = b - lr.x;
    lr *= COLOR_GRADING_SCALE.z;
    vec3 left = texture(lutTexture, uv + vec2(lr.x, 0.0)).rgb;
    vec3 right = texture(lutTexture, uv + vec2(lr.y, 0.0)).rgb;
    return mix(left, right, lerp);
  }

  vec4 frag () {
    vec4 sceneColor = texture(sceneColorMap, v_uv);
    vec3 gradeColor = ColorGrading(colorGradingMap, sceneColor.rgb);
    return mix(sceneColor, vec4(gradeColor, 1.0), contribute);
  }
}%

CCProgram color-grading-8x8-fs %{
  precision highp float;
  uniform ColorGradingUBO {
    float contribute;
  };

  in vec2 v_uv;
  #pragma rate sceneColorMap pass
  uniform sampler2D sceneColorMap;
  uniform sampler2D colorGradingMap;


  vec4 frag () {
    float EPS = 0.000001;
    float pxSize = 512.0;
    vec3 orgColor = texture(sceneColorMap, v_uv).rgb;
    float bValue = (orgColor.b * 255.0) / 4.0;
    vec2 mulB = clamp(floor(bValue) + vec2(0.0, 1.0), 0.0, 63.0);
    vec2 row = floor(mulB / 8.0 + EPS);
    vec4 row_col = vec4(row, mulB - row * 8.0);
    vec4 lookup = orgColor.ggrr * (63.0/pxSize) + row_col * (64.0/pxSize) + (0.5/pxSize);
 
    float b1w = bValue - mulB.x;
 
    vec3 sampled1 = texture(colorGradingMap, lookup.zx).rgb;
    vec3 sampled2 = texture(colorGradingMap, lookup.wy).rgb;
 
    vec4 o = vec4(mix(sampled1, sampled2, b1w),1.0);
    return o;
  }
}%
