// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      pass: post-final
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
    - vert: vs-tonemap
      frag: fs-tonemap
      pass: post-final-tonemap
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
    - vert: vs-tonemap
      frag: fs-copy
      pass: post-copy
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
}%


CCProgram vs %{
  #include <./chunks/vs>
}%


CCProgram fs %{
  precision highp float;

  in vec2 v_uv;

  uniform UBO {
    vec4 inputViewPort;
  };
  #pragma rate inputTexture pass
  uniform sampler2D inputTexture;

  layout(location = 0) out vec4 fragColor;

  void main () {
    fragColor = texture(inputTexture, v_uv);
  }

}%

CCProgram vs-tonemap %{
  precision highp float;

  #include <legacy/decode-standard>
  #include <post-process/pipeline>

  out vec2 v_uv;

  void main () {
    StandardVertInput In;
    CCDecode(In);
    FLIP_VULKAN_NDC(In.position);
    gl_Position = In.position;
    v_uv = a_texCoord;
  }
}%

CCProgram fs-tonemap %{
  precision highp float;
  #include <common/color/gamma>
  #include <common/color/tone-mapping>

  in vec2 v_uv;

  #pragma rate inputTexture pass
  uniform sampler2D inputTexture;

  layout(location = 0) out vec4 fragColor;

  void main () {
    fragColor = texture(inputTexture, v_uv);
    #if CC_USE_FLOAT_OUTPUT
      fragColor.rgb = HDRToLDR(fragColor.rgb);
      fragColor.rgb = LinearToSRGB(fragColor.rgb);
    #endif
  }
}%

CCProgram fs-copy %{
  precision highp float;

  in vec2 v_uv;

  #pragma rate inputTexture pass
  uniform sampler2D inputTexture;

  layout(location = 0) out vec4 fragColor;

  void main () {
    fragColor = texture(inputTexture, v_uv);
  }
}%
