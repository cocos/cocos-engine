// Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.
CCEffect %{

  techniques:
  - passes:
    - vert: dof-vs
      frag: dof-coc-fs
      pass: dof-coc
      depthStencilState:
        depthTest: false
        depthWrite: false
    - vert: dof-vs
      frag: dof-prefilter-fs
      pass: dof-prefilter
      depthStencilState:
        depthTest: false
        depthWrite: false
    - vert: dof-vs
      frag: dof-blur-hor-fs
      pass: dof-blur-hor
      depthStencilState:
        depthTest: false
        depthWrite: false
    - vert: dof-vs
      frag: dof-blur-ver-fs
      pass: dof-blur-ver
      depthStencilState:
        depthTest: false
        depthWrite: false
    - vert: dof-vs
      frag: dof-combine-fs
      pass: dof-combine
      depthStencilState:
        depthTest: false
        depthWrite: false
}%

CCProgram ubo %{
    #include <common/common-define>
    uniform ColorGradingUBO {
        vec4 cocParams;
        vec4 texSize;
    };

    #pragma rate colorTex pass
    uniform sampler2D colorTex;
    #pragma rate depthTex pass
    uniform sampler2D depthTex;
    #pragma rate outResultTex pass
    uniform sampler2D outResultTex;
    
    #define farStart        cocParams.x
    #define farEnd          cocParams.y
    #define maxRadius       cocParams.z

    const float _Spread = 1.0;
    const int _GridSize = 3;

    float gaussian(int x)
    {
      float sigmaSqu = _Spread * _Spread;
      return (1.0 / sqrt(PI2 * sigmaSqu)) * pow(EXP_VALUE, float(-(x * x) / (2 * int(sigmaSqu))));
    }
}%


CCProgram dof-vs %{
  #include <./chunks/vs>
}%

CCProgram dof-coc-fs %{
  precision highp float;
  #include <ubo>
  #include <common/data/packing>
  #include <common/common-define>



  in vec2 v_uv;
  layout(location = 0) out vec4 fragColor;

  void main () {
    float depth = unpackRGBAToDepth(texture(depthTex, v_uv)) * 2.0 - 1.0;
    float coc = (depth - farStart) / (farEnd - farStart);
    fragColor = vec4(saturate(coc));
  }

}%

CCProgram dof-prefilter-fs %{
  precision highp float;
  #include <ubo>
 
  in vec2 v_uv;
  layout(location = 0) out vec4 fragColor;

  void main () {
    float farCoC = texture(outResultTex, v_uv).r;

    vec4 color = texture(colorTex, v_uv);
    fragColor = color * farCoC;
  }

}%

CCProgram dof-blur-hor-fs %{
  precision highp float;
  #include <ubo>
 
  in vec2 v_uv;
  layout(location = 0) out vec4 fragColor;

  void main () {

    vec3 col = vec3(0.0);
    float gridSum = 0.0;

    const int upper = ((_GridSize - 1) / 2);
    const int lower = -upper;

    for (int x = lower; x <= upper; ++x)
    {
      float gauss = gaussian(x);
      gridSum += gauss;
      vec2 uv = v_uv + vec2(texSize.x * float(x), 0.0);
      col += gauss * texture(outResultTex, uv).xyz;
    }

    col /= gridSum;
    fragColor = vec4(col, 1.0);
  }

}%

CCProgram dof-blur-ver-fs %{
  precision highp float;
  #include <ubo>
 
  in vec2 v_uv;
  layout(location = 0) out vec4 fragColor;

  void main () {
    vec3 col = vec3(0.0);
		float gridSum = 0.0;

		const int upper = ((_GridSize - 1) / 2);
		const int lower = -upper;

		for (int y = lower; y <= upper; ++y)
		{
			float gauss = gaussian(y);
			gridSum += gauss;
			vec2 uv = v_uv + vec2(0.0, texSize.y * float(y));
			col += gauss * texture(outResultTex, uv).xyz;
		}

		col /= gridSum;
    fragColor = vec4(col, 1.0);
  }

}%

CCProgram dof-combine-fs %{
  precision highp float;
  #include <ubo>
  #include <common/data/packing>
  #include <common/common-define>

  in vec2 v_uv;
  layout(location = 0) out vec4 fragColor;

  void main () {
    fragColor = vec4(1.0);
  }
}%
