// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: planar-shadow-vs:vert
      frag: planar-shadow-fs:frag
      phase: planarShadow
      depthStencilState:
        depthTest: true
        depthWrite: false
        stencilTestFront: true
        stencilFuncFront: not_equal
        stencilPassOpFront: replace
        stencilRef: 0x80 # only use the leftmost bit
        stencilReadMask: 0x80
        stencilWriteMask: 0x80
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
}%

CCProgram planar-shadow-vs %{
  precision highp float;
  #include <legacy/input>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <builtin/uniforms/cc-shadow>

  out float v_dist;

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    vec3 P = (matWorld * position).xyz;
    vec3 L = cc_mainLitDir.xyz;
    vec3 N = cc_planarNDInfo.xyz;
    float d = cc_planarNDInfo.w + 0.001;
    float dist = (-d - dot(P, N)) / (dot(L, N) + 0.0001);
    vec3 shadowPos = P + L * dist;
  
    // avoid z-fighting with shadow plane
    vec3 view = normalize(cc_cameraPos.xyz - shadowPos);
    float viewLength = length(cc_cameraPos.xyz - shadowPos);
    shadowPos += view * min(1.0, 0.005 * viewLength);

    position = cc_matProj * cc_matView * vec4(shadowPos, 1.0);
    v_dist = dist;
    return position;
  }
}%

CCProgram planar-shadow-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-shadow>
  #include <legacy/output>

  in float v_dist;

  vec4 frag () {
    if(v_dist < 0.0)
      discard;
    return CCFragOutput(cc_shadowColor);
  }
}%
