import { _decorator, Component, Node } from 'cc';
const { ccclass, property } = _decorator;

@ccclass('<%Name%>')
export class <%Name%> extends Component {
    start() {}

    // test GENERATE IGNORE
    update(deltaTime: number) { }
}

/**
 * GENERATE IGNORE
 * Use the "GENERATE IGNORE" flag in comments to not generate these commented code in newly created script files.
 * 
 * Predefined Variables
 * You can use predefined variables below, they can help you such as decide whether to use 'Camel Format Class Name'.
 * 
 * <%Name%>, default format for class name in underscore format, like 'new_component'
 * <%UnderscoreFormatClassName%>, class name in underscore format, like 'new_component'
 * <%CamelFormatClassName%>, class name in camel format, like 'NewComponent'
 * <%Author%>, Who create this file
 * <%DateTime%>, when create this file
 * <%FileBasename%>, this file name with extension
 * <%FileBasenameNoExtension%>, this file name with no-extension
 * <%URL%>, url of this file in COCOS ASSET URL format
 * <%ManualUrl%>, url of office help document, like 'https://docs.cocos.com/creator/manual/en'
 *
 * 
 * Annotated Template
 * 
  export class <%Name%> extends Component {
    // Class member could be defined like this.
    dummy = '';

    // Use 'property' decorator if your want the member to be serializable.
    @property
    serializableDummy = 0;

    start () {
        // Your initialization goes here.
    }

    update (deltaTime: number) {
        // Your update function goes here.
    }
  }
 *
 * Learn more about scripting: <%ManualUrl%>scripting/
 * Learn more about CCClass: <%ManualUrl%>scripting/decorator.html
 * Learn more about life-cycle callbacks: <%ManualUrl%>scripting/life-cycle-callbacks.html
 */
