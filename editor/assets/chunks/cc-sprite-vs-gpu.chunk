
#include <cc-sprite-common>
#include <cc-global>
#include <common>

in vec3 a_position;
in vec2 a_texCoord;
in float a_batch_id;

out vec2 v_uv0;
out vec4 v_color;

out float v_uvMode;
out vec4 v_uvSizeOffset;
out vec4 v_uvParams0;
out vec4 v_uvParams1;

struct SpriteVertexInternalData {
  vec4 rotation;
  vec3 translation;
  vec3 scale;

  vec4 uvSizeOffset;

  float uvMode;
  vec4 uvParams;
  float filltype;
};

#define CC_VEC4_PRE_QUAD 5
#define CC_UI_VECTOR_PER_DRAW (CC_DEVICE_MAX_VERTEX_UNIFORM_VECTORS - CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS) / CC_VEC4_PRE_QUAD * CC_VEC4_PRE_QUAD // alignment with 5
// #define CC_UI_VECTOR_PER_DRAW 16 * CC_VEC4_PRE_QUAD // for debug
#pragma builtin(local)
layout(set = 2, binding = 5) uniform CCUILocal {
  vec4 cc_local_data[CC_UI_VECTOR_PER_DRAW];
};

vec3 VectorTransformQuat (vec3 v, vec4 q) {
  return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

// xyz: translation w: color R.G
// xyzw: quat rotation
// xy: scale z: color B.A w: uvMode.filltype
// xy: uv size zw: uv offset // x sign value: texture retation
// (xyzw: sliced - left, top, right, bottom) | (xy: tiling) | (xyzw: start, end, mode, center)
void CCSpriteInput(out SpriteVertexData i0) {
  vec4 data0 = cc_local_data[int(a_batch_id) * CC_VEC4_PRE_QUAD];
  vec4 data1 = cc_local_data[int(a_batch_id) * CC_VEC4_PRE_QUAD + 1];
  vec4 data2 = cc_local_data[int(a_batch_id) * CC_VEC4_PRE_QUAD + 2];
  vec4 data3 = cc_local_data[int(a_batch_id) * CC_VEC4_PRE_QUAD + 3];
  vec4 data4 = cc_local_data[int(a_batch_id) * CC_VEC4_PRE_QUAD + 4];

  float rg = data0.w;
  float r = floor(rg);
  float ba = data2.z;
  float b = floor(ba);

  SpriteVertexInternalData i1;
  i1.rotation = data1;
  i1.translation = data0.xyz;
  i1.scale = vec3(data2.xy, 1.0);

  i1.uvSizeOffset = data3;
  i1.filltype = fract(data2.w) * 10.0;

  i1.uvMode = data2.w;
  i1.uvParams = data4;

  i0.position = vec4(VectorTransformQuat(a_position * i1.scale, i1.rotation) + i1.translation, 1.0);
  i0.color = vec4(r * (1.0 / 255.0), rg - r, b * (1.0 / 255.0), ba - b);

  vec2 uvWithRotation;
  if (i1.uvSizeOffset.x < 0.0) {
    i1.uvSizeOffset.x = abs(i1.uvSizeOffset.x);
    uvWithRotation = vec2(1.0 - a_texCoord.y, a_texCoord.x); // For Rotation 90 in Atlas
  } else {
    uvWithRotation = a_texCoord;
  }

  if (i1.uvMode >= 3.0) {
    i0.uv = uvWithRotation;
    v_uvSizeOffset = i1.uvSizeOffset;
    v_uvParams0 = vec4(i1.uvParams.xy, i1.filltype, 0); // HORIZONTAL OK
    if (i1.filltype >= 2.0) { // RADIAL
      v_uvParams1 = i1.uvParams;
    } else if (i1.filltype >= 1.0) {
      // flip y
      v_uvParams0 = vec4(1.0 - v_uvParams0.y, 1.0 - v_uvParams0.x, v_uvParams0.zw);
    }
  } else if (i1.uvMode >= 2.0) {
    i0.uv = uvWithRotation * i1.uvParams.xy;
    i0.uv.y -= fract(i1.uvParams.y); // for start point
    v_uvSizeOffset = i1.uvSizeOffset;
  } else if (i1.uvMode >= 1.0) {
    i0.uv = uvWithRotation;
    v_uvSizeOffset = i1.uvSizeOffset;
    vec4 params0 = fract(i1.uvParams); // sprite sliced info // with Rect // LTRB
    vec4 params1 = floor(i1.uvParams) / 2048.0; // uvSilced 0-1 // with Texture // LTRB
    v_uvParams0 = vec4(params0.xy, params1.xy); // SL ST TL TT
    v_uvParams1 = vec4(params0.zw, params1.zw); // SR SB TR TB
  } else {
    i0.uv = uvWithRotation * i1.uvSizeOffset.xy + i1.uvSizeOffset.zw;
  }

  v_uvMode = i1.uvMode;
}
