#if (CC_PIPELINE_TYPE == CC_PIPELINE_TYPE_FORWARD || CC_FORCE_FORWARD_SHADING)
  #if CC_FORWARD_ADD && !CC_ENABLE_CLUSTERED_LIGHT_CULLING
    void CCSurfacesLighting(inout LightingResult lightingResultAccumulated, in SurfacesMaterialData surfaceData, in vec2 shadowBias)
    {
      vec3 worldPos;
      HIGHP_VALUE_FROM_STRUCT_DEFINED(worldPos, surfaceData.worldPos);

      CCSurfacesInitializeLightingResult(lightingResultAccumulated);

      LightingIntermediateData lightingData;
      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);

      LightingResult lightingResult;
      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);
      lightingResultAccumulated.diffuseColorWithLighting = lightingResult.diffuseColorWithLighting;
      lightingResultAccumulated.specularColorWithLighting = lightingResult.specularColorWithLighting;

      #if CC_SURFACES_LIGHTING_TRT
        vec3 diff;
        SurfacesMaterialData surfaceDataTRT;
        CCSurfacesGetSurfacesMaterialDataTRT(surfaceDataTRT, surfaceData);
        CCSurfacesLightingInitializeColorWithLighting(diff, lightingResultAccumulated.specularColorWithLightingTRT, surfaceDataTRT, lightingData);
      #endif

      int numLights = CC_PIPELINE_TYPE == CC_PIPELINE_TYPE_FORWARD ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);
      for (int i = 0; i < LIGHTS_PER_PASS; i++) {
        if (i >= numLights) break;

        CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, cc_lightPos[i].xyz - worldPos);
        CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);
  
        vec3 diffuseLighting, specularLighting;
        CCSurfacesLightingCalculateDirect(diffuseLighting, specularLighting, lightingData, cc_lightColor[i]);

        float fresnel = 1.0;
      #if CC_SURFACES_LIGHTING_USE_FRESNEL
        fresnel = lightingResult.fresnel = CCSurfaceLightingCalculateFresnel(lightingData);
      #endif

        float shadow = 1.0;
      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == CC_SHADOW_MAP
        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {
          vec4 shadowPos = vec4(0.0), shadowNDCPosWithBias = vec4(0.0);
          if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {
            shadowPos = cc_matLightViewProj * vec4(surfaceData.worldPos, 1.0);
            shadow = CCSpotShadowFactorBase(shadowNDCPosWithBias, shadowPos, worldPos, shadowBias);
          }
          #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE
            #if CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT
              lightingData.shadowPosAndDepth.xy = shadowNDCPosWithBias.xy;
              lightingData.shadowPosAndDepth.z = shadowPos.z;
              lightingData.shadowPosAndDepth.w = GetViewSpaceDepthFromNDCDepth_Perspective(SampleShadowMap(shadowNDCPosWithBias.xyz, cc_spotShadowMap), shadowNDCPosWithBias.w, cc_shadowInvProjDepthInfo.x, cc_shadowInvProjDepthInfo.y);
            #else
              lightingData.transmitDiffuseParams.zw = vec2(0.0);
            #endif
          #endif
        }
      #endif
      
      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC
        if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW) {
          shadow = 1.0;
        }
      #endif

        lightingResult.shadow = shadow;

        float distAtt = CCSurfacesLightingCalculateDistanceAttenuation(lightingData, cc_lightSizeRangeAngle[i]);

        float angleAtt = 1.0;
        if (cc_lightPos[i].w > 0.0) {
          angleAtt = CCSurfacesLightingCalculateAngleAttenuation(lightingData, cc_lightSizeRangeAngle[i], -cc_lightDir[i].xyz);
        }

        float multiplier = distAtt * angleAtt;

        lightingResult.directDiffuse = diffuseLighting * multiplier;
        lightingResult.directSpecular = specularLighting * multiplier * fresnel;

        #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR
          vec3 transmitSpecularLighting;
          CCSurfacesLightingCalculateDirectTransmitSpecular(transmitSpecularLighting, lightingData, cc_lightColor[i]);
          lightingResult.directTransmitSpecular = transmitSpecularLighting * multiplier * (1.0 - fresnel);
        #endif

        #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE
          lightingResult.directTransmitDiffuse = CCSurfacesLightingCalculateDirectTransmitDiffuse(lightingResult, lightingData, cc_lightColor[i]);
        #endif

        #if CC_SURFACES_LIGHTING_TRT
          LightingIntermediateData lightingDataTRT;
          CCSurfacesGetLightingIntermediateDataTRT(lightingDataTRT, lightingData, surfaceData);
          CCSurfacesLightingCalculateDirectTRT(lightingResult.directTRT, lightingDataTRT, cc_lightColor[i]);
          lightingResult.directTRT *= multiplier * fresnel;
          // lightingResult.directTRT -= lightingResult.directSpecular;
        #endif

        #if CC_SURFACES_LIGHTING_TT
          CCSurfacesLightingCalculateDirectTT(lightingResult, lightingData, cc_lightColor[i]);
        #endif


        // user-defined lighting model
        #ifdef CC_SURFACES_LIGHTING_MODIFY_FINAL_RESULT
          LightingMiscData miscData;
          miscData.lightType = cc_lightPos[i].w;
          miscData.lightPos = cc_lightPos[i].xyz;
          miscData.lightDir = cc_lightDir[i].xyz;
          miscData.lightColorAndIntensity = cc_lightColor[i];
          miscData.lightSizeRangeAngle = cc_lightSizeRangeAngle[i];
          SurfacesLightingModifyFinalResult(lightingResult, lightingData, surfaceData, miscData);
        #endif     

        // accumulate per-light results
        CCSurfacesAccumulateLightingResult(lightingResultAccumulated, lightingResult);
      }
    }
  #else
    void CCSurfacesLighting(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData, in vec2 shadowBias)
    {
      LightingIntermediateData lightingData;
      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);
      CCSurfacesInitializeLightingResult(lightingResult, surfaceData);
      
      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);

      CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, -cc_mainLitDir.xyz);

      // CCSurfacesLightingCalculateShadow:
      lightingResult.shadow = 1.0;
      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == CC_SHADOW_MAP
        if (cc_mainLitDir.w > 0.0) {
          vec4 shadowPos = vec4(0.0), shadowNDCPosWithBias = vec4(0.0);
          if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {
            #if CC_DIR_LIGHT_SHADOW_TYPE == CC_DIR_LIGHT_SHADOW_CASCADED
              lightingResult.shadow = CCCSMFactorBase(shadowPos, shadowNDCPosWithBias, surfaceData.worldPos, lightingData.N, shadowBias);
            #endif
            #if CC_DIR_LIGHT_SHADOW_TYPE == CC_DIR_LIGHT_SHADOW_UNIFORM
              shadowPos = cc_matLightViewProj * vec4(surfaceData.worldPos, 1.0);
              lightingResult.shadow = CCShadowFactorBase(shadowPos, lightingData.N, shadowBias);
            #endif
          }
          #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE
            #if CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT
              lightingData.shadowPosAndDepth.xy = shadowNDCPosWithBias.xy;
              lightingData.shadowPosAndDepth.z = shadowPos.z;
              lightingData.shadowPosAndDepth.w = GetViewSpaceDepthFromNDCDepth_Orthgraphic(SampleShadowMap(shadowNDCPosWithBias.xyz, cc_shadowMap), cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);
            #else
              lightingData.transmitDiffuseParams.zw = vec2(0.0);
            #endif
          #endif
        }
      #endif

      // CCSurfacesLightingCalculateBaked:
      lightingResult.lightmapColor = vec3(0.0);
      #if CC_SURFACES_USE_LIGHT_MAP && !CC_FORWARD_ADD
		    float lightmapShadow, lightmapAO;
        GetLightMapColor(lightingResult.lightmapColor, lightmapShadow, lightmapAO, cc_lightingMap, FSInput_lightMapUV.xy, FSInput_lightMapUV.z, surfaceData.worldNormal);
      
        #if CC_SURFACES_USE_LIGHT_MAP == LIGHT_MAP_TYPE_INDIRECT_OCCLUSION
          lightingResult.shadow *= lightmapShadow;
          lightingResult.ao *= lightmapAO;
        #endif
      #endif

      // dynamic & stationary dir light
      lightingResult.directDiffuse = lightingResult.directSpecular = vec3(0.0);
      #if !CC_DISABLE_DIRECTIONAL_LIGHT && !CC_FORWARD_ADD
        CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);
  
        CCSurfacesLightingCalculateDirect(lightingResult.directDiffuse, lightingResult.directSpecular, lightingData, cc_mainLitColor);
      #endif

      // apply SSR, local probe & global probe
      CCSurfacesLightingCalculateEnvironment(lightingResult.environmentDiffuse, lightingResult.environmentSpecular, lightingData, cc_ambientSky.w);

      #if CC_SURFACES_LIGHTING_USE_FRESNEL
        lightingResult.fresnel = CCSurfaceLightingCalculateFresnel(lightingData);
      #endif

      #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR
        CCSurfacesLightingCalculateDirectTransmitSpecular(lightingResult.directTransmitSpecular, lightingData, cc_mainLitColor);
        CCSurfacesLightingCalculateEnvironmentTransmitSpecular(lightingResult.environmentTransmitSpecular, lightingData, cc_ambientSky.w);
      #endif
      
      #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE
        CCSurfacesLightingCalculateDirectTransmitDiffuse(lightingResult.directTransmitDiffuse, lightingResult, lightingData, cc_mainLitColor);
        CCSurfacesLightingCalculateEnvironmentTransmitDiffuse(lightingResult.environmentTransmitDiffuse, lightingResult, lightingData, cc_ambientSky.w);
      #endif

      #if CC_SURFACES_LIGHTING_TRT
        LightingIntermediateData lightingDataTRT;
        CCSurfacesGetLightingIntermediateDataTRT(lightingDataTRT, lightingData, surfaceData);
        CCSurfacesLightingCalculateDirectTRT(lightingResult.directTRT, lightingDataTRT, cc_mainLitColor);
        CCSurfacesLightingCalculateEnvironmentTRT(lightingResult.environmentTRT, lightingDataTRT, cc_ambientSky.w);
        // lightingResult.directTRT -= lightingResult.directSpecular;
        // lightingResult.environmentTRT -= lightingResult.environmentSpecular;

        vec3 diff;
        SurfacesMaterialData surfaceDataTRT;
        CCSurfacesGetSurfacesMaterialDataTRT(surfaceDataTRT, surfaceData);
        CCSurfacesLightingInitializeColorWithLighting(diff, lightingResult.specularColorWithLightingTRT, surfaceDataTRT, lightingDataTRT);
      #endif

      #if CC_SURFACES_LIGHTING_TT
        CCSurfacesLightingCalculateDirectTT(lightingResult, lightingData, cc_mainLitColor);
      #endif

      // apply screen-space shadow and ao
      // lightingResult.shadow/ao *= XXX;

      // user-defined lighting model
      #ifdef CC_SURFACES_LIGHTING_MODIFY_FINAL_RESULT
        LightingMiscData miscData;
        miscData.lightType = LIGHT_TYPE_DIRECTIONAL;
        miscData.lightPos = vec3(0.0);
        miscData.lightDir = cc_mainLitDir.xyz;
        miscData.lightColorAndIntensity = cc_mainLitColor;
        miscData.lightSizeRangeAngle = vec4(0.0, 0.0, 0.0, 0.0);
        SurfacesLightingModifyFinalResult(lightingResult, lightingData, surfaceData, miscData);
      #endif      
    }
    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING
      // #todo: cluster related lighting flow, invoke after CCSurfacesLighting
      // use same code as additive-pass
      // void CCSurfacesLighting_Cluster(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData, in vec2 shadowBias)
      // {
      // }
    #endif // cluster lighting
  #endif // base pass
#endif // forward shading
