#if (CC_PIPELINE_TYPE == CC_PIPELINE_TYPE_FORWARD || CC_FORCE_FORWARD_SHADING)
  #if CC_FORWARD_ADD && !CC_ENABLE_CLUSTERED_LIGHT_CULLING
    void CCSurfacesLighting(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData, in vec2 shadowBias)
    {
      vec3 worldPos;
      HIGHP_VALUE_FROM_STRUCT_DEFINED(worldPos, surfaceData.worldPos);

      LightingIntermediateData lightingData;
      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);

      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);

      lightingResult.directDiffuse = lightingResult.directSpecular = vec3(0.0);

      int numLights = CC_PIPELINE_TYPE == CC_PIPELINE_TYPE_FORWARD ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);
      for (int i = 0; i < LIGHTS_PER_PASS; i++) {
        if (i >= numLights) break;

        CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, cc_lightPos[i].xyz - worldPos);
        CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);
  
        vec3 diffuseLighting, specularLighting;
        CCSurfacesLightingCalculateDirect(diffuseLighting, specularLighting, lightingData, cc_lightColor[i]);
        
        float shadow = 1.0;
      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == CC_SHADOW_MAP
        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {
          if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {
            vec4 shadowPos = cc_matLightViewProj * vec4(surfaceData.worldPos, 1.0);
            shadow = CCSpotShadowFactorBase(shadowPos, worldPos, shadowBias);
          }
        }
      #endif
      
      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC
        if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW) {
          shadow = 1.0;
        }
      #endif

        float distAtt = CCSurfacesLightingCalculateDistanceAttenuation(lightingData, cc_lightSizeRangeAngle[i]);

        float angleAtt = 1.0;
        if (cc_lightPos[i].w > 0.0) {
          angleAtt = CCSurfacesLightingCalculateAngleAttenuation(lightingData, cc_lightSizeRangeAngle[i], -cc_lightDir[i].xyz);
        }

        float multiplier = distAtt * angleAtt * shadow;

        lightingResult.directDiffuse += diffuseLighting * multiplier;
        lightingResult.directSpecular += specularLighting * multiplier;
      }
    }
  #else
    void CCSurfacesLighting(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData, in vec2 shadowBias)
    {
      LightingIntermediateData lightingData;
      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);
      CCSurfacesInitializeLightingResult(lightingResult, surfaceData);
      
      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);

      CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, -cc_mainLitDir.xyz);

      // CCSurfacesLightingCalculateShadow:
      lightingResult.shadow = 1.0;
      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == CC_SHADOW_MAP
        if (cc_mainLitDir.w > 0.0) {
          if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {
            if (cc_shadowLPNNInfo.w > 0.0) {
              #if CC_DIR_LIGHT_SHADOW_TYPE == CC_DIR_LIGHT_SHADOW_CASCADED
                lightingResult.shadow = CCCSMFactorBase(surfaceData.worldPos, lightingData.N, shadowBias);
              #endif
            } else {
              #if CC_DIR_LIGHT_SHADOW_TYPE == CC_DIR_LIGHT_SHADOW_UNIFORM
                vec4 shadowPos = cc_matLightViewProj * vec4(surfaceData.worldPos, 1.0);
                lightingResult.shadow = CCShadowFactorBase(shadowPos, lightingData.N, shadowBias);
              #endif
            }
          }
        }
      #endif

      // CCSurfacesLightingCalculateBaked:
      lightingResult.lightmapColor = vec3(0.0);
      #if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD
        vec4 lightmap = GetLightMapColor(cc_lightingMap, FSInput_lightMapUV.xy, FSInput_lightMapUV.z);
        lightingResult.lightmapColor = lightmap.rgb;
        // lightingResult.shadow/ao *= lightmap.a;

        // static dir light
        lightingResult.directDiffuse = lightingResult.directSpecular = vec3(0.0);
      // dynamic & stationary dir light
      #else
        CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);
  
        CCSurfacesLightingCalculateDirect(lightingResult.directDiffuse, lightingResult.directSpecular, lightingData, cc_mainLitColor);
      #endif

      // apply SSR, local probe & global probe
      CCSurfacesLightingCalculateEnvironment(lightingResult, lightingData);
      
      // CCSurfacesLightingCalculateTransmittence(lightingResult, lightingData, shadowPos);

      // apply screen-space shadow and ao
      // lightingResult.shadow/ao *= XXX;



      //#todo: cluster related lighting flow
      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING
        //#include <legacy/shading-cluster-additive>
      #endif
    }
  #endif
#endif
