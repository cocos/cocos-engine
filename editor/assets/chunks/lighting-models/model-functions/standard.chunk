#include <common/lighting/brdf>
#include <common/lighting/functions>
#include <lighting-models/model-functions/standard-common>

bool CCSurfacesLightingEnableShadow(in float NoL)
{
  return NoL > 0.0;
}

float CCSurfacesLightingCalculateDistanceAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle)
{
  return CalculateDistanceAttenuation(lightingData.distToLightSqr, lightSizeRangeAngle.x, lightSizeRangeAngle.y);
}

float CCSurfacesLightingCalculateAngleAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle, in vec3 spotLightDir)
{
  return CalculateAngleAttenuation(spotLightDir, lightingData.L, lightSizeRangeAngle.z);
}

void CCSurfacesLightingCalculateDirect(out vec3 lightingDiffuse, out vec3 lightingSpecular, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)
{
  LightingCalculateDirect(lightingDiffuse, lightingSpecular, lightingData, lightSourceColorAndIntensity);
}


void CCSurfacesLightingCalculateEnvironment(out vec3 lightingDiffuse, out vec3 lightingSpecular, in LightingIntermediateData lightingData, float lightIntensity)
{
  lightingDiffuse = CalculateEnvironmentDiffuse(lightingData, lightIntensity);
  lightingSpecular = CalculateEnvironmentSpecular(lightingData, lightIntensity);
}


#if CC_SURFACES_LIGHTING_TRANSMITTENCE
  vec3 CCSurfacesLightingCalculateDirectTransmittence(in LightingResult lightingResult, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)
  {
    vec3 backIrradiance = vec3(saturate(-lightingData.NoL)) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;
    vec3 transmitDiffuse = backIrradiance * DiffuseCoefficient_EnergyConservation;
    //todo: add some
    lightingData.transmittenceParams;
    return vec3(0.0);
  }
  vec3 CCSurfacesLightingCalculateEnvironmentTransmittence(in LightingResult lightingResult, in LightingIntermediateData lightingData, float lightIntensity)
  {
    // negativate lightingData.N before invoking CalculateEnvironmentDiffuse
    lightingData.N *= -1.0;
    vec3 backIrradiance = CalculateEnvironmentDiffuse(lightingData, lightIntensity);
    lightingData.transmittenceParams;
    return vec3(0.0);
  }  
#endif

#if CC_SURFACES_LIGHTING_TRT
  // this surface function used for adjust TRT color with brdf lighting, input are lighting result and surface data
  // the default function can only be defined here
  #ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_SPECULAR_COLOR
    vec3 SurfacesLightingGetTRTSpecularColor(float specBRDF, bool isSaturated)
    {
      return vec3(specBRDF);
    }
  #endif
  
  void CCSurfacesLightingCalculateDirectTRT(out vec3 TRTColor, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)
  {
    vec3 unused;
    // light color has less influence
    CCSurfacesLightingCalculateDirect(unused, TRTColor, lightingData, vec4(1.0));
    vec3 Color = SurfacesLightingGetTRTSpecularColor(TRTColor.x, true);
    // todo: modify Color to add some light color influence
    TRTColor *= Color * lightSourceColorAndIntensity.w;
  }

  void CCSurfacesLightingCalculateEnvironmentTRT(out vec3 TRTColor, in LightingIntermediateData lightingData, float lightIntensity)
  {
    vec3 unused;
    // light color has less influence
    TRTColor = CalculateEnvironmentSpecular(lightingData, 1.0);
    float brdf = length(TRTColor);
    vec3 Color = SurfacesLightingGetTRTSpecularColor(brdf, false);
    // todo: modify Color to add some light color influence
    TRTColor *= Color * lightIntensity;
  }
    
#endif
