#include <common/lighting/brdf>
#include <common/lighting/bxdf>
#include <common/lighting/attenuation>
#include <common/lighting/functions>
#include <lighting-models/model-functions/standard-common>

bool CCSurfacesLightingEnableShadow(in float NoL)
{
  return NoL > 0.0;
}

float CCSurfacesLightingCalculateDistanceAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle)
{
  return CalculateDistanceAttenuation(lightingData.distToLightSqr, lightSizeRangeAngle.x, lightSizeRangeAngle.y);
}

float CCSurfacesLightingCalculateAngleAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle, in vec3 spotLightDir)
{
  return CalculateAngleAttenuation(spotLightDir, lightingData.L, lightSizeRangeAngle.z);
}

void CCSurfacesLightingCalculateDirect(out vec3 lightingDiffuse, out vec3 lightingSpecular, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)
{
#if CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE
  lightingDiffuse = CalculateDirectDiffuse(lightingData, lightSourceColorAndIntensity);
#else
  lightingDiffuse = vec3(0.0);
#endif

#if CC_SURFACES_LIGHTING_CALCULATE_SPECULAR
  lightingSpecular = CalculateDirectSpecular(lightingData, lightSourceColorAndIntensity);
#else
  lightingSpecular = vec3(0.0);
#endif
}


void CCSurfacesLightingCalculateEnvironment(out vec3 lightingDiffuse, out vec3 lightingSpecular, in LightingIntermediateData lightingData, float lightIntensity)
{
#if CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE
  lightingDiffuse = CalculateEnvironmentDiffuse(lightingData, lightIntensity);
#else
  lightingDiffuse = vec3(0.0);
#endif

#if CC_SURFACES_LIGHTING_CALCULATE_SPECULAR
  lightingSpecular = CalculateEnvironmentSpecular(lightingData, lightIntensity);
#else
  lightingSpecular = vec3(0.0);
#endif
}

#if CC_SURFACES_LIGHTING_USE_FRESNEL
  float CCSurfaceLightingCalculateFresnel(in LightingIntermediateData lightingData)
  {
    return CalculateFresnelCoefficient(lightingData.ior, abs(lightingData.NoV)); //NoVSat for single side, and NoVAbs for two sided
  }
#endif

#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR
  // do not support anisotropy
  void CCSurfacesLightingCalculateDirectTransmitSpecular(out vec3 lightingSpecular, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)
  {
    float roughness = lightingData.specularParam;
    float NoLSat = saturate(dot(lightingData.N, -lightingData.L));
    vec3 irradiance = NoLSat * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;

    vec3 R = CalculateRefractDirection(lightingData.N, lightingData.V, lightingData.NoV, lightingData.ior);
    float RoL = dot(lightingData.L, normalize(R));
    float calcSpec = D_GGX(roughness, saturate(RoL));
    
    lightingSpecular = irradiance * calcSpec;
  }
  void CCSurfacesLightingCalculateEnvironmentTransmitSpecular(out vec3 lightingSpecular, in LightingIntermediateData lightingData, float lightIntensity)
  {
    vec3 envSpec = vec3(0.0);
    vec3 R = CalculateRefractDirection(lightingData.N, lightingData.V, lightingData.NoV, lightingData.ior);
    float roughness = lightingData.specularParam;
    
  #if CC_USE_REFLECTION_PROBE
    #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_CUBE
      envSpec = EnvReflection(cc_reflectionProbeCubemap, R, roughness, cc_ambientGround.w);
    #endif
    //todo: planar refraction from scene color
  #endif

  #if CC_USE_IBL && CC_USE_REFLECTION_PROBE != REFLECTION_PROBE_TYPE_CUBE
    envSpec = EnvReflection(cc_environment, R, roughness, cc_ambientGround.w);
  #endif

    lightingSpecular = envSpec * lightIntensity;

    // scattering
    float distance = lightingData.transmitParams.w, inScatterCoef = lightingData.transmitParams.z;
    vec2 e = lightingData.transmitParams.xy;
    vec2 extinction = exp(-e * distance * vec2(1.0, inScatterCoef));
    vec3 inScattered = (1.0 - extinction.y) * lightingData.inScatteringLightColor.rgb;
    lightingSpecular = lightingSpecular * extinction.x + inScattered;
  }
#endif

#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE
  void CCSurfacesLightingCalculateDirectTransmitDiffuse(out vec3 transmitDiffuse, in LightingResult lightingResult, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)
  {
    vec3 backIrradiance = vec3(saturate(-lightingData.NoL)) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;
    vec3 transmitDiffuse = backIrradiance * DiffuseCoefficient_EnergyConservation;
    //todo: add some
    lightingData.transmitParams;
    lightingData.transmitDiffuseParams;
    transmitDiffuse = vec3(0.0);
  }
  void CCSurfacesLightingCalculateEnvironmentTransmitDiffuse(out vec3 transmitDiffuse, in LightingResult lightingResult, in LightingIntermediateData lightingData, float lightIntensity)
  {
    // negativate lightingData.N before invoking CalculateEnvironmentDiffuse
    lightingData.N *= -1.0;
    vec3 backIrradiance = CalculateEnvironmentDiffuse(lightingData, lightIntensity);
    lightingData.transmitParams;
    lightingData.transmitDiffuseParams;
    transmitDiffuse = vec3(0.0); //backIrradiance * lightingResult.ao;
  }  
#endif

#if CC_SURFACES_LIGHTING_TRT
  // this surface function used for adjust TRT color with brdf lighting, input are lighting result and surface data
  // the default function can only be defined here
  #ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_SPECULAR_COLOR
    vec3 SurfacesLightingGetTRTSpecularColor(float specBRDF, bool isSaturated)
    {
      return vec3(specBRDF);
    }
  #endif
  
  void CCSurfacesLightingCalculateDirectTRT(out vec3 TRTLighting, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)
  {
    vec3 unused;
    // light color has less influence
    CCSurfacesLightingCalculateDirect(unused, TRTLighting, lightingData, vec4(1.0));
    float brdf = TRTLighting.x;
    vec3 Color = SurfacesLightingGetTRTSpecularColor(brdf, true);
    // todo: modify Color to add some light color influence
    TRTLighting *= Color * lightSourceColorAndIntensity.w;
  }

  void CCSurfacesLightingCalculateEnvironmentTRT(out vec3 TRTLighting, in LightingIntermediateData lightingData, float lightIntensity)
  {
    vec3 unused;
    // light color has less influence
    TRTLighting = CalculateEnvironmentSpecular(lightingData, 1.0);
    float brdf = length(TRTLighting);
    vec3 Color = SurfacesLightingGetTRTSpecularColor(brdf, false);
    // todo: modify Color to add some light color influence
    TRTLighting *= Color * lightIntensity;
  }
#endif

#if CC_SURFACES_LIGHTING_TT
  // TT is a hacked fabric simulation algorithm
  void CCSurfacesLightingCalculateDirectTT(inout LightingResult lightingResult, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)
  {
    lightingResult.diffuseColorWithLightingTT = lightingResult.diffuseColorWithLighting;
    float w = lightingData.ttIntensity;
    // w = 0 equals to diffuse lighting without scattering
    // ttScatterCoef start from 0.0
    vec3 scatteredLighting = pow(saturate(lightingData.baseColorTT * w + lightingData.NoLSat) * lightingData.NoLSat, vec3(mix(0.5, 0.5 + lightingData.ttScatterCoef, w)));
    // scattered = tt + origin diffuse
    vec3 ttLighting = scatteredLighting - lightingData.NoLSat;
    lightingResult.directTT = ttLighting * DiffuseCoefficient_EnergyConservation * lightSourceColorAndIntensity.xyz* lightSourceColorAndIntensity.w;
  }
#endif
