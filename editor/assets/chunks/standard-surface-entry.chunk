// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

#include <shading-standard-base>
#include <output-standard>
#include <cc-fog-fs>
#include <cc-shadow-map-fs>


#define CC_STANDARD_SURFACE_ENTRY()                                \
#if CC_FORWARD_ADD                                                 \
  #include <shading-standard-additive>                             \
  #if CC_DEVICE_SUPPORT_COMPUTE_SHADER == 1 && CC_PIPELINE_TYPE == CC_PIPELINE_TYPE_DEFERRED \
  #include <shading-cluster-additive>                              \
  #endif                                                           \
                                                                   \
  layout(location = 0) out vec4 fragColorX;                        \
                                                                   \
  void main () {                                                   \
    StandardSurface s; surf(s);                                    \
    #if CC_DEVICE_SUPPORT_COMPUTE_SHADER == 1 && CC_PIPELINE_TYPE == CC_PIPELINE_TYPE_DEFERRED \
    vec4 color = CCClusterShadingAdditive(s, CC_SHADOW_POSITION);                        \
    #else                                                          \
    vec4 color = CCStandardShadingAdditive(s, CC_SHADOW_POSITION); \
    #endif                                                         \
    CC_APPLY_FOG(color);                                           \
    fragColorX = CCFragOutput(color);                              \
  }                                                                \
                                                                   \
#elif (CC_PIPELINE_TYPE == CC_PIPELINE_TYPE_FORWARD || CC_FORCE_FORWARD_SHADING) \
                                                                   \
  layout(location = 0) out vec4 fragColorX;                        \
                                                                   \
  void main () {                                                   \
    StandardSurface s; surf(s);                                    \
    vec4 color = CCStandardShadingBase(s, CC_SHADOW_POSITION);     \
    CC_APPLY_FOG(color);                                           \
    fragColorX = CCFragOutput(color);                              \
  }                                                                \
                                                                   \
#elif CC_PIPELINE_TYPE == CC_PIPELINE_TYPE_DEFERRED                \
                                                                   \
  layout(location = 0) out vec4 fragColor0;                        \
  layout(location = 1) out vec4 fragColor1;                        \
  layout(location = 2) out vec4 fragColor2;                        \
  layout(location = 3) out vec4 fragColor3;                        \
                                                                   \
  void main () {                                                   \
    StandardSurface s; surf(s);                                    \
    fragColor0 = s.albedo;                                         \
    fragColor1 = vec4(s.position, s.roughness);                    \
    fragColor2 = vec4(s.normal, s.metallic);                       \
    fragColor3 = vec4(s.emissive, s.occlusion);                    \
  }                                                                \
                                                                   \
#endif                                                             \
#pragma // empty pragma trick to get rid of trailing semicolons at effect compile time
