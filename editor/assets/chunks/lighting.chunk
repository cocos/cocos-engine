// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

#include <cc-forward-light>

float SmoothDistAtt2 (float distSqr, float invSqrAttRadius) {
  float factor = distSqr * invSqrAttRadius; // ^2
  float factor2 = factor * factor; // ^4
  float factor3 = factor2 * factor2; // ^8
  float smoothFactor = clamp(1.0 - factor3 * factor3, 0.0, 1.0);
  return smoothFactor * smoothFactor;
}

float SmoothDistAtt (float distSqr, float invSqrAttRadius) {
  float factor = distSqr * invSqrAttRadius;
  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);
  return smoothFactor * smoothFactor;
}

float GetDistAtt (float distSqr, float invSqrAttRadius) {
  float attenuation = 1.0 / max(distSqr, 0.01*0.01);
  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);
  return attenuation;
}

float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {
  float cd = dot(litDir, L);
  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);
  return (attenuation * attenuation);
}


float GetAttenPoint(float range,  vec3 normal, vec3 SLU) {
  vec3 lightVec = SLU * (1.0 / range);
  float lightDist = length(lightVec);
  float falloff = pow( clamp(1.0 - pow(lightDist , 4.0), 0.0, 1.0), 2.0) / 4.0 * PI * (pow(lightDist, 2.0) + 1.0 );
  vec3 lightDir = lightVec / lightDist;

  return clamp(dot(normal, lightDir), 0.0, 1.0) * falloff;
}