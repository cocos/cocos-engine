// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

#include <cc-global>
#include <cc-shadow>
#include <packing>

// When screenSpaceSingY and clipSpaceSignY have different signs, need to flip the uv
#define CC_HANDLE_NDC_SAMPLE_FLIP(uv) uv = cc_cameraPos.w == 1.0 ? vec2(uv.x, 1.0 - uv.y) : uv

#if CC_RECEIVE_SHADOW
  #pragma builtin(global)
  layout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;

  #pragma builtin(global)
  layout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;

  float CCGetLinearDepth (vec3 worldPos) {
    vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);
    float dist = length(viewStartPos.xyz);
    return cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));
  }

  float CCGetShadowFactorHard (vec4 shadowPos) {
    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }

    float shadow = 0.0;
    float closestDepth = 0.0;
    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);
    if (cc_shadowLPNNInfo.y > 0.000001) {
      closestDepth = unpackRGBAToDepth(texture(cc_shadowMap, clipPos.xy));
    } else {
      closestDepth = texture(cc_shadowMap, clipPos.xy).x;
    }

    shadow = step(closestDepth, clipPos.z- cc_shadowWHPBInfo.w);

    return shadow;
  }

  float CCGetShadowFactorSoft (vec4 shadowPos) {
    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }

    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);

    float offsetDepth = clipPos.z - cc_shadowWHPBInfo.w;
    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;
    vec2 clipPos_offset = clipPos.xy + oneTap;
    vec4 block;
    if (cc_shadowLPNNInfo.y > 0.000001) {
      block.x = step(unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y))), offsetDepth);
      block.y = step(unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y))), offsetDepth);
      block.z = step(unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y))), offsetDepth);
      block.w = step(unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y))), offsetDepth);
    } else {
      block.x = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x, offsetDepth);
      block.y = step(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x, offsetDepth);
      block.z = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x, offsetDepth);
      block.w = step(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x, offsetDepth);
    }

    float coefX = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;
    vec2 resultX = mix(block.xz, block.yw, vec2(coefX));
    float coefY = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;
    return mix(resultX.x, resultX.y, coefY);
  }

  float CCGetShadowFactorSoft2X (vec4 shadowPos) {
    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }
    
    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);

    float bias = cc_shadowWHPBInfo.w;
    float offsetDepth = clipPos.z - bias;
    vec2 mapSize = cc_shadowWHPBInfo.xy;
    vec2 oneTap = 1.0 / mapSize;
    float clipPos_offset_L = clipPos.x - oneTap.x;
    float clipPos_offset_R = clipPos.x + oneTap.x;
    float clipPos_offset_U = clipPos.y - oneTap.y;
    float clipPos_offset_D = clipPos.y + oneTap.y;

    float point_0, point_1, point_2, point_3, point_4, point_5, point_6, point_7, point_8;
    if (cc_shadowLPNNInfo.y > 0.000001) {
      point_0 = step(unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U))), offsetDepth);
      point_1 = step(unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U))), offsetDepth);
      point_2 = step(unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U))), offsetDepth);
      point_3 = step(unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y))), offsetDepth);
      point_4 = step(unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y))), offsetDepth);
      point_5 = step(unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y))), offsetDepth);
      point_6 = step(unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D))), offsetDepth);
      point_7 = step(unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D))), offsetDepth);
      point_8 = step(unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D))), offsetDepth);
    } else {
      point_0 = step(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x, offsetDepth);
      point_1 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x, offsetDepth);
      point_2 = step(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x, offsetDepth);
      point_3 = step(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x, offsetDepth);
      point_4 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x, offsetDepth);
      point_5 = step(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x, offsetDepth);
      point_6 = step(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x, offsetDepth);
      point_7 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x, offsetDepth);
      point_8 = step(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x, offsetDepth);
    }

    vec4 block_0 = vec4(point_0, point_1, point_3, point_4);
    vec4 block_1 = vec4(point_1, point_2, point_4, point_5);
    vec4 block_2 = vec4(point_3, point_4, point_6, point_7);
    vec4 block_3 = vec4(point_4, point_5, point_7, point_8);

    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;
    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;

    float count = 0.0;
    vec2 resultX = mix(block_0.xz, block_0.yw, vec2(coefX));
    count += mix(resultX.x , resultX.y, coefY);

    resultX = mix(block_1.xz, block_1.yw, vec2(coefX));
    count += mix(resultX.x , resultX.y, coefY);

    resultX = mix(block_2.xz, block_2.yw, vec2(coefX));
    count += mix(resultX.x , resultX.y, coefY);

    resultX = mix(block_3.xz, block_3.yw, vec2(coefX));
    count += mix(resultX.x , resultX.y, coefY);

    return count * 0.25;
  }

  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {
    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }

    float shadow = 0.0;
    float closestDepth = 0.0;
    float depth = 0.0;
    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);  
    if (cc_shadowNFLSInfo.z > 0.000001) {
      depth = CCGetLinearDepth(worldPos);
    } else {
      depth = clipPos.z;
    }

    if (cc_shadowLPNNInfo.y > 0.000001) {
      closestDepth = unpackRGBAToDepth(texture(cc_spotLightingMap, clipPos.xy));
    } else {
      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;
    }
    shadow = step(closestDepth, depth - cc_shadowWHPBInfo.w);

    return shadow;
  }

  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {
    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }

    float offsetx = 1.0 / cc_shadowWHPBInfo.x;
    float offsety = 1.0 / cc_shadowWHPBInfo.y;
    float shadow = 0.0;
    float depth = 0.0;

    // enbaled linear depth?
    if (cc_shadowNFLSInfo.z > 0.000001) {
      depth = CCGetLinearDepth(worldPos);
    } else {
      depth = clipPos.z;
    }
    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);
    // enbaled packing?
    if (cc_shadowLPNNInfo.y > 0.000001) {
      float closestDepth = unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)));
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
      closestDepth = unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)));
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
      closestDepth = unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)));
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
      closestDepth = unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)));
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
      closestDepth = unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)));
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
    } else {
      float closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
      closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
      closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x;
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
      closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
      closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
    }

    return shadow / 5.0;
  }

  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {
    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }

    float offsetx = 1.0 / cc_shadowWHPBInfo.x;
    float offsety = 1.0 / cc_shadowWHPBInfo.y;
    float shadow = 0.0;
    float depth = 0.0;

    if (cc_shadowNFLSInfo.z > 0.000001) {
      depth = CCGetLinearDepth(worldPos);
    } else {
      depth = clipPos.z;
    }
    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);
    if (cc_shadowLPNNInfo.y > 0.000001) {
      for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
          float closestDepth = unpackRGBAToDepth(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)));
          shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
        }
      }
    } else {
      for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
          float closestDepth = texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;
          shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
        }
      }
    }

    return shadow / 9.0;
  }
#endif

#define CC_SPOT_SHADOW_FACTOR_BASE(finalColor, shadowPos, worldPos, lightPos, normal)               \
{                                                                                                   \
  float pcf = cc_shadowWHPBInfo.z + 0.001;                                                          \
  float shadowAttenuation = 0.0;                                                                    \
  float cosAngle = clamp(1.0 - dot(normal, normalize(lightPos.xyz - worldPos.xyz)), 0.0, 1.0);      \
  vec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * normal;                      \
  vec4 pos = vec4(projWorldPos.xyz, shadowPos.w);                                                   \
  if (pcf > 2.0) shadowAttenuation = CCGetSpotLightShadowFactorSoft2X(pos, worldPos);               \
  else if (pcf > 1.0) shadowAttenuation = CCGetSpotLightShadowFactorSoft(pos, worldPos);            \
  else shadowAttenuation = CCGetSpotLightShadowFactorHard(pos, worldPos);                           \
  finalColor *= 1.0 - shadowAttenuation;                                                            \
}                                                                                                   \
#pragma // empty pragma trick to get rid of trailing semicolons at effect compile time

#define CC_SHADOW_FACTOR_BASE(finalColor, atten, shadowPos, lightDir, normal)                                               \
{                                                                                                                           \
  float pcf = cc_shadowWHPBInfo.z + 0.001;                                                                                  \
  float shadowAttenuation = 0.0;                                                                                            \
  float cosAngle = clamp(1.0 - dot(normal, lightDir.xyz), 0.0, 1.0);                                                        \
  vec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * normal;                                              \
  vec4 pos = vec4(projWorldPos.xyz, shadowPos.w);                                                                           \
  if (pcf > 2.0) shadowAttenuation = CCGetShadowFactorSoft2X(pos);                                                          \
  else if (pcf > 1.0) shadowAttenuation = CCGetShadowFactorSoft(pos);                                                       \
  else shadowAttenuation = CCGetShadowFactorHard(pos);                                                                      \
  vec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);                     \
  if (cc_shadowNFLSInfo.w > 0.000001) {                                                                                     \
    finalColor.rgb = shadowColor.rgb * shadowAttenuation + finalColor.rgb * (1.0 - shadowAttenuation);                      \
  } else {                                                                                                                  \
    finalColor.rgb = shadowColor.rgb * shadowAttenuation * atten + finalColor.rgb * (1.0 - shadowAttenuation * atten);      \
  }                                                                                                                         \
}                                                                                                                           \
#pragma // empty pragma trick to get rid of trailing semicolons at effect compile time

#define CC_TRANSFER_SHADOW_BASE(pos, shadowPos) \
shadowPos = cc_matLightViewProj * pos
