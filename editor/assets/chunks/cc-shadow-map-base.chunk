// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

#include <cc-global>
#include <cc-shadow>
#include <cc-csm>
#include <packing>
#include <cc-local>

// When screenSpaceSingY and clipSpaceSignY have different signs, need to flip the uv
#pragma define CC_HANDLE_NDC_SAMPLE_FLIP(uv) uv = cc_cameraPos.w == 1.0 ? vec2(uv.x, 1.0 - uv.y) : uv

float CCGetLinearDepthFromViewSpace(vec3 viewPos) {
  float dist = length(viewPos);
  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);
}

float CCGetLinearDepth(vec3 worldPos) {
  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);
  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);
}

float CCGetViewSpaceDepth(float depthHS)
{
   return cc_shadowProjDepthInfo.y / (depthHS - cc_shadowProjDepthInfo.x);
}

#if CC_RECEIVE_SHADOW
  #pragma builtin(global)
  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;

  #pragma builtin(global)
  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;

  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)
  {
    vec4 newShadowPos = shadowPos;
    if(normalBias > 0.0001)
    {
      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);
      if(viewNormal.z < 0.1)
        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);
    }
    return newShadowPos;
  }
  
  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)
  {
    // Recover the coord in view space: cc_matLightInvProj * shadowPos
    vec3 viewSpacePos;
    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;
    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;

    // Apply bias
    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;

    // Reconstuct clipspace: cc_matLightProj * viewSpacePos
    vec4 clipSpacePos;
    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;
    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);

    // enabled linear depth?
    if (cc_shadowNFLSInfo.z > 0.000001) {
      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);
      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;
    }

    return clipSpacePos;
  }

  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)
  {
    float coeffA = cc_shadowProjDepthInfo.x;
    float coeffB = cc_shadowProjDepthInfo.y;

    // Recover the Z distance in view space:
    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;

    // Apply bias
    viewSpacePos_z += viewspaceDepthBias;

    // Reconstuct clipspace
    vec4 result = shadowPos;
    result.z = viewSpacePos_z * coeffA + coeffB;
    return result;
  }
  
  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {
    vec4 clipPosNew = shadowPos;//ApplyShadowDepthBias_Orthographic(shadowPos, bias);
    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }
    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);

    float shadow = 0.0;
    float closestDepth = 0.0;
    if (cc_shadowLPNNInfo.y > 0.000001) {
      closestDepth = unpackRGBAToDepth(texture(cc_shadowMap, clipPos.xy));
    } else {
      closestDepth = texture(cc_shadowMap, clipPos.xy).x;
    }
    shadow = step(clipPos.z, closestDepth);

    return shadow;
  }

  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {
    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);
    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }
    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);

    float offsetDepth = clipPos.z;
    vec2 mapSize = cc_shadowWHPBInfo.xy;
    vec2 oneTap = 1.0 / mapSize;
    vec2 clipPos_offset = clipPos.xy + oneTap;

    float block0, block1, block2, block3;
    if (cc_shadowLPNNInfo.y > 0.000001) {
      block0 = step(offsetDepth, unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y))));
      block1 = step(offsetDepth, unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y))));
      block2 = step(offsetDepth, unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y))));
      block3 = step(offsetDepth, unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y))));
    } else {
      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);
      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);
      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);
      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);
    }

    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;
    float resultX = mix(block0, block1, coefX);
    float resultY = mix(block2, block3, coefX);
    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;

    return mix(resultX, resultY, coefY);
  }

  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {
    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);
    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }
    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);

    float offsetDepth = clipPos.z;
    vec2 mapSize = cc_shadowWHPBInfo.xy;
    vec2 oneTap = 1.0 / mapSize;
    float clipPos_offset_L = clipPos.x - oneTap.x;
    float clipPos_offset_R = clipPos.x + oneTap.x;
    float clipPos_offset_U = clipPos.y - oneTap.y;
    float clipPos_offset_D = clipPos.y + oneTap.y;

    float block0, block1, block2, block3, block4, block5, block6, block7, block8;
    if (cc_shadowLPNNInfo.y > 0.000001) {
      block0 = step(offsetDepth, unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U))));
      block1 = step(offsetDepth, unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U))));
      block2 = step(offsetDepth, unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U))));
      block3 = step(offsetDepth, unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y))));
      block4 = step(offsetDepth, unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y))));
      block5 = step(offsetDepth, unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y))));
      block6 = step(offsetDepth, unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D))));
      block7 = step(offsetDepth, unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D))));
      block8 = step(offsetDepth, unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D))));
    } else {
      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);
      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);
      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);
      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);
      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);
      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);
      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);
      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);
      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);
    }

    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;
    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;

    float shadow = 0.0;
    float resultX = mix(block0, block1, coefX);
    float resultY = mix(block3, block4, coefX);
    shadow += mix(resultX , resultY, coefY);

    resultX = mix(block1, block2, coefX);
    resultY = mix(block4, block5, coefX);
    shadow += mix(resultX , resultY, coefY);

    resultX = mix(block3, block4, coefX);
    resultY = mix(block6, block7, coefX);
    shadow += mix(resultX, resultY, coefY);

    resultX = mix(block4, block5, coefX);
    resultY = mix(block7, block8, coefX);
    shadow += mix(resultX, resultY, coefY);

    return shadow * 0.25;
  }

  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {
    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);
    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }
    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);

    float shadow = 0.0;
    float closestDepth = 0.0;
    float depth = clipPos.z;

    if (cc_shadowLPNNInfo.y > 0.000001) {
      closestDepth = unpackRGBAToDepth(texture(cc_spotLightingMap, clipPos.xy));
    } else {
      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;
    }
    shadow = step(depth, closestDepth);

    return shadow;
  }

  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {
    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);
    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }
    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);

    float depth = 0.0;
    if (cc_shadowNFLSInfo.z > 0.000001) {
      depth = CCGetLinearDepth(worldPos);
    } else {
      depth = clipPos.z;
    }

    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;
    vec2 clipPos_offset = clipPos.xy + oneTap;

    float block0, block1, block2, block3;
    if (cc_shadowLPNNInfo.y > 0.000001) {
      block0 = step(depth, unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y))));
      block1 = step(depth, unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y))));
      block2 = step(depth, unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y))));
      block3 = step(depth, unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y))));
    } else {
      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);
      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);
      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);
      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);
    }

    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;
    float resultX = mix(block0, block1, coefX);
    float resultY = mix(block2, block3, coefX);
    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;

    return mix(resultX, resultY, coefY);
  }

  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {
    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);
    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }
    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);

    float depth = 0.0;
    if (cc_shadowNFLSInfo.z > 0.000001) {
      depth = CCGetLinearDepth(worldPos);
    } else {
      depth = clipPos.z;
    }

    vec2 mapSize = cc_shadowWHPBInfo.xy;
    vec2 oneTap = 1.0 / mapSize;
    float clipPos_offset_L = clipPos.x - oneTap.x;
    float clipPos_offset_R = clipPos.x + oneTap.x;
    float clipPos_offset_U = clipPos.y - oneTap.y;
    float clipPos_offset_D = clipPos.y + oneTap.y;

    float block0, block1, block2, block3, block4, block5, block6, block7, block8;
    if (cc_shadowLPNNInfo.y > 0.000001) {
      block0 = step(depth, unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U))));
      block1 = step(depth, unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U))));
      block2 = step(depth, unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U))));
      block3 = step(depth, unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y))));
      block4 = step(depth, unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y))));
      block5 = step(depth, unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y))));
      block6 = step(depth, unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D))));
      block7 = step(depth, unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D))));
      block8 = step(depth, unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D))));
    } else {
      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);
      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);
      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);
      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);
      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);
      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);
      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);
      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);
      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);
    }

    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;
    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;

    float shadow = 0.0;
    float resultX = mix(block0, block1, coefX);
    float resultY = mix(block3, block4, coefX);
    shadow += mix(resultX , resultY, coefY);

    resultX = mix(block1, block2, coefX);
    resultY = mix(block4, block5, coefX);
    shadow += mix(resultX , resultY, coefY);

    resultX = mix(block3, block4, coefX);
    resultY = mix(block6, block7, coefX);
    shadow += mix(resultX, resultY, coefY);

    resultX = mix(block4, block5, coefX);
    resultY = mix(block7, block8, coefX);
    shadow += mix(resultX, resultY, coefY);

    return shadow * 0.25;
  }

float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)
{
  float pcf = cc_shadowWHPBInfo.z;
  if (pcf > 1.9) { 
    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);
  }else if (pcf > 0.9) { 
    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);
  }else { 
    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x); 
  }
}

float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)
{
  float realtimeShadow = 1.0;
  vec4 pos = shadowPos;//ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);
  
  float pcf = cc_shadowWHPBInfo.z;
  if (pcf > 1.9) { 
    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);
  }else if (pcf > 0.9) {
    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);
  }else { 
    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x); 
  }
  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);
}
#endif

#pragma define CC_TRANSFER_SHADOW_BASE(pos, shadowPos) shadowPos = CCGetShadowPos(pos);

vec4 CCGetShadowPos(vec4 pos) {
  int levels = int(cc_shadowLPNNInfo.w);
  if (levels > 1) {
    for (int i = 0; i < MAX_CSM_LEVLE_COUNT; i++){
      if(i >= levels) break;
      // pos = cc_matLightViewProjAtlas_levels[i] * pos;
      pos = cc_matLightViewProj_levels[i] * pos;
      pos.xy = pos.xy * 0.5 + vec2(-0.5, 0.5);
    return pos;
    }
  } else {
    return cc_matLightViewProj * pos;
  }
}

