#ifndef CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY
vec4 SurfacesFragmentModifyBaseColorAndTransparency()
{
    return FSInput_vertexColor;
}
#endif

#ifndef CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY
// for base shape without color usage, such as render-to-shadow
void SurfacesFragmentAlphaClipOnly()
{
}
#endif


#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL
vec3 SurfacesFragmentModifyWorldNormal()
{
    return normalize(FSInput_worldNormal);
}
#endif

#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_TANGENT_AND_BINORMAL
void SurfacesFragmentModifyWorldTangentAndBinormal(inout vec3 worldTangent, inout vec3 worldBinormal, vec3 worldNormal)
{
    vec3 tangent = FSInput_worldTangent;

#if CC_SURFACES_USE_TANGENT_SPACE
    vec3 binormal = normalize(CalculateBinormal(worldNormal.xyz, tangent, FSInput_mirrorNormal));
    tangent = normalize(cross(binormal, worldNormal));
#else
    vec3 binormal = vec3(0.0, 0.0, 0.0);
#endif

    worldTangent = tangent;
    worldBinormal = binormal;
}
#endif

#ifndef CC_SURFACES_FRAGMENT_MODIFY_IOR
float SurfacesFragmentModifyIOR()
{
    return 1.0;
}
#endif

#ifndef CC_SURFACES_FRAGMENT_MODIFY_ANISOTROPY_PARAMS
// isRotation=1.0: shape(0~1), rotation(0~2PI), 0.0, 0.0
// or
// isRotation=0.0: shape(0~1), anisoDir.xyz(-1~1)
vec4 SurfacesFragmentModifyAnisotropyParams(out float isRotation)
{
    isRotation = 1.0;
    return vec4(1.0, 0.0, 0.0, 0.0);
}
#endif

#ifndef CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE
vec3 SurfacesFragmentModifyEmissive()
{
    return vec3(0.0, 0.0, 0.0);
}
#endif

#ifndef CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS
vec4 SurfacesFragmentModifyPBRParams()
{
    // ao, roughness, metallic, specularIntensity
    return vec4(1.0, 0.5, 0.0, 0.5);
}
#endif

#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRANSMIT_PARAMS
void SurfacesFragmentModifyTransmitParams(out vec4 transmitParams, out vec3 inScatteringLightColor)
{
    // xy: extinction coef for out/in-scattering (should be same)
    // z: in-scattering coef (constant phase function)
    // w: transmit distance(water depth, leaf thickness)
    transmitParams = vec4(0.0, 0.0, 0.0, 0.0);
    inScatteringLightColor = vec3(0.0);
}
#endif

#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRANSMIT_DIFFUSE_PARAMS
vec4 SurfacesFragmentModifyTransmitDiffuseParams()
{
    // x: transmit irradiance apply shadow
    // y: additional transmit depth mask, add light transport for area which cannot be covered by shadowmap transmittance, or stand for thin transmittance
    // zw: min/max DepthWS for shadowmap, 0 means disable shadow transmit
    return vec4(1.0, 0.0, 0.0, 0.0);
}
#endif

#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_PARAMS
vec4 SurfacesFragmentModifyTRTParams()
{
    //x: roughness offset
    //y: lighting rotation offset
    //w: intensity
    return vec4(0.2, 0.0, 0.0, 1.0);
}
#endif
#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_COLOR
vec3 SurfacesFragmentModifyTRTColor()
{
    return vec3(1.0, 1.0, 1.0);
}
#endif

#ifndef CC_SURFACES_FRAGMENT_MODIFY_TT_PARAMS
vec4 SurfacesFragmentModifyTTParams()
{
    //x: scatter coef
    //w: intensity
    return vec4(0.0, 0.0, 0.0, 1.0);
}
#endif
#ifndef CC_SURFACES_FRAGMENT_MODIFY_TT_COLOR
vec3 SurfacesFragmentModifyTTColor(in vec3 baseColor, in vec3 trtColor)
{
    // baseColor and trtColor for reference
    return vec3(1.0, 1.0, 1.0);
}
#endif

// some material datas use shared raw data, avoid sample / calculate same raw data multiply times, use this function for better performance
// this function invokes at last
// should use corresponding shading-model header: #include <surfaces/data-structures/XXX> before function define
#ifndef CC_SURFACES_FRAGMENT_MODIFY_SHARED_DATA
void SurfacesFragmentModifySharedData(inout SurfacesMaterialData surfaceData)
{
}
#endif
