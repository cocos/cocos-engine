layout(location = 0) out vec4 fragColorX;
  
void main()  {
#if CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER
  float NoL = dot(-cc_mainLitDir.xyz, FSInput_worldNormal.xyz); //trigger ubo binding
  vec4 color = SurfacesFragmentModifyBaseColorAndTransparency();
#else
  // Surface
  SurfacesMaterialData surfaceData;
  CCSurfacesFragmentGetMaterialData(surfaceData);
  
  // Shadow factor
  highp vec4 shadowPos = vec4(0.0);
  vec2 shadowBias = vec2(0.0);
  vec3 colDebugCSMLayer = vec3(1.0);
  #if CC_RECEIVE_SHADOW
    shadowPos = cc_matLightViewProj * vec4(surfaceData.worldPos, 1.0);
    shadowBias = FSInput_shadowBias;
    #if !CC_FORWARD_ADD
      #if CC_USE_DEBUG_VIEW && CC_SURFACES_ENABLE_DEBUG_VIEW
        if (cc_debug_view_misc_enable_csm_layer_coloration > 0.0)
        {
			vec4 csmPos;
            int csmLayer = 0;//#todo: CCGetCSMLevel(csmPos, surfaceData.worldPos);
            bool OutOfRange = csmLayer < 0;
            if (OutOfRange)
                colDebugCSMLayer = vec3(1.0);
            else if (csmLayer == 0)
                colDebugCSMLayer = vec3(1.0, 0.0, 0.0);
            else if (csmLayer == 1)
                colDebugCSMLayer = vec3(0.0, 1.0, 0.0);
            else if (csmLayer == 2)
                colDebugCSMLayer = vec3(0.0, 0.0, 1.0);
            else if (csmLayer == 3)
                colDebugCSMLayer = vec3(0.0, 1.0, 1.0);
        }
      #endif
    #endif
  #endif

      
  // Fog factor
  #if !CC_FORWARD_ADD
    float fogFactor = 0.0;
    #if !CC_USE_ACCURATE_FOG
      fogFactor = FSInput_fogFactor;
    #else
      CC_TRANSFER_FOG_BASE(vec4(FSInput_worldPos, 1.0), fogFactor);
    #endif

    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW
      if (cc_debug_view_composite_enable_fog <= 0.0) {
          fogFactor = 0.0;
      }
    #endif
  #endif


  // Lighting
  LightingResult lightingResult;
  CCSurfacesLighting(lightingResult, surfaceData, shadowPos, shadowBias);


  // Debug view
  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && CC_SURFACES_ENABLE_DEBUG_VIEW
    vec4 debugColor = vec4(0.0, 0.0, 0.0, 1.0);
    #if !CC_FORWARD_ADD
      CCSurfacesDebugViewMeshData(debugColor);
      CCSurfacesDebugViewSurfaceData(debugColor, surfaceData);
      CCSurfacesDebugViewLightingResult(debugColor, lightingResult);
      if (IS_SINGLE_MODE(CC_SURFACES_DEBUG_VIEW_FOG))
      {
        fogFactor = 1.0 - fogFactor;
        debugColor = vec4(fogFactor, fogFactor, fogFactor, 1.0);
      }
    #endif

    // only base pass or direct lighting is enabled in add pass
    #if CC_FORWARD_ADD
      if (IS_SINGLE_MODE(CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE) || IS_SINGLE_MODE(CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR) || IS_SINGLE_MODE(CC_SURFACES_DEBUG_VIEW_DIRECT_ALL))
    #endif
      CCSurfacesDebugViewLightingResult(debugColor, lightingResult);

    fragColorX = debugColor;
    return;

  #elif CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW
    #if CC_FORWARD_ADD
      if(cc_debug_view_composite_enable_direct_diffuse > 0.0 || cc_debug_view_composite_enable_direct_specular > 0.0)
    #endif
    CCSurfacesDebugViewCompositeLightingResult(lightingResult);
  #endif


  // Shading
  vec4 color = CCSurfacesShading(surfaceData, lightingResult);

  #if !CC_FORWARD_ADD
    CC_APPLY_FOG_BASE(color, fogFactor);
  #endif

  // CSM Debug
  #if CC_USE_DEBUG_VIEW && CC_SURFACES_ENABLE_DEBUG_VIEW
    if (cc_debug_view_misc_enable_csm_layer_coloration > 0.0) {
        color.rgb *= colDebugCSMLayer.rgb;
    }
  #endif
#endif

    // Color output
  #if CC_USE_HDR
    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW
      if (cc_debug_view_composite_enable_tone_mapping > 0.0)
    #endif
      color.rgb = ACESToneMap(color.rgb);
  #endif
  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW
    if (cc_debug_view_composite_enable_gamma_correction > 0.0)
  #endif
  color.rgb = LinearToSRGB(color.rgb);


  CCSurfacesDebugDisplayInvalidNumber(color);

  fragColorX = color;
}
