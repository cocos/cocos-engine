// used for replacing cc-shadow-map-base.chunk
#include <cc-shadow>
#include <common>
#include <common/math/coordinates>

float CCGetLinearDepth(vec3 worldPos) {
	vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);
	return GetLinearDepthFromViewSpace(viewStartPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);
}

#if CC_RECEIVE_SHADOW
  #include <cc-global>
  #include <builtin/uniforms/cc-shadow-map>

  #include <packing>
  #include <common/shadow/native-pcf>
  

  //////////////////////////////////////////////////////////Helper Functions
  // When screenSpaceSingY and clipSpaceSignY have different signs, need to flip the uv
  #pragma define CC_HANDLE_NDC_SAMPLE_FLIP(uv) uv = cc_cameraPos.w == 1.0 ? vec2(uv.x, 1.0 - uv.y) : uv
  
  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)
  {
  	shadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;
  	if (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||
  		shadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||
  		shadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {
  		return false;
  	}
  	CC_HANDLE_NDC_SAMPLE_FLIP(shadowNDCPos.xy);
  	return true;
  }
  
  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)
  {
  	vec4 newShadowPos = shadowPos;
  	if (normalBias > EPSILON_LOWP)
  	{
  		vec4 viewNormal = matLightView * vec4(worldNormal, 0.0);
  		if (viewNormal.z < 0.1)
  			newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);
  	}
  	return newShadowPos;
  }
  
  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)
  {
  	// Recover the coord in view space: cc_matLightInvProj * shadowPos
  	vec3 viewSpacePos;
  	viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;
  	viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;
  
  	// Apply bias
  	viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;
  
  	// Reconstuct clipspace: cc_matLightProj * viewSpacePos
  	vec4 clipSpacePos;
  	clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;
  	clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);
  
  	// enabled linear depth?
  	if (cc_shadowNFLSInfo.z > EPSILON) {
  		clipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);
  		clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;
  	}
  
  	return clipSpacePos;
  }
  
  // (projScaleZ, projBiasZ) = cc_shadowProjDepthInfo.xy
  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)
  {
  	float coeffA = projScaleZ;
  	float coeffB = projBiasZ;
  
  	// Recover the Z distance in view space:
  	float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;
  
  	// Apply bias
  	viewSpacePos_z += viewspaceDepthBias;
  
  	// Reconstuct clipspace
  	vec4 result = shadowPos;
  	result.z = viewSpacePos_z * coeffA + coeffB;
  	return result;
  }

  //////////////////////////////////////////////////////////Directional Light Shadow
  float CCGetShadowFactorHard (vec4 shadowPosWithDepthBias) {
	vec3 shadowNDCPos;
	if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {
		return 1.0;
	}
    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);
  }
  
  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {
	vec3 shadowNDCPos;
	if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {
		return 1.0;
	}
    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);
  }
  
  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {
	vec3 shadowNDCPos;
	if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {
		return 1.0;
	}
    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);
  }
  
  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {
	vec3 shadowNDCPos;
	if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {
		return 1.0;
	}
    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);
  }
  
  
  //////////////////////////////////////////////////////////Spot Light Shadow
  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {
	vec3 shadowNDCPos;
	if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {
		return 1.0;
	}
    if (cc_shadowNFLSInfo.z > EPSILON) {
      shadowNDCPos.z = CCGetLinearDepth(worldPos);
    }
  
    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotLightingMap, cc_shadowWHPBInfo.xy);
  }
  
  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {
	vec3 shadowNDCPos;
	if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {
		return 1.0;
	}
    if (cc_shadowNFLSInfo.z > EPSILON) {
      shadowNDCPos.z = CCGetLinearDepth(worldPos);
    }
  
    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotLightingMap, cc_shadowWHPBInfo.xy);
  }
  
  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {
	vec3 shadowNDCPos;
	if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {
		return 1.0;
	}
    if (cc_shadowNFLSInfo.z > EPSILON) {
      shadowNDCPos.z = CCGetLinearDepth(worldPos);
    }
  
    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotLightingMap, cc_shadowWHPBInfo.xy);
  }
  
  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {
	vec3 shadowNDCPos;
	if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {
		return 1.0;
	}
    if (cc_shadowNFLSInfo.z > EPSILON) {
      shadowNDCPos.z = CCGetLinearDepth(worldPos);
    }
  
    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotLightingMap, cc_shadowWHPBInfo.xy);
  }


  //////////////////////////////////////////////////////////Main Functions
  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)
  {
    float pcf = cc_shadowWHPBInfo.z;
    vec4 pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);
    if (pcf > 2.9) {
      return CCGetSpotLightShadowFactorSoft5X(pos, worldPos);
    } else if (pcf > 1.9) { 
      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);
    }else if (pcf > 0.9) { 
      return CCGetSpotLightShadowFactorSoft(pos, worldPos);
    }else { 
      return CCGetSpotLightShadowFactorHard(pos, worldPos);
    }
  }
  
  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)
  {
    float realtimeShadow = 1.0;
    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);
    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);
  
    float pcf = cc_shadowWHPBInfo.z;
    if (pcf > 2.9) {
      realtimeShadow =  CCGetDirLightShadowFactorSoft5X(pos);
    } else if (pcf > 1.9) {
      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);
    }else if (pcf > 0.9) {
      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);
    }else { 
      realtimeShadow = CCGetShadowFactorHard(pos); 
    }
    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);
  }
  

  int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out mat4 matShadowView, vec3 worldPos) {
    for (int i = 0; i < NUMCASCADES; i++) {
      vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);
      vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;
      if (clipPos.x < (0.0 + cc_csmInfo.y) || clipPos.x > (1.0 - cc_csmInfo.y) ||
          clipPos.y < (0.0 + cc_csmInfo.y) || clipPos.y > (1.0 - cc_csmInfo.y) ||
          clipPos.z < 0.0 || clipPos.z > 1.0) {
        continue;
      }
      csmPos = cc_matCSMViewProjAtlas[i] * vec4(worldPos.xyz, 1.0);
	  shadowProjDepthInfo = cc_csmProjDepthInfo[i];
	  shadowProjInfo = cc_csmProjInfo[i];
	  matShadowView = cc_matCSMView[i];
      return i;
    }
    return -1;
  }

  float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)
  {
    vec4 csmPos = vec4(1.0);
	vec4 shadowProjDepthInfo, shadowProjInfo;
	mat4 matLightView;
    int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, matLightView, worldPos);
    if (level < 0) { return 1.0; }
    float realtimeShadow = 1.0;

    vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, matLightView, shadowProjInfo.xy);
    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);
  
    float pcf = cc_shadowWHPBInfo.z;
    if (pcf > 2.9) {
      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);
    } else if (pcf > 1.9) {
      realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);
    } else if (pcf > 0.9) {
      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);
    }else { 
      realtimeShadow = CCGetShadowFactorHard(pos);
    }
    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);
  }
#endif
