// depthHS = ndc depth(-1 ~ +1)
float GetCameraDepthRH(float depthHS, mat4 matProj)
{
    return -matProj[3][2] / (depthHS + matProj[2][2]);
}
float GetCameraDepthRH(float depthHS, float matProj32, float matProj22)
{
    return -matProj32 / (depthHS + matProj22);
}

// posHS = ndc pos (xyz: -1 ~ +1)
vec4 GetViewPosFromNDCPosRH(vec3 posHS, mat4 matProj, mat4 matProjInv)
{
    float w = -GetCameraDepthRH(posHS.z, matProj);
    return matProjInv * vec4(posHS * w, w);
}

vec4 GetWorldPosFromNDCPosRH(vec3 posHS, mat4 matProj, mat4 matViewProjInv)
{
    float w = -GetCameraDepthRH(posHS.z, matProj);
    return matViewProjInv * vec4(posHS * w, w);
}

float GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {
  float dist = length(viewPos);
  return (dist - near) / (far - near);
}

// params must be normalized
vec3 CalculateBinormal(vec3 normal, vec3 tangent, float mirrorNormal)
{
    return cross(normal.xyz, tangent) * mirrorNormal;
}


// param1 is normal from normalmap
// return value is un-normalized
vec3 CalculateNormalFromTangentSpace(vec3 normalFromTangentSpace, float normalStrength, vec3 normal, vec3 tangent, float mirrorNormal)
{
    vec3 binormal = CalculateBinormal(normal, tangent, mirrorNormal);
    return (normalFromTangentSpace.x * normalStrength) * normalize(tangent) +
           (normalFromTangentSpace.y * normalStrength) * normalize(binormal) +
            normalFromTangentSpace.z * normalize(normal);
}

// rotationAngle: radians, 0-2Pi
void RotateTangentAndBinormal(inout vec3 tangent, inout vec3 binormal, vec3 normal, float rotationAngle)
{
    float cosTheta = cos(rotationAngle), sinTheta = sin(rotationAngle);
    vec3 T = vec3(0.0), B = vec3(0.0);
    B.x = dot(vec3(1.0, 0.0, 0.0), vec3(cosTheta, 0.0, -sinTheta));
    B.z = dot(vec3(1.0, 0.0, 0.0), vec3(sinTheta, 0.0,  cosTheta));
    T.x = dot(vec3(0.0, 0.0, 1.0), vec3(cosTheta, 0.0, -sinTheta));
    T.z = dot(vec3(0.0, 0.0, 1.0), vec3(sinTheta, 0.0,  cosTheta));

    vec3 tangentNew, binormalNew;
    binormalNew.x = dot(B, binormal);
    binormalNew.y = dot(B, normal);
    binormalNew.z = dot(B, tangent);
    binormal = normalize(binormalNew);

    tangentNew.x = dot(T, binormal);
    tangentNew.y = dot(T, normal);
    tangentNew.z = dot(T, tangent);
    tangent = normalize(tangentNew);
    // tangent = cross(binormal, normal);
}
