
#include <cc-sprite-common>
#include <embedded-alpha>

#pragma define ONE_OVER_PI 0.3183098861838

in vec2 v_uv0;

in float v_uvMode;
in vec4 v_uvSizeOffset;
in vec4 v_uvParams0;
in vec4 v_uvParams1;

vec2 evalSlicedUV(vec2 uv) {
  vec4 p0 = mix(vec4(0.0), v_uvParams0, step(v_uvParams0.xyxy, uv.xyxy));
        p0 = mix(       p0, v_uvParams1, step(v_uvParams1.xyxy, uv.xyxy));
  vec4 p1 = mix(vec4(1.0), v_uvParams1, step(uv.xyxy, v_uvParams1.xyxy));
        p1 = mix(       p1, v_uvParams0, step(uv.xyxy, v_uvParams0.xyxy));

  // strat point P0,end point P1
  vec2 k = (p1.zw - p0.zw) / (p1.xy - p0.xy);
  vec2 b = (p1.xy * p0.zw - p0.xy * p1.zw) / (p1.xy - p0.xy);

  return k * uv + b;
}

float evalFilledUV(vec2 uv, float mode) {
  float alpha = 1.0;
  if (mode >= 2.0) {
    float start = v_uvParams1.x;
    float range = v_uvParams1.y;
    vec2 dir = uv - v_uvParams1.zw;
    float angle = -atan(dir.y, dir.x) * ONE_OVER_PI;
    if (range < 0.0) {
      angle += mix(0.0, -2.0, step(start, angle));
      alpha = step(start + range, angle);
    } else {
      angle += mix(0.0, 2.0, step(angle, start));
      alpha = step(angle, start + range);
    }
  } else if (mode >= 1.0) {
    // VERTICAL
    if (uv.y >= v_uvParams0.x && uv.y <= v_uvParams0.y) {
      alpha = 1.0;
    } else {
      alpha = 0.0;
    }
  } else {
    // HORIZONTAL
    if (uv.x >= v_uvParams0.x && uv.x <= v_uvParams0.y) {
      alpha = 1.0;

    } else {
      alpha = 0.0;

    }
  }
  return alpha;
}

void CCSpriteInput(out SpriteFragmentData i) {
  #if USE_TEXTURE
    if(v_uvMode >= 3.0) {
      i.uv = v_uv0 * v_uvSizeOffset.xy + v_uvSizeOffset.zw;
    } else if (v_uvMode >= 2.0) {
      i.uv = fract(v_uv0) * v_uvSizeOffset.xy + v_uvSizeOffset.zw;
    } else if (v_uvMode >= 1.0) {
      i.uv = evalSlicedUV(v_uv0) * v_uvSizeOffset.xy + v_uvSizeOffset.zw;
    } else {
      i.uv = v_uv0;
    }
  #endif
}

vec4 CCSpriteSample(sampler2D tex, vec2 uv) {
  vec4 o = CCSampleWithAlphaSeparated(tex, uv);
  if (v_uvMode >= 3.0) {
    o.a *= evalFilledUV(v_uv0, v_uvParams0.z);
  }
  return o;
}
