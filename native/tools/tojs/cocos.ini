[cocos]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = engine

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = jsb

android_headers =

android_flags = -target armv7-none-linux-androideabi -D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS -DANDROID -D__ANDROID_API__=14 -gcc-toolchain %(gcc_toolchain_dir)s --sysroot=%(androidndkdir)s/platforms/android-14/arch-arm  -idirafter %(androidndkdir)s/sources/android/support/include -idirafter %(androidndkdir)s/sysroot/usr/include -idirafter %(androidndkdir)s/sysroot/usr/include/arm-linux-androideabi -idirafter %(clangllvmdir)s/lib64/clang/5.0/include -I%(androidndkdir)s/sources/cxx-stl/llvm-libc++/include

clang_headers =
clang_flags = -nostdinc -x c++ -std=c++17 -fsigned-char -mfloat-abi=soft -U__SSE__

cocos_headers = -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/platform/android -I%(cocosdir)s/external/sources
cocos_flags = -DANDROID -DCC_PLATFORM=3 -DCC_PLATFORM_MAC_IOS=1 -DCC_PLATFORM_MAC_OSX=4 -DCC_PLATFORM_WINDOWS=2 -DCC_PLATFORM_ANDROID=3


cxxgenerator_headers =

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s

# what headers to parse
headers = %(cocosdir)s/cocos/platform/FileUtils.h %(cocosdir)s/cocos/bindings/event/EventDispatcher.h %(cocosdir)s/cocos/platform/interfaces/modules/canvas/CanvasRenderingContext2D.h %(cocosdir)s/cocos/platform/interfaces/modules/Device.h %(cocosdir)s/cocos/platform/SAXParser.h %(cocosdir)s/cocos/math/Vec2.h %(cocosdir)s/cocos/math/Vec3.h %(cocosdir)s/cocos/math/Quaternion.h %(cocosdir)s/cocos/math/Color.h %(cocosdir)s/cocos/core/data/Object.h %(cocosdir)s/cocos/core/data/JSBNativeDataHolder.h

replace_headers=

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".

classes = CCObject FileUtils$ SAXParser OSInterface ICanvasRenderingContext2D CanvasRenderingContext2D ICanvasGradient CanvasGradient Device DownloaderHints Vec2 Color JSBNativeDataHolder

classes_need_extend =

field = Vec2::[x y],
        Color::[r g b a],
        CCObject::[_name _objFlags]

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip = FileUtils::[getFileData setFilenameLookupDictionary destroyInstance getFullPathCache getContents listFilesRecursively setDelegate],
        SAXParser::[(?!(init))],
        Device::[getDeviceMotionValue],
        CanvasRenderingContext2D::[setCanvasBufferUpdatedCallback set_.+ fillText strokeText fillRect measureText],
        Data::[takeBuffer getBytes fastSet copy],
        OSInterface::[dispatchEvent dispatchTouchEvent],
        Vec2::[^(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|z)+],
        Vec3::[^(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w)+],
        Quaternion::[^(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v)+ zero],
        Color::[^(c|d|e|f|h|i|j|k|l|m|n|o|p|q|s|t|u|v|w|z)+],
        JSBNativeDataHolder::[getData setData]

rename_functions = FileUtils::[loadFilenameLookupDictionaryFromFile=loadFilenameLookup],
                   CCObject::[destroyImmediate=_destroyImmediate destroy=_destroy]

getter_setter=ICanvasRenderingContext2D::[width//setWidth height//setHeight fillStyle//setFillStyle font//setFont globalCompositeOperation//setGlobalCompositeOperation lineCap//setLineCap lineJoin//setLineJoin lineWidth//setLineWidth strokeStyle//setStrokeStyle textAlign//setTextAlign textBaseline//setTextBaseline],
        CCObject::[name hideFlags replicated/isReplicated/setReplicated isValid/isValid]

rename_classes = SAXParser::PlistParser,
                 Quaternion::Quat

# for all class names, should we remove something when registering in the target VM?
remove_prefix =

# classes for which there will be no "parent" lookup
classes_have_no_parents = SAXParser

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip = RefCounted Clonable

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = SAXParser Device ICanvasRenderingContext2D ICanvasGradient OSInterface FileUtils

persistent_classes = FileUtils

classes_owned_by_cpp =
