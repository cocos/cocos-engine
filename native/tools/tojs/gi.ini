[gi]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = gi

#cpp_headers =

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = jsb

android_headers =

android_flags = -target armv7-none-linux-androideabi -D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS -DANDROID -D__ANDROID_API__=14 -gcc-toolchain %(gcc_toolchain_dir)s --sysroot=%(androidndkdir)s/platforms/android-14/arch-arm  -idirafter %(androidndkdir)s/sources/android/support/include -idirafter %(androidndkdir)s/sysroot/usr/include -idirafter %(androidndkdir)s/sysroot/usr/include/arm-linux-androideabi -idirafter %(clangllvmdir)s/lib64/clang/5.0/include -I%(androidndkdir)s/sources/cxx-stl/llvm-libc++/include

clang_headers =
clang_flags = -nostdinc -x c++ -std=c++17 -fsigned-char -U__SSE__

cocos_headers = -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/renderer -I%(cocosdir)s -I%(cocosdir)s/cocos/platform/android -I%(cocosdir)s/external/sources -I%(cocosdir)s/external/android/armeabi-v7a/include/v8 -I%(cocosdir)s/external/android/armeabi-v7a/include/uv
cocos_flags = -DANDROID -DCC_PLATFORM=3 -DCC_PLATFORM_IOS=1 -DCC_PLATFORM_MACOS=4 -DCC_PLATFORM_WINDOWS=2 -DCC_PLATFORM_ANDROID=3


cxxgenerator_headers =

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s

# what headers to parse
headers = %(cocosdir)s/cocos/gi/light-probe/LightProbe.h
          %(cocosdir)s/cocos/gi/light-probe/Delaunay.h

hpp_headers = 

cpp_headers = 

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = Vertex CircumSphere Tetrahedron LightProbesData LightProbes LightProbeInfo

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.
skip = 


rename_functions = 

getter_setter = LightProbesData::[probes/getProbes/setProbes tetrahedrons/getTetrahedrons/setTetrahedrons],
       LightProbes::[enabled/isEnabled/setEnabled reduceRinging/getReduceRinging/setReduceRinging showProbe/isShowProbe/setShowProbe showWireframe/isShowWireframe/setShowWireframe showConvex/isShowConvex/setShowConvex data/getData/setData],
       LightProbeInfo::[enabled/isEnabled/setEnabled reduceRinging/getReduceRinging/setReduceRingingg showProbe/isShowProbe/setShowProbe showWireframe/isShowWireframe/setShowWireframe showConvex/isShowConvex/setShowConvex  data/getData/setData]

field = Vertex::[position normal coefficients],
       CircumSphere::[center radiusSquared],
       Tetrahedron::[invalid vertex0 vertex1 vertex2 vertex3 neighbours matrix offset sphere],
       LightProbesData::[_probes _tetrahedrons],
       LightProbeInfo::[_enabled _reduceRinging _showProbe _showWireframe _showConvex _data]

skip_public_fields = 

rename_classes = 

# for all class names, should we remove something when registering in the target VM?
remove_prefix =

# classes for which there will be no "parent" lookup
classes_have_no_parents =
# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip = RefCounted

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = 

method_module_configs = 
