[protocols]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = anysdk_framework

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = anysdk

android_headers = -I%(androidndkdir)s/platforms/android-14/arch-arm/usr/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.9/include
android_flags = -D_SIZE_T_DEFINED_

clang_headers = -I%(clangllvmdir)s/%(clang_include)s
clang_flags = -nostdinc -x c++ -std=c++17 -fsigned-char -mfloat-abi=soft -U__SSE__

cocos_headers = -I%(anysdk_common_dir)s

replace_headers = extensions/anysdk/js-bindings/jsb_anysdk_protocols_auto.hpp::jsb_anysdk_protocols_auto.hpp

cocos_flags = -DANDROID -DCC_PLATFORM=3 -DCC_PLATFORM_MAC_IOS=1 -DCC_PLATFORM_MAC_OSX=4 -DCC_PLATFORM_WINDOWS=2 -DCC_PLATFORM_ANDROID=3


cxxgenerator_headers =

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s

# what headers to 9
headers = %(anysdk_common_dir)s/PluginManager.h %(anysdk_common_dir)s/ProtocolAnalytics.h %(anysdk_common_dir)s/ProtocolIAP.h %(anysdk_common_dir)s/ProtocolAds.h %(anysdk_common_dir)s/ProtocolShare.h %(anysdk_common_dir)s/ProtocolSocial.h %(anysdk_common_dir)s/ProtocolUser.h %(anysdk_common_dir)s/ProtocolPush.h %(anysdk_common_dir)s/ProtocolCrash.h %(anysdk_common_dir)s/ProtocolREC.h %(anysdk_common_dir)s/ProtocolCustom.h %(anysdk_common_dir)s/AgentManager.h %(anysdk_common_dir)s/JSBRelation.h %(anysdk_common_dir)s/ProtocolAdTracking.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^CCMenu*$".
classes = PluginProtocol PluginFactory PluginManager ProtocolIAP ProtocolAnalytics ProtocolAds ProtocolSocial ProtocolUser ProtocolPush ProtocolREC ProtocolCrash ProtocolCustom AgentManager JSBRelation ProtocolAdTracking

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip = ProtocolIAP::[setResultListener getPayListener payForProduct],
       ProtocolAnalytics::[logEvent],
       ProtocolAds::[setAdsListener getAdsListener],
       ProtocolShare::[setResultListener],
       ProtocolSocial::[setListener getListener unlockAchievement],
       ProtocolUser::[setActionListener getActionListener],
       PluginProtocol::[callFuncWithParam callStringFuncWithParam callIntFuncWithParam callBoolFuncWithParam callFloatFuncWithParam],
       ProtocolPush::[setActionListener getActionListener setTags delTags],
       ProtocolCustom::[setResultListener getCustomListener],
       ProtocolREC::[setResultListener getRECListener],
       AgentManager::[getIAPPlugin getFrameworkVersion loadPlugin],
       JSBRelation::[getMethodsOfJobject],
       ProtocolAdTracking::[trackEvent]

rename_functions =

rename_classes =

# for all class names, should we remove something when registering in the target VM?
remove_prefix =

# classes for which there will be no "parent" lookup
classes_have_no_parents =

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip =

# classes that create no constructor
# CCSet is special and we will use a hand-written constructor
abstract_classes = PluginProtocol PluginFactory ProtocolIAP ProtocolAnalytics PluginManager ProtocolAds ProtocolShare ProtocolUser ProtocolSocial ProtocolPush AgentManager ProtocolCustom ProtocolCrash ProtocolREC ProtocolAdTracking JSBRelation

persistent_classes =

classes_owned_by_cpp = PluginProtocol PluginFactory PluginManager ProtocolIAP ProtocolAnalytics ProtocolAds ProtocolSocial ProtocolUser ProtocolPush ProtocolREC ProtocolCrash ProtocolCustom AgentManager JSBRelation ProtocolAdTracking
