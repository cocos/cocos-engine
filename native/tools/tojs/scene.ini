[scene]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = scene

#cpp_headers =

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = ns

android_headers =

android_flags = -target armv7-none-linux-androideabi -D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS -DANDROID -D__ANDROID_API__=14 -gcc-toolchain %(gcc_toolchain_dir)s --sysroot=%(androidndkdir)s/platforms/android-14/arch-arm  -idirafter %(androidndkdir)s/sources/android/support/include -idirafter %(androidndkdir)s/sysroot/usr/include -idirafter %(androidndkdir)s/sysroot/usr/include/arm-linux-androideabi -idirafter %(clangllvmdir)s/lib64/clang/5.0/include -I%(androidndkdir)s/sources/cxx-stl/llvm-libc++/include

clang_headers =
clang_flags = -nostdinc -x c++ -std=c++14 -fsigned-char -U__SSE__

cocos_headers = -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/renderer -I%(cocosdir)s -I%(cocosdir)s/cocos/platform/android -I%(cocosdir)s/external/sources -I%(cocosdir)s/external/android/armeabi-v7a/include/v8
cocos_flags = -DANDROID -DCC_PLATFORM=3 -DCC_PLATFORM_MAC_IOS=1 -DCC_PLATFORM_MAC_OSX=4 -DCC_PLATFORM_WINDOWS=2 -DCC_PLATFORM_ANDROID=3


cxxgenerator_headers =

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s

# what headers to parse
headers = %(cocosdir)s/cocos/scene/Node.h %(cocosdir)s/cocos/scene/BaseNode.h %(cocosdir)s/cocos/scene/Scene.h %(cocosdir)s/cocos/scene/Light.h %(cocosdir)s/cocos/scene/DirectionalLight.h %(cocosdir)s/cocos/scene/SpotLight.h %(cocosdir)s/cocos/scene/SphereLight.h %(cocosdir)s/cocos/scene/Model.h %(cocosdir)s/cocos/scene/SubModel.h %(cocosdir)s/cocos/scene/Pass.h %(cocosdir)s/cocos/scene/RenderScene.h %(cocosdir)s/cocos/scene/DrawBatch2D.h %(cocosdir)s/cocos/scene/Camera.h %(cocosdir)s/cocos/scene/RenderWindow.h %(cocosdir)s/cocos/scene/Camera.h %(cocosdir)s/cocos/scene/Define.h %(cocosdir)s/cocos/scene/AABB.h %(cocosdir)s/cocos/scene/Sphere.h

hpp_headers = cocos/bindings/auto/jsb_gfx_auto.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = Light BaseNode Node Scene DirectionalLight SpotLight SphereLight Model SubModel Pass RenderScene DrawBatch2D Camera RenderWindow Frustum Plane AABB Sphere Fog Skybox Shadow PipelineSharedSceneData Ambient OctreeInfo Root SkinningModel JointInfo JointTransform BakedSkinningModel BakedJointInfo BakedAnimInfo

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.
skip = Model::[setInstancedAttrBlock getType getLocalBuffer getModelBounds getWorldBounds setOctreeNode setScene getOctreeNode getScene _octreeNode _scene],
       SubModel::[getDescriptorSet getInputAssembler getSubMesh setSubMeshBuffers],
       Light::[getColor getColorTemperatureRGB getNode getType getUseColorTemperature],
       Node::[getFlagsChanged getDirtyNode getLayer getWorldMatrix getWorldPosition getWorldRotation getWorldScale setFlagsChanged setDirtyFlag setDirtyNode setLayer setWorldMatrix setWorldPosition setWorldRotation invalidateChildren setWorldScale setLocalPosition setLocalRotation setLocalScale getNodeLayout getWorldRT updateWorldTransform updateWorldRTMatrix getDirtyFlag getPosition getScale getRotation getParent],
       BaseNode::[addChild removeChild getFlagsChanged getDirtyNode getLayer getWorldMatrix getWorldPosition getWorldRotation getWorldScale setFlagsChanged setDirtyFlag setDirtyNode setLayer setWorldMatrix setWorldPosition setWorldRotation invalidateChildren setWorldScale setLocalPosition setLocalRotation setLocalScale getNodeLayout getWorldRT updateWorldTransform updateWorldRTMatrix getDirtyFlag getPosition getScale getRotation getParent],
       DirectionalLight::[getDirection getIlluminanceHDR getIlluminanceLDR],
       SpotLight::[getAABB getAngle getAspect getSpotAngle getDirection getFrustum getLuminanceHDR getLuminanceLDR getNeedUpdate getRange getPosition getSize],
       SphereLight::[getAABB getLuminanceHDR getLuminanceLDR getPosition getRange getSize],
       Pass::[setRootBufferAndBlock],
       AABB::[getBoundary aabbAabb aabbFrustum aabbPlan merge transform transformExtentM4 setCenter getCenter getValid setValid setHalfExtents getHalfExtents set fromPoints],
       Sphere::[define merge interset spherePlane sphereFrustum],
       SkinningModel::[updateTransform updateUBOs uploadJointData updateWorldMatrix],
       Frustum::[update type],
       JointTransform::[node world local stamp],
       JointInfo::[bound bindpose transform parents buffers indices target],
       RenderScene::[updateBatches getOctree updateOctree _octree],
       BakedAnimInfo::[buffer data dirty],
       BakedJointInfo::[boundsInfo jointTextureInfo animInfo buffer],
       BakedSkinningModel::[updateTransform updateUBOs],
       DrawBatch2D::[visFlags descriptorSet inputAssembler passes shaders]


rename_functions =

getter_setter=

rename_classes =

# for all class names, should we remove something when registering in the target VM?
remove_prefix =

# classes for which there will be no "parent" lookup
classes_have_no_parents =
# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip =

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = Light
