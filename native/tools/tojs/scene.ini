[scene]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = scene

#cpp_headers =

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = jsb

android_headers =

android_flags = -target armv7-none-linux-androideabi -D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS -DANDROID -D__ANDROID_API__=14 -gcc-toolchain %(gcc_toolchain_dir)s --sysroot=%(androidndkdir)s/platforms/android-14/arch-arm  -idirafter %(androidndkdir)s/sources/android/support/include -idirafter %(androidndkdir)s/sysroot/usr/include -idirafter %(androidndkdir)s/sysroot/usr/include/arm-linux-androideabi -idirafter %(clangllvmdir)s/lib64/clang/5.0/include -I%(androidndkdir)s/sources/cxx-stl/llvm-libc++/include

clang_headers =
clang_flags = -nostdinc -x c++ -std=c++17 -fsigned-char -U__SSE__

cocos_headers = -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/renderer -I%(cocosdir)s -I%(cocosdir)s/cocos/platform/android -I%(cocosdir)s/external/sources -I%(cocosdir)s/external/android/armeabi-v7a/include/v8 -I%(cocosdir)s/external/android/armeabi-v7a/include/uv
cocos_flags = -DANDROID -DCC_PLATFORM=3 -DCC_PLATFORM_MAC_IOS=1 -DCC_PLATFORM_MAC_OSX=4 -DCC_PLATFORM_WINDOWS=2 -DCC_PLATFORM_ANDROID=3


cxxgenerator_headers =

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s

# what headers to parse
headers = %(cocosdir)s/cocos/core/data/Object.h
          %(cocosdir)s/cocos/core/scene-graph/Node.h
          %(cocosdir)s/cocos/core/scene-graph/Scene.h
          %(cocosdir)s/cocos/core/scene-graph/SceneGlobals.h
          %(cocosdir)s/cocos/scene/Light.h
          %(cocosdir)s/cocos/scene/Fog.h
          %(cocosdir)s/cocos/scene/Shadow.h
          %(cocosdir)s/cocos/scene/Skybox.h
          %(cocosdir)s/cocos/scene/DirectionalLight.h
          %(cocosdir)s/cocos/scene/SpotLight.h
          %(cocosdir)s/cocos/scene/SphereLight.h
          %(cocosdir)s/cocos/scene/Model.h
          %(cocosdir)s/cocos/scene/SubModel.h
          %(cocosdir)s/cocos/scene/Pass.h
          %(cocosdir)s/cocos/scene/RenderScene.h
          %(cocosdir)s/cocos/scene/DrawBatch2D.h
          %(cocosdir)s/cocos/scene/RenderWindow.h
          %(cocosdir)s/cocos/scene/Camera.h
          %(cocosdir)s/cocos/scene/Define.h
          %(cocosdir)s/cocos/scene/Ambient.h
          %(cocosdir)s/cocos/renderer/core/PassInstance.h
          %(cocosdir)s/cocos/renderer/core/MaterialInstance.h
          %(cocosdir)s/cocos/3d/models/MorphModel.h
          %(cocosdir)s/cocos/3d/models/SkinningModel.h
          %(cocosdir)s/cocos/3d/models/BakedSkinningModel.h
          %(cocosdir)s/cocos/core/Root.h
          %(cocosdir)s/cocos/renderer/core/ProgramLib.h
          %(cocosdir)s/cocos/scene/Octree.h

hpp_headers = cocos/bindings/auto/jsb_gfx_auto.h cocos/bindings/auto/jsb_geometry_auto.h cocos/bindings/auto/jsb_assets_auto.h

cpp_headers = cocos/bindings/auto/jsb_pipeline_auto.h cocos/bindings/auto/jsb_cocos_auto.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = Light DirectionalLight SpotLight SphereLight Model SubModel Pass RenderScene DrawBatch2D Camera RenderWindow Fog Skybox Shadows PipelineSharedSceneData Ambient Root SkinningModel BakedSkinningModel IRenderWindowInfo AmbientInfo IRenderSceneInfo ShadowsInfo BaseNode Node SkyboxInfo FogInfo ICameraInfo IMacroPatch IProgramInfo IDefineRecord MaterialInstance IMaterialInstanceInfo PassInstance ProgramLib Scene SceneGlobals InstancedAttributeBlock PassDynamicsValue MorphModel Octree OctreeInfo

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.
skip = Pass::[getBlocks],
       AABB::[getBoundary aabbAabb aabbFrustum aabbPlan merge transform transformExtentM4 setCenter getCenter isValid setValid setHalfExtents getHalfExtents set fromPoints],
       Model::[getEventProcessor getOctreeNode setOctreeNode],
       SkinningModel::[uploadJointData],
       Frustum::[update type planes],
       Plane::[clone copy normalize getSpotAngle fromNormalAndPoint fromPoints set],
       RenderScene::[updateBatches],
       BakedSkinningModel::[updateInstancedJointTextureInfo updateModelBounds],
       AmbientInfo::[activate],
       Node::[setLayerPtr setUIPropsTransformDirtyCallback rotate$ setUserData getUserData getChildren rotateForJS setScale$ setRotation$ setRotationFromEuler$ setPosition$ isActiveInHierarchy setActiveInHierarchy setActiveInHierarchyPtr setRTS$ findComponent findChildComponent findChildComponents addComponent removeComponent getComponent getComponents getComponentInChildren getComponentsInChildren checkMultipleComp getEventProcessor dispatchEvent hasEventListener getUIProps getPosition getRotation getScale getEulerAngles getForward getUp getRight getWorldPosition getWorldRotation getWorldScale getWorldMatrix getWorldRS getWorldRT],
       Camera::[screenPointToRay screenToWorld worldToScreen worldMatrixToScreen syncCameraEditor],
       NodeUiProperties::[getUITransformComp setUITransformComp getUIComp setUIComp], # not impl
       ProgramLib::[destroyInstance]


rename_functions = Root::[initialize=_initialize],
       Node::[resetChangedFlags=resetHasChangedFlags _parent=_parentInternal updateSiblingIndex=_updateSiblingIndex],
       FogInfo::[_isEnabled=_enabled],
       ProgramLib::[registerEffect=register],
       Model::[initLocalDescriptors=_initLocalDescriptors updateLocalDescriptors=_updateLocalDescriptors updateInstancedAttributes=_updateInstancedAttributes getInstancedAttributeIndex=_getInstancedAttributeIndex],
       Scene::[load=_load activate=_activate],
       Pass::[initPassFromTarget=_initPassFromTarget]

getter_setter = Root::[device:_device mainWindow curWindow tempWindow windows scenes cumulativeTime frameTime frameCount fps fixedFPS useDeferredPipeline/isUsingDeferredPipeline],
       RenderWindow::[width height framebuffer cameras swapchain],
       Pass::[root device shaderInfo localSetLayout program properties defines passIndex propertyIndex dynamics rootBufferDirty/isRootBufferDirty _rootBufferDirty/isRootBufferDirty/_setRootBufferDirty priority primitive stage phase rasterizerState depthStencilState blendState dynamicStates batchingScheme descriptorSet hash/getHashForJS pipelineLayout],
       PassInstance::[parent],
       Node::[uuid angle matrix hasChangedFlags/getChangedFlags/setChangedFlags active/isActive _persistNode/isPersistNode/setPersistNode _dirtyFlags/getDirtyFlag/setDirtyFlag],
       Ambient::[skyColor skyIllum groundAlbedo enabled/isEnabled],
       Light::[baked/isBaked/setBaked color useColorTemperature/isUseColorTemperature/setUseColorTemperature colorTemperature colorTemperatureRGB node type name scene],
       DirectionalLight::[direction illuminance illuminanceHDR illuminanceLDR],
       SpotLight::[position size range luminance luminanceHDR luminanceLDR direction spotAngle angle aspect aabb/getAABB frustum],
       SphereLight::[position size range luminance luminanceHDR luminanceLDR aabb/getAABB],
       Camera::[iso isoValue ec exposure shutter shutterValue apertureValue width height aspect matView matProj matProjInv matViewProj matViewProjInv scene name window forward aperture position projectionType/getProjectionType/setProjectionType fovAxis fov nearClip farClip viewport orthoHeight clearColor clearDepth clearFlag clearStencil enabled/isEnabled/setEnabled exposure frustum isWindowSize/isWindowSize/setWindowSize priority screenScale visibility node],
       RenderScene::[name cameras? mainLight? sphereLights? spotLights? models],
       Skybox::[model enabled/isEnabled/setEnabled useIBL/isUseIBL/setUseIBL isRGBE/isRGBE/setRGBE envmap],
       Fog::[enabled/isEnabled/setEnabled fogColor type fogDensity fogStart fogEnd fogAtten fogTop fogRange fogRange colorArray],
       Shadows::[enabled/isEnabled normal distance shadowColor type near far orthoSize size pcf shadowMapDirty/isShadowMapDirty bias normalBias saturation fixedArea shadowDistance invisibleOcclusionRange matLight instancingMaterial],
       Model::[scene _subModels:subModels/getSubModels inited/isInited _localDataUpdated/isLocalDataUpdated/setLocalDataUpdated _worldBounds:worldBounds/getWorldBounds/setWorldBounds _modelBounds:modelBounds/getModelBounds/setModelBounds worldBoundBuffer localBuffer updateStamp isInstancingEnabled/isInstancingEnabled receiveShadow/isReceiveShadow/setReceiveShadow castShadow/isCastShadow/setCastShadow node transform visFlags enabled/isEnabled/setEnabled type instancedAttributes/getInstancedAttributeBlock/setInstancedAttributeBlock isDynamicBatching/isDynamicBatching/setDynamicBatching],
       SubModel::[passes shaders subMesh priority inputAssembler descriptorSet patches planarInstanceShader planarShader],
       ShadowsInfo::[type enabled/isEnabled/setEnabled normal distance shadowDistance shadowColor invisibleOcclusionRange fixedArea/isFixedArea/isFixedArea pcf bias normalBias near far orthoSize maxReceived size saturation],
       AmbientInfo::[skyColor skyIllum groundAlbedo _skyColor/getSkyColorHDR?/setSkyColorHDR _skyIllum/getSkyIllumHDR?/setSkyIllumHDR _groundAlbedo/getGroundAlbedoHDR?/setGroundAlbedoHDR],
       FogInfo::[type fogColor enable/isEnabled/setEnabled accurate/isAccurate/setAccurate  fogDensity fogStart fogEnd fogAtten fogTop fogRange],
       SkyboxInfo::[_envmap/getEnvmapForJS/setEnvmapForJS applyDiffuseMap/isApplyDiffuseMap/setApplyDiffuseMap enabled/isEnabled/setEnabled useIBL/isUseIBL/setUseIBL useHDR/isUseHDR/setUseHDR envmap diffuseMap],
       OctreeInfo::[enabled/isEnabled/setEnabled minPos maxPos depth],
       Scene::[autoReleaseAssets/isAutoReleaseAssets/setAutoReleaseAssets]

field = Ambient::[SUN_ILLUM SKY_ILLUM],
        AmbientInfo::[_skyColorHDR _skyIllumHDR _groundAlbedoHDR _skyColorLDR _skyIllumLDR _groundAlbedoLDR],
        Camera::[SKYBOX_FLAG],
        Shadows::[MAX_FAR COEFFICIENT_OF_EXPANSION],
        ShadowsInfo::[_type _firstSetCSM _fixedArea _shadowDistance _invisibleOcclusionRange _enabled _normal _distance _shadowColor _autoAdapt _pcf _bias _normalBias _near _far _orthoSize _maxReceived _size _saturation],
        FogInfo::[_type _fogColor _isEnabled _fogDensity _fogStart _fogEnd _fogAtten _fogTop _fogRange _accurate],
        SkyboxInfo::[_applyDiffuseMap _envmapHDR _envmapLDR _diffuseMapHDR _diffuseMapLDR _enabled _useIBL _useHDR],
        OctreeInfo::[_enabled _minPos _maxPos _depth],
        Node::[_siblingIndex _parent _active$ _id]


skip_public_fields = IMaterialInstanceInfo::[owner],
       IDefineRecord::[map]

rename_classes = InstancedAttributeBlock::IInstancedAttributeBlock

# for all class names, should we remove something when registering in the target VM?
remove_prefix =

# classes for which there will be no "parent" lookup
classes_have_no_parents =
# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip = RefCounted

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = EventListener ProgramLib
