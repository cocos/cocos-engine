[pipeline]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = pipeline

cpp_headers = cocos/renderer/gfx-base/GFXDevice.h

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = nr

android_headers =

android_flags = -target armv7-none-linux-androideabi -D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS -DANDROID -D__ANDROID_API__=14 -gcc-toolchain %(gcc_toolchain_dir)s --sysroot=%(androidndkdir)s/platforms/android-14/arch-arm  -idirafter %(androidndkdir)s/sources/android/support/include -idirafter %(androidndkdir)s/sysroot/usr/include -idirafter %(androidndkdir)s/sysroot/usr/include/arm-linux-androideabi -idirafter %(clangllvmdir)s/lib64/clang/5.0/include -I%(androidndkdir)s/sources/cxx-stl/llvm-libc++/include

clang_headers =
clang_flags = -nostdinc -x c++ -std=c++17 -fsigned-char -mfloat-abi=soft -U__SSE__

cocos_headers = -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/renderer -I%(cocosdir)s -I%(cocosdir)s/cocos/platform/android -I%(cocosdir)s/external/sources -I%(cocosdir)s/external/android/armeabi-v7a/include/v8 -I%(cocosdir)s/external/android/armeabi-v7a/include/uv
cocos_flags = -DANDROID -DCC_PLATFORM=3 -DCC_PLATFORM_MAC_IOS=1 -DCC_PLATFORM_MAC_OSX=4 -DCC_PLATFORM_WINDOWS=2 -DCC_PLATFORM_ANDROID=3


cxxgenerator_headers =

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s

# what headers to parse
headers = %(cocosdir)s/cocos/renderer/pipeline/forward/ForwardPipeline.h %(cocosdir)s/cocos/renderer/pipeline/forward/ForwardFlow.h %(cocosdir)s/cocos/renderer/pipeline/forward/ForwardStage.h %(cocosdir)s/cocos/renderer/pipeline/shadow/ShadowFlow.h %(cocosdir)s/cocos/renderer/pipeline/shadow/ShadowStage.h %(cocosdir)s/cocos/renderer/pipeline/RenderPipeline.h %(cocosdir)s/cocos/renderer/pipeline/RenderFlow.h %(cocosdir)s/cocos/renderer/pipeline/RenderStage.h %(cocosdir)s/cocos/renderer/pipeline/Define.h %(cocosdir)s/cocos/renderer/pipeline/GlobalDescriptorSetManager.h %(cocosdir)s/cocos/renderer/pipeline/InstancedBuffer.h %(cocosdir)s/cocos/renderer/pipeline/deferred/DeferredPipeline.h %(cocosdir)s/cocos/renderer/pipeline/deferred/MainFlow.h %(cocosdir)s/cocos/renderer/pipeline/deferred/GbufferStage.h %(cocosdir)s/cocos/renderer/pipeline/deferred/LightingStage.h %(cocosdir)s/cocos/renderer/pipeline/deferred/BloomStage.h %(cocosdir)s/cocos/renderer/pipeline/deferred/PostProcessStage.h %(cocosdir)s/cocos/renderer/pipeline/GeometryRenderer.h

hpp_headers = cocos/bindings/auto/jsb_gfx_auto.h cocos/bindings/auto/jsb_scene_auto.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = RenderPipeline GlobalDSManager ForwardPipeline ForwardFlow ForwardStage ShadowFlow ShadowStage RenderPipelineInfo RenderFlowInfo RenderStageInfo RenderQueueDesc RenderFlow RenderStage InstancedBuffer DeferredPipeline GbufferStage MainFlow LightingStage BloomStage PostProcessStage GeometryRenderer

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.
skip = ForwardPipeline::[getOrCreateRenderPass getLightsUBO getValidLights getLightBuffers getLightIndexOffsets getLightIndices getCommandBuffers],
       RenderPipeline::[getFlows getTag getGlobalBindings getMacros getDefaultTexture getPipelineSceneData getPipelineUBO getCommandBuffers],
       RenderFlow::[render destroy getPriority getName],
       RenderStage::[render destroy getPriority getName],
       ForwardFlow::[initialize activate destroy render],
       ForwardStage::[initialize activate destroy render],
       ShadowFlow::[initialize activate destroy render],
       ShadowStage::[initialize activate destroy render clearFramebuffer],
       InstancedBuffer::[merge uploadBuffers clear getInstances getPass hasPendingModels dynamicOffsets],
       DeferredPipeline::[getOrCreateRenderPass getLightsUBO getValidLights getLightBuffers getLightIndexOffsets getLightIndices getQuadIA setDepth getDepth getRenderArea createQuadInputAssembler destroyQuadInputAssembler getDeferredRenderData updateQuadVertexData genQuadVertexData getIAByRenderArea],
       MainFlow::[initialize activate destroy render getFrameBuffer createRenderPass createRenderTargets],
       GbufferStage::[initialize activate destroy render],
       LightingStage::[initialize activate destroy render initLightingBuffer gatherLights getReflectRenderQueue getSsprTexWidth getSsprTexHeight addDenoiseIndex getRendElement getReflectionComp getMatViewProj getSsprSampler],
       BloomStage::[initialize activate destroy render],
       PostProcessStage::[initialize activate destroy render getUIPhase getUIPhase],
       InstancedBuffer::[merge uploadBuffers clear getInstances getPass hasPendingModels dynamicOffsets],
       GlobalDSManager::[activate destroy],
       GeometryRenderer::[activate flushFromJSB render destroy addDashedLine addLine addTriangle addQuad addBoundingBox addCross addFrustum addCapsule addCylinder addCone addCircle addArc addPolygon addDisc addSector addSphere addTorus addOctahedron addBezier addMesh addIndexedMesh]

rename_functions =

getter_setter = RenderPipeline::[globalDSManager descriptorSet descriptorSetLayout constantMacros clusterEnabled bloomEnabled],
                BloomStage::[threshold intensity iterations]

rename_classes =

# for all class names, should we remove something when registering in the target VM?
remove_prefix =

# classes for which there will be no "parent" lookup
classes_have_no_parents =
# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip = Clonable Object

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = RenderStage RenderFlow RenderPipeline
