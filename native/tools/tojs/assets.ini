[assets]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = assets

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = jsb

android_headers =

android_flags = -target armv7-none-linux-androideabi -D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS -DANDROID -D__ANDROID_API__=14 -gcc-toolchain %(gcc_toolchain_dir)s --sysroot=%(androidndkdir)s/platforms/android-14/arch-arm  -idirafter %(androidndkdir)s/sources/android/support/include -idirafter %(androidndkdir)s/sysroot/usr/include -idirafter %(androidndkdir)s/sysroot/usr/include/arm-linux-androideabi -idirafter %(clangllvmdir)s/lib64/clang/5.0/include -I%(androidndkdir)s/sources/cxx-stl/llvm-libc++/include

clang_headers =
clang_flags = -nostdinc -x c++ -std=c++17 -fsigned-char -U__SSE__

cocos_headers = -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/renderer -I%(cocosdir)s -I%(cocosdir)s/cocos/platform/android -I%(cocosdir)s/external/sources -I%(cocosdir)s/external/ios/include/v8

cocos_flags = -DANDROID -DCC_PLATFORM=3 -DCC_PLATFORM_MAC_IOS=1 -DCC_PLATFORM_MAC_OSX=4 -DCC_PLATFORM_WINDOWS=2 -DCC_PLATFORM_ANDROID=3


cxxgenerator_headers =

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s

# what headers to parse
headers =   %(cocosdir)s/cocos/core/assets/AssetsModuleHeader.h
            %(cocosdir)s/cocos/core/builtin/BuiltinResMgr.h
            %(cocosdir)s/cocos/3d/assets/Mesh.h
            %(cocosdir)s/cocos/3d/assets/Morph.h
            %(cocosdir)s/cocos/3d/assets/MorphRendering.h
            %(cocosdir)s/cocos/3d/assets/Skeleton.h

hpp_headers = cocos/bindings/auto/jsb_gfx_auto.h cocos/bindings/auto/jsb_pipeline_auto.h
cpp_headers = cocos/bindings/auto/jsb_cocos_auto.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = Asset BufferAsset,
        IPropertyInfo ITechniqueInfo IBlockInfo ISamplerTextureInfo  IAttributeInfo,
        IDefineInfo IBuiltin IBuiltinInfo IBuiltins IShaderSource,
        IShaderInfo EffectAsset IPassStates IPassInfo IPassInfoFull,
        IInputAttachmentInfo,
        IImageInfo,
        IBufferInfo ITextureInfo ISamplerInfo,
        RasterizerStateInfo DepthStencilStateInfo BlendTargetInfo BlendStateInfo,
        IMemoryImageSource ImageAsset,
        JsonAsset,
        IMaterialInfo Material,
        Prefab,
        Error,
        BoundingBox VertexIdChannel IGeometricInfo IFlatBuffer RenderingSubMesh,
        IRenderTextureCreateInfo RenderTexture,
        TextureBase,
        SceneAsset,
        SimpleTexture,
        TextAsset,
        ITexture2DSerializeData ITexture2DCreateInfo Texture2D,
        ITextureCubeMipmap ITextureCubeSerializeMipmapData ITextureCubeSerializeData TextureCube,
        IMeshBufferView,
        Mesh ISubMesh IStruct IVertexBundle ICreateInfo,
        MorphTarget SubMeshMorph Morph MorphRenderingInstance,
        StdMorphRendering MorphRendering,
        BuiltinResMgr,
        Skeleton


# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.
skip = Material::[getOwner setProperty$ getHash$ getHashForMaterial$],
       Mesh::[(s|g)etNativeAsset getHash$],
       SimpleTexture::[uploadDataWithArrayBuffer],
       ImageAsset::[setData],
       RasterizerStateInfo::[assignToGFX fromGFX],
       DepthStencilStateInfo::[assignToGFX fromGFX],
       BlendTargetInfo::[assignToGFX fromGFX],
       BlendStateInfo::[assignToGFX fromGFX],
       Texture2D::[deserialize],
       TextureBase::[getHash$ getSamplerHash$],
       Skeleton::[getHash$]

field = Material::[morphRendering _effectAsset _techIdx _defines _states _props],
        Mesh::[morphRendering],
        TextAsset::[text],
        Asset::[_native _nativeUrl],
        TextureBase::[_format _minFilter _magFilter _mipFilter _wrapS _wrapT _wrapR _anisotropy _width _height]

skip_public_fields = 

rename_functions = ICreateInfo::[structInfo=struct],
                   IPassInfoFull::[switch_=switch],
                   Material::[getProperty=_getProperty _props=_propsInternal getHashForJS=getHash getHashForMaterialForJS=getHashForMaterial],
                   EffectAsset::[registerAsset=register],
                   Skeleton::[getBindposes=_getBindposes setBindposes=_setBindposes getHashForJS=getHash],
                   TextureBase::[getHashForJS=getHash getSamplerHashForJS=getSamplerHash],
                   Mesh::[getHashForJS=getHash]


getter_setter= Asset::[_uuid/getUuid/setUuid nativeUrl/getNativeUrl _nativeDep/getNativeDep isDefault/isDefault],
               ImageAsset::[format url/getUrl?/setUrl?],
               BufferAsset::[buffer],
               TextureBase::[isCompressed/isCompressed _width:width/getWidth/setWidth _height:height/getHeight/setHeight],
               SimpleTexture::[mipmapLevel/mipmapLevel],
               RenderTexture::[window],
               Mesh::[_hash:hash/getHashForJS/setHash data:_data/getData jointBufferIndices/getJointBufferIndices maxPosition/getMaxPosition minPosition/getMinPosition renderingSubMeshes/getRenderingSubMeshes subMeshCount/getSubMeshCount _nativeAsset/getAssetData/setAssetData],
               Material::[effectAsset effectName technique/getTechniqueIndex hash/getHashForJS parent],
               RenderingSubMesh::[mesh subMeshIdx flatBuffers:_flatBuffers jointMappedBuffers iaInfo:_iaInfo primitiveMode],
               Skeleton::[_joints:joints/getJoints?/setJoints? _hash:hash/getHashForJS?/setHash?],
               EffectAsset::[techniques shaders combinations]

               
rename_classes =

# for all class names, should we remove something when registering in the target VM?
remove_prefix =

# classes for which there will be no "parent" lookup
classes_have_no_parents =
# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip = RefCounted

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = ShapeBase
