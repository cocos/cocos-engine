[dragonbones]
prefix = dragonbones

target_namespace = dragonBones

android_headers =

macro_judgement = #if USE_DRAGONBONES > 0

android_flags = -target armv7-none-linux-androideabi -D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS -DANDROID -D__ANDROID_API__=14 -gcc-toolchain %(gcc_toolchain_dir)s --sysroot=%(androidndkdir)s/platforms/android-14/arch-arm  -idirafter %(androidndkdir)s/sources/android/support/include -idirafter %(androidndkdir)s/sysroot/usr/include -idirafter %(androidndkdir)s/sysroot/usr/include/arm-linux-androideabi -idirafter %(clangllvmdir)s/lib64/clang/5.0/include -I%(androidndkdir)s/sources/cxx-stl/llvm-libc++/include -I%(cocosdir)s/external/android/arm64-v8a/include/v8

clang_headers =
clang_flags = -nostdinc -x c++ -std=c++17 -fsigned-char -mfloat-abi=soft -U__SSE__

cocos_headers = -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/bindings/jswrapper -I%(cocosdir)s/cocos/platform/android -I%(cocosdir)s/external/sources  -I%(cocosdir)s/cocos/editor-support
cocos_flags = -DANDROID -DCC_PLATFORM=3 -DCC_PLATFORM_MAC_IOS=1 -DCC_PLATFORM_MAC_OSX=4 -DCC_PLATFORM_WINDOWS=2 -DCC_PLATFORM_ANDROID=3

cxxgenerator_headers =

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s

headers = %(cocosdir)s/cocos/editor-support/dragonbones-creator-support/CCDragonBonesHeaders.h

classes = Rectangle DragonBonesData CCFactory CCArmatureDisplay Armature CCSlot WorldClock Animation Slot BaseFactory BaseObject TextureData CCTextureData TextureAtlasData CCTextureAtlasData AnimationState EventObject Bone Transform Matrix TransformObject ArmatureData BoneData SlotData SkinData AnimationData CCArmatureCacheDisplay ArmatureCacheMgr RealTimeAttachUtil CacheModeAttachUtil AttachUtilBase

abstract_classes = DragonBonesData Armature CCSlot WorldClock Animation Slot BaseFactory BaseObject TextureData CCTextureData TextureAtlasData CCTextureAtlasData AnimationState EventObject Bone Transform Matrix TransformObject ArmatureData BoneData SlotData SkinData AnimationData AttachUtilBase

skip = CCFactory::[destroyInstance loadDragonBonesData loadTextureAtlasData getRenderOrder],
       BaseFactory::[replaceDisplay getAllTextureAtlasData getAllDragonBonesData getClassTypeIndex replaceSlotDisplayList getTextureAtlasData parseTextureAtlasData],
       Armature::[intersectsSegment getAnimatable _addConstraint getReplacedTexture setReplacedTexture getBoneByDisplay getSlotByDisplay init _sortZOrder getBones getSlots getDisplay getTypeIndex getRenderOrder],
       Animation::[playConfig getAnimationConfig getTypeIndex getStates setAnimations getAnimations],
       Slot::[setRawDisplayDatas replaceDisplayData intersectsSegment init getDisplay getRawDisplay getMeshDisplay setDisplay _updateBlendMode _updateVisible _setDisplayIndex _setDisplayList getDisplayList _setColor _setDisplayList],
       AnimationState::[init copyFrom getTypeIndex],
       CCSlot::[getTexture _onClear getClassTypeIndex getTypeIndex],
       Transform::[operator= fromMatrix add identity minus toMatrix],
       Matrix::[operator= identity concat invert transformPoint transformRectangle],
       WorldClock::[contains add remove],
       ArmatureData::[getData setUserData addConstraint getUserData getConstraint addAction setCacheFrame getCacheFrame getTypeIndex getActions getDefaultActions cacheFrames addBone addSlot addSkin addAnimation getSortedBones getSortedSlots],
       BoneData::[getData getUserData setUserData getTypeIndex],
       SlotData::[getUserData setUserData getDefaultColor createColor setColor getColor getDefaultColor getTypeIndex],
       AnimationData::[getActionTimeline setActionTimeline addConstraintTimeline setZOrderTimeline cacheFrames addBoneTimeline addSlotTimeline getSlotTimelines getBoneTimelines getConstraintTimelines getClassTypeIndex getTypeIndex],
       BaseObject::[getClassTypeIndex setObjectRecycleOrDestroyCallback isInPool getAllObjects],
       TextureAtlasData::[getTextures copyFrom],
       DragonBonesData::[getUserData setUserData getTypeIndex],
       SkinData::[replaceDisplay setRawDisplayDatas replaceDisplayData addDisplay getDisplay getDisplays getSlotDisplays getTypeIndex],
       Bone::[getTypeIndex],
       EventObject::[getData getTypeIndex actionDataToInstance],
       TextureData::[copyFrom],
       CCTextureAtlasData::[setRenderTexture getRenderTexture getTypeIndex],
       CCTextureData::[getTypeIndex],
       CCArmatureDisplay::[render update getRenderOrder],
       RealTimeAttachUtil::[syncAttachedNode],
       CacheModeAttachUtil::[syncAttachedNode],
       AttachUtilBase::[releaseAttachedNode],
       CCArmatureCacheDisplay::[getRenderOrder]

field = Transform::[x y skew scaleX scaleY rotation],
        Slot::[displayController _zOrder],
        Matrix::[a b c d tx ty],
        EventObject::[animationState armature name type bone slot],
        AnimationState::[timeScale displayControl additiveBlending playTimes weight autoFadeOutTime fadeTotalTime name],
        Animation::[timeScale],
        ArmatureData::[frameRate name],
        AnimationData::[name frameCount playTimes duration fadeInTime],
        BoneData::[name parent],
        SlotData::[name parent],
        SkinData::[name],
        DragonBonesData::[name],
        TextureAtlasData::[name]

remove_prefix =

classes_have_no_parents = WorldClock AnimationData

base_classes_to_skip = Ref IArmatureProxy IAnimatable IMiddleware

rename_functions = CCArmatureCacheDisplay::[getArmature=armature],
                   CCArmatureDisplay::[getArmature=armature],
                   CCFactory::[getFactory=getInstance]

rename_classes =

classes_owned_by_cpp = DragonBonesData Armature CCSlot WorldClock Animation Slot BaseFactory BaseObject TextureData CCTextureData TextureAtlasData CCTextureAtlasData AnimationState EventObject Bone Transform Matrix TransformObject ArmatureData BoneData SlotData SkinData AnimationData
