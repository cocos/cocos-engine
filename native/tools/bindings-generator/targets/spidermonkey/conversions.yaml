definitions:
  # the names of the functions - we use this to generate the code and to register the functions in
  # the javascript class
  ifunction: "js_${generator.prefix}_${class_name}_${func_name}"
  sfunction: "js_${generator.prefix}_${class_name}_${func_name}_static"
  constructor: "js_${generator.prefix}_${class_name}_constructor"
  ctor: "js_${generator.prefix}_${class_name}_ctor"
  public_field: "js_${generator.prefix}_${class_name}"
conversions:
  # some times you want to use a special native type when converting from spidermonkey to native
  # the most common case would be from JS-boolean to bool. Using "bool" will fail here since we
  # pass the address to the conversion method, and a JSBool is defined as an integer in spidermonkey
  native_types:
    # float: "double"
    short: "int16_t"
    "unsigned char": "uint8_t"
    "char": "int8_t"
    "long long": "int64_t"
  ns_map:
    "cc::extension::": "cc."
    "cc::network::": "cc."
    "cc::middleware::": "cc."
    "cc::ui::": "ccui."
    "cc::": "jsb."
    "spine::": "sp."
    "dragonBones::": "dragonbones."
    "cc::gfx::": "gfx."
    "cc::xr::": "xr."
    "cc::pipeline::": "nr."
    "cc::render::": "render."
    "cc::scene::": "jsb."
    "cc::geometry::": "jsb."
    "cc::event::": "jsb."
    "cc::physics::": "jsb."
    "boost::variant2::": "boost."
    "boost::": "boost."
    "se::": "jsb."
    "cc::framegraph::": "jsb."
    "ccstd::": "jsb."
  to_native:
    # jsval to int
    int32_t: "ok &= seval_to_int32(${in_value}, (int32_t*)&${out_value})"
    # int: "ok &= seval_to_int32(${in_value}, (int32_t*)&${out_value})"
    int: "do { int32_t tmp = 0; ok &= seval_to_int32(${in_value}, &tmp); ${out_value} = (${arg_type})tmp; } while(false)"
    "unsigned int": "ok &= seval_to_uint32(${in_value}, (uint32_t*)&${out_value})"
    "unsigned char": "ok &= seval_to_uint8(${in_value}, (uint8_t*)&${out_value})"
    short: "ok &= seval_to_int16(${in_value}, &${out_value})"
    "unsigned short": "ok &= seval_to_uint16(${in_value}, &${out_value})"
    char: "ok &= seval_to_int8(${in_value}, (int8_t*)&${out_value})"
    bool: "ok &= seval_to_boolean(${in_value}, &${out_value})"
    float: "ok &= seval_to_float(${in_value}, &${out_value})"
    double: "ok &= seval_to_double(${in_value}, &${out_value})"
    long: "ok &= seval_to_long(${in_value}, &${out_value})"
    "unsigned long": "ok &= seval_to_ulong(${in_value}, &${out_value})"
    "size_t": "ok &= seval_to_size(${in_value}, &${out_value})"
    "uintptr_t": "ok &= seval_to_uintptr_t(${in_value}, &${out_value})"
    # jsval has to be a TypedArray, a UInt32Array with 2 elements
    "long long": "ok &= seval_to_longlong(${in_value}, &${out_value})"
    "string": "ok &= seval_to_std_string(${in_value}, &${out_value})"
    "char*": "std::string ${out_value}_tmp; ok &= seval_to_std_string(${in_value}, &${out_value}_tmp); ${out_value} = ${out_value}_tmp.c_str()"
    "Size": "ok &= seval_to_Size(${in_value}, &${out_value})"
    "Color4B": "ok &= seval_to_Color4B(${in_value}, &${out_value})"
    "Color4F": "ok &= seval_to_Color4F(${in_value}, &${out_value})"
    "Color3B": "ok &= seval_to_Color3B(${in_value}, &${out_value})"
    "Color3F": "ok &= seval_to_Color3F(${in_value}, &${out_value})"
    "String*": "std::string ${out_value}_tmp; ok &= seval_to_std_string(${in_value}, &${out_value}_tmp); ${out_value} = cc::String::create(${out_value}_tmp)"
    "@Vector<.*>": "ok &= seval_to_Vector(${in_value}, &${out_value})"
    "@Map<std::string.*>": "ok &= seval_to_Map_string_key(${in_value}, &${out_value})"
    "@map<std::string.*,\\s*std::string.*>": "ok &= seval_to_std_map_string_string(${in_value}, &${out_value})"
    "Value": "ok &= seval_to_ccvalue(${in_value}, &${out_value})"
    "ValueMap": "ok &= seval_to_ccvaluemap(${in_value}, &${out_value})"
    "ValueMapIntKey": "ok &= seval_to_ccvaluemapintkey(${in_value}, &${out_value})"
    "ValueVector": "ok &= seval_to_ccvaluevector(${in_value}, &${out_value})"
    "@vector<std::string.*>": "ok &= seval_to_std_vector_string(${in_value}, &${out_value})"
    "@vector<int.*>": "ok &= seval_to_std_vector_int(${in_value}, &${out_value})"
    "@vector<float.*>": "ok &= seval_to_std_vector_float(${in_value}, &${out_value})"
    "vector<std::unordered_map<std::string, cc::Value>>": "ok &= seval_to_EffectDefineTemplate(${in_value}, &${out_value})"
    "Mat4": "ok &= seval_to_Mat4(${in_value}, &${out_value})"
    "Vec2": "ok &= seval_to_Vec2(${in_value}, &${out_value})"
    "Vec3": "ok &= seval_to_Vec3(${in_value}, &${out_value})"
    "Vec2*": "std::vector<cc::Vec2> tempData;ok &= seval_to_std_vector_Vec2(${in_value}, &tempData);${out_value}=tempData.data()"
    "Data": "ok &= seval_to_Data(${in_value}, &${out_value})"
    "DownloaderHints": "ok &= seval_to_DownloaderHints(${in_value}, &${out_value})"
    "String": "${out_value} = ${in_value}.toStringForce().c_str()"
    "se_object_ptr": "${out_value} = ${in_value}.toObject()"
    "@vector<.*>": "ok &= seval_to_std_vector(${in_value}, &${out_value})"
    object: "ok &= seval_to_native_ptr(${in_value}, &${out_value})"
    "void*": "ok &= seval_to_native_ptr(${in_value}, &${out_value})"
    "Rect": "ok &= seval_to_gfx_rect(${in_value}, &${out_value})"
    "Viewport": "ok &= seval_to_gfx_viewport(${in_value}, &${out_value})"
    "Color": "ok &= seval_to_gfx_color(${in_value}, &${out_value})"
    "ColorList": "ok &= seval_to_gfx_color_list(${in_value}, &${out_value})"
    "Offset": "ok &= seval_to_gfx_offset(${in_value}, &${out_value})"
    "Extent": "ok &= seval_to_gfx_extent(${in_value}, &${out_value})"
    "TextureSubres": "ok &= seval_to_gfx_texture_subres(${in_value}, &${out_value})"
    "TextureCopy": "ok &= seval_to_gfx_texture_copy(${in_value}, &${out_value})"
    "BufferTextureCopy": "ok &= seval_to_gfx_buffer)texture_copy(${in_value}, &${out_value})"
    "BufferTextureCopyList": "ok &= seval_to_gfx_buffer_texture_copy_list(${in_value}, &${out_value})"
    "BufferInfo": "ok &= seval_to_gfx_buffer_info(${in_value}, &${out_value})"
    "BufferViewInfo": "ok &= seval_to_gfx_buffer_view_info(${in_value}, &${out_value})"
    "TextureInfo": "ok &= seval_to_gfx_texture_info(${in_value}, &${out_value})"
    "DescriptorSetInfo": "ok &= seval_to_gfx_descriptor_set_info(${in_value}, &${out_value})"
    "BindingMappingInfo": "ok &= seval_to_gfx_binding_mapping_info(${in_value}, &${out_value})"
    "ShaderStage": "ok &= seval_to_gfx_shader_stage(${in_value}, &${out_value})"
    "UniformSampler": "ok &= seval_to_gfx_uniform_sampler(${in_value}, &${out_value})"
    "UniformBlock": "ok &= seval_to_gfx_uniform_block(${in_value}, &${out_value})"
    "Uniform": "ok &= seval_to_gfx_uniform(${in_value}, &${out_value})"
    "ShaderInfo": "ok &= seval_to_gfx_shader_info(${in_value}, &${out_value})"
    "DrawInfo": "ok &= seval_to_gfx_draw_info(${in_value}, &${out_value})"
    "IndirectBuffer": "ok &= seval_to_gfx_inderect_buffer(${in_value}, &${out_value})"
    "SamplerInfo": "ok &= seval_to_gfx_sampler_info(${in_value}, &${out_value})"
    "ColorAttachment": "ok &= seval_to_gfx_color_attachment(${in_value}, &${out_value})"
    "DepthStencilAttachment": "ok &= seval_to_gfx_depth_stencil_attachment(${in_value}, &${out_value})"
    "SubPassInfo": "ok &= seval_to_gfx_sub_pass_info(${in_value}, &${out_value})"
    "RenderPassInfo": "ok &= seval_to_gfx_render_pass_info(${in_value}, &${out_value})"
    "QueueInfo": "ok &= seval_to_gfx_queue_info(${in_value}, &${out_value})"
    "PipelineLayoutInfo": "ok &= seval_to_gfx_pipeline_layout_info(${in_value}, &${out_value})"
    "DescriptorSetLayoutInfo": "ok &= seval_to_gfx_descriptor_set_layout_info(${in_value}, &${out_value})"
    "DescriptorSetLayoutBinding": "ok &= seval_to_gfx_descriptor_set_layout_binding(${in_value}, &${out_value})"
    "FramebufferInfo": "ok &= seval_to_gfx_frame_buffer_info(${in_value}, &${out_value})"
    "CommandBufferInfo": "ok &= seval_to_gfx_command_buffer_info(${in_value}, &${out_value})"
    "InputAssemblerInfo": "ok &= seval_to_gfx_input_assembler_info(${in_value}, &${out_value})"

  from_native:
    # int to jsval
    int32_t: "ok &= int32_to_seval((int32_t)${in_value}, &${out_value})"
    int: "ok &= int32_to_seval((int)${in_value}, &${out_value})"
    enum: "ok &= int32_to_seval((int)${in_value}, &${out_value})"
    "unsigned int": "ok &= uint32_to_seval((unsigned int)${in_value}, &${out_value})"
    "unsigned short": "ok &= int16_to_seval((unsigned short)${in_value}, &${out_value})"
    "unsigned char": "ok &= uint8_to_seval((unsigned char)${in_value}, &${out_value})"
    "char": "ok &= int8_to_seval(${in_value}, &${out_value})"
    "long long": "ok &= longlong_to_seval(${in_value}, &${out_value})"
    "string": "ok &= std_string_to_seval(${in_value}, &${out_value})"
    "string&": "ok &= std_string_to_seval(${in_value}, &${out_value})"
    "char*": "ok &= std_string_to_seval(${in_value}, &${out_value})"
    bool: "ok &= boolean_to_seval(${in_value}, &${out_value})"
    float: "ok &= float_to_seval(${in_value}, &${out_value})"
    double: "ok &= double_to_seval(${in_value}, &${out_value})"
    long: "ok &= long_to_seval(${in_value}, &${out_value})"
    "unsigned long": "ok &= ulong_to_seval(${in_value}, &${out_value})"
    "uintptr_t": "uintptr_t_to_seval(${in_value}, &${out_value})"
    "Size": "ok &= Size_to_seval(${in_value}, &${out_value})"
    "Color4B": "ok &= Color4B_to_seval(${in_value}, &${out_value})"
    "Color4F": "ok &= Color4F_to_seval(${in_value}, &${out_value})"
    "Color3B": "ok &= Color3B_to_seval(${in_value}, &${out_value})"
    "Color3F": "ok &= Color3F_to_seval(${in_value}, &${out_value})"
    "@Vector<.*>": "ok &= Vector_to_seval(${in_value}, &${out_value})"
    "@vector<cc::gfx::.*>": "ok &= std_vector_to_seval(${in_value}, &${out_value})"
    "@Map<std::string.*>": "ok &= Map_string_key_to_seval(${in_value}, &${out_value})"
    "@map<std::string.*,\\s*std::string.*>": "ok &= std_map_string_string_to_seval(${in_value}, &${out_value})"
    "Value": "ok &= ccvalue_to_seval(${in_value}, &${out_value})"
    "ValueMap": "ok &= ccvaluemap_to_seval(${in_value}, &${out_value})"
    "ValueMapIntKey": "ok &= ccvaluemapintkey_to_seval(${in_value}, &${out_value})"
    "ValueVector": "ok &= ccvaluevector_to_seval(${in_value}, &${out_value})"
    "@vector<std::string.*>": "ok &= std_vector_string_to_seval(${in_value}, &${out_value})"
    "@vector<int.*>": "ok &= std_vector_int_to_seval(${in_value}, &${out_value})"
    "@vector<float.*>": "ok &= std_vector_float_to_seval(${in_value}, &${out_value})"
    "Mat4": "ok &= Mat4_to_seval(${in_value}, &${out_value})"
    "Vec2": "ok &= Vec2_to_seval(${in_value}, &${out_value})"
    "Vec3": "ok &= Vec3_to_seval(${in_value}, &${out_value})"
    "Vec4": "ok &= Vec4_to_seval(${in_value}, &${out_value})"
    "ManifestAsset": "ok &= ManifestAsset_to_seval(${in_value}, &${out_value})"
    "@DownloadTask.*": "ok &= DownloadTask_to_seval(${in_value}, &${out_value})"
    "@shared_ptr<.*DownloadTask.*": "ok &= DownloadTask_to_seval(*${in_value}, &${out_value})"
    "Data": "ok &= Data_to_seval(${in_value}, &${out_value})"
    "se_object_ptr": "${out_value}.setObject(${in_value})"
    "String": "${out_value}.setString(${in_value})"
    object: "ok &= native_ptr_to_seval(${in_value}, &${out_value})"
    rooted_object: "ok &= native_ptr_to_rooted_seval<${ntype.replace('*', '').replace('const ', '')}>((${ntype.replace('const ', '')})${in_value}, &${out_value})"
