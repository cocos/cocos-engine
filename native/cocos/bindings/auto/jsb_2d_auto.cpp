// clang-format off

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/****************************************************************************
 Copyright (c) 2022 Xiamen Yaji Software Co., Ltd.

 http://www.cocos.com

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
 worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
 not use Cocos Creator software for developing other software or tools that's
 used for developing games. You are not granted to publish, distribute,
 sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
****************************************************************************/

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-variable"
#elif defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-variable"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable : 4101)
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static 
#endif



#include <stdio.h>


#include "bindings/jswrapper/SeApi.h"
#include "bindings/manual/jsb_conversions.h"
#include "bindings/manual/jsb_global.h"


#include "bindings/auto/jsb_2d_auto.h"
#include "bindings/auto/jsb_scene_auto.h"
#include "bindings/auto/jsb_gfx_auto.h"
#include "bindings/auto/jsb_assets_auto.h"


#define cc_UIMeshBuffer_vData_get(self_) self_->getVData()
#define cc_UIMeshBuffer_vData_set(self_, val_) self_->setVData(val_)
  

#define cc_UIMeshBuffer_iData_get(self_) self_->getIData()
#define cc_UIMeshBuffer_iData_set(self_, val_) self_->setIData(val_)
  

#define cc_UIMeshBuffer_useLinkData_get(self_) self_->getUseLinkData()
#define cc_UIMeshBuffer_useLinkData_set(self_, val_) self_->setUseLinkData(val_)
  

#define cc_RenderDrawInfo_vbBuffer_get(self_) self_->getVbBuffer()
#define cc_RenderDrawInfo_vbBuffer_set(self_, val_) self_->setVbBuffer(val_)
  

#define cc_RenderDrawInfo_ibBuffer_get(self_) self_->getIbBuffer()
#define cc_RenderDrawInfo_ibBuffer_set(self_, val_) self_->setIbBuffer(val_)
  

#define cc_RenderDrawInfo_vDataBuffer_get(self_) self_->getVDataBuffer()
#define cc_RenderDrawInfo_vDataBuffer_set(self_, val_) self_->setVDataBuffer(val_)
  

#define cc_RenderDrawInfo_iDataBuffer_get(self_) self_->getIDataBuffer()
#define cc_RenderDrawInfo_iDataBuffer_set(self_, val_) self_->setIDataBuffer(val_)
  

#define cc_RenderDrawInfo_material_get(self_) self_->getMaterial()
#define cc_RenderDrawInfo_material_set(self_, val_) self_->setMaterial(val_)
  

#define cc_RenderDrawInfo_texture_get(self_) self_->getTexture()
#define cc_RenderDrawInfo_texture_set(self_, val_) self_->setTexture(val_)
  

#define cc_RenderDrawInfo_sampler_get(self_) self_->getSampler()
#define cc_RenderDrawInfo_sampler_set(self_, val_) self_->setSampler(val_)
  

#define cc_RenderDrawInfo_model_get(self_) self_->getModel()
#define cc_RenderDrawInfo_model_set(self_, val_) self_->setModel(val_)
  

#define cc_RenderDrawInfo_subNode_get(self_) self_->getSubNode()
#define cc_RenderDrawInfo_subNode_set(self_, val_) self_->setSubNode(val_)
  

#define cc_RenderEntity_node_get(self_) self_->getNode()
#define cc_RenderEntity_node_set(self_, val_) self_->setNode(val_)
  

#define cc_RenderEntity_staticDrawInfoSize_get(self_) self_->getStaticDrawInfoSize()
#define cc_RenderEntity_staticDrawInfoSize_set(self_, val_) self_->setStaticDrawInfoSize(val_)
  

#define cc_RenderEntity_stencilStage_get(self_) self_->getStencilStage()
#define cc_RenderEntity_stencilStage_set(self_, val_) self_->setStencilStage(val_)
  


se::Class* __jsb_cc_MeshBufferLayout_class = nullptr;
se::Object* __jsb_cc_MeshBufferLayout_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_MeshBufferLayout) 

static bool js_cc_MeshBufferLayout_byteOffset_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::MeshBufferLayout *arg1 = (cc::MeshBufferLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::MeshBufferLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->byteOffset, s.thisObject());
    SE_PRECONDITION2(ok, false, "MeshBufferLayout_byteOffset_set,2,SWIGTYPE_uint32_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_MeshBufferLayout_byteOffset_set) 

static bool js_cc_MeshBufferLayout_byteOffset_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::MeshBufferLayout *arg1 = (cc::MeshBufferLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::MeshBufferLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->byteOffset, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "MeshBufferLayout_byteOffset_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->byteOffset, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_MeshBufferLayout_byteOffset_get) 

static bool js_cc_MeshBufferLayout_vertexOffset_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::MeshBufferLayout *arg1 = (cc::MeshBufferLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::MeshBufferLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->vertexOffset, s.thisObject());
    SE_PRECONDITION2(ok, false, "MeshBufferLayout_vertexOffset_set,2,SWIGTYPE_uint32_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_MeshBufferLayout_vertexOffset_set) 

static bool js_cc_MeshBufferLayout_vertexOffset_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::MeshBufferLayout *arg1 = (cc::MeshBufferLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::MeshBufferLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->vertexOffset, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "MeshBufferLayout_vertexOffset_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->vertexOffset, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_MeshBufferLayout_vertexOffset_get) 

static bool js_cc_MeshBufferLayout_indexOffset_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::MeshBufferLayout *arg1 = (cc::MeshBufferLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::MeshBufferLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->indexOffset, s.thisObject());
    SE_PRECONDITION2(ok, false, "MeshBufferLayout_indexOffset_set,2,SWIGTYPE_uint32_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_MeshBufferLayout_indexOffset_set) 

static bool js_cc_MeshBufferLayout_indexOffset_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::MeshBufferLayout *arg1 = (cc::MeshBufferLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::MeshBufferLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->indexOffset, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "MeshBufferLayout_indexOffset_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->indexOffset, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_MeshBufferLayout_indexOffset_get) 

static bool js_cc_MeshBufferLayout_dirtyMark_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::MeshBufferLayout *arg1 = (cc::MeshBufferLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::MeshBufferLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->dirtyMark, s.thisObject());
    SE_PRECONDITION2(ok, false, "MeshBufferLayout_dirtyMark_set,2,SWIGTYPE_uint32_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_MeshBufferLayout_dirtyMark_set) 

static bool js_cc_MeshBufferLayout_dirtyMark_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::MeshBufferLayout *arg1 = (cc::MeshBufferLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::MeshBufferLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->dirtyMark, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "MeshBufferLayout_dirtyMark_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->dirtyMark, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_MeshBufferLayout_dirtyMark_get) 

// js_ctor
static bool js_new_cc_MeshBufferLayout(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::MeshBufferLayout *result;
    result = (cc::MeshBufferLayout *)new cc::MeshBufferLayout();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_MeshBufferLayout, __jsb_cc_MeshBufferLayout_class, js_delete_cc_MeshBufferLayout)

static bool js_delete_cc_MeshBufferLayout(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_MeshBufferLayout) 

template<>
bool sevalue_to_native(const se::Value &from, cc::MeshBufferLayout * to, se::Object *ctx)
{
    assert(from.isObject());
    se::Object *json = from.toObject();
    auto* data = reinterpret_cast<cc::MeshBufferLayout*>(json->getPrivateData());
    if (data) {
        *to = *data;
        return true;
    }
    se::Value field;
    bool ok = true;
    
    json->getProperty("byteOffset", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->byteOffset), ctx);
    }
    
    
    json->getProperty("vertexOffset", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->vertexOffset), ctx);
    }
    
    
    json->getProperty("indexOffset", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->indexOffset), ctx);
    }
    
    
    json->getProperty("dirtyMark", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->dirtyMark), ctx);
    }
    
    
    return ok;
}


bool js_register_cc_MeshBufferLayout(se::Object* obj) {
    auto* cls = se::Class::create("MeshBufferLayout", obj, nullptr, _SE(js_new_cc_MeshBufferLayout)); 
    
    cls->defineProperty("byteOffset", _SE(js_cc_MeshBufferLayout_byteOffset_get), _SE(js_cc_MeshBufferLayout_byteOffset_set)); 
    cls->defineProperty("vertexOffset", _SE(js_cc_MeshBufferLayout_vertexOffset_get), _SE(js_cc_MeshBufferLayout_vertexOffset_set)); 
    cls->defineProperty("indexOffset", _SE(js_cc_MeshBufferLayout_indexOffset_get), _SE(js_cc_MeshBufferLayout_indexOffset_set)); 
    cls->defineProperty("dirtyMark", _SE(js_cc_MeshBufferLayout_dirtyMark_get), _SE(js_cc_MeshBufferLayout_dirtyMark_set)); 
    
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_MeshBufferLayout));
    
    
    cls->install();
    JSBClassType::registerClass<cc::MeshBufferLayout>(cls);
    
    __jsb_cc_MeshBufferLayout_proto = cls->getProto();
    __jsb_cc_MeshBufferLayout_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_UIMeshBuffer_class = nullptr;
se::Object* __jsb_cc_UIMeshBuffer_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_UIMeshBuffer) 

// js_ctor
static bool js_new_cc_UIMeshBuffer(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::UIMeshBuffer *result;
    result = (cc::UIMeshBuffer *)new cc::UIMeshBuffer();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_UIMeshBuffer, __jsb_cc_UIMeshBuffer_class, js_delete_cc_UIMeshBuffer)

static bool js_delete_cc_UIMeshBuffer(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_UIMeshBuffer) 

static bool js_cc_UIMeshBuffer_initialize(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::UIMeshBuffer *arg1 = (cc::UIMeshBuffer *) NULL ;
    cc::gfx::Device *arg2 = (cc::gfx::Device *) NULL ;
    ccstd::vector< cc::gfx::Attribute > *arg3 = 0 ;
    uint32_t arg4 ;
    uint32_t arg5 ;
    ccstd::vector< cc::gfx::Attribute > temp3 ;
    
    if(argc != 4) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 4);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::UIMeshBuffer>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "UIMeshBuffer_initialize,2,SWIGTYPE_p_cc__gfx__Device"); 
    // %typemap(in) SWIGTYPE&&
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "UIMeshBuffer_initialize,3,SWIGTYPE_p_ccstd__vectorT_cc__gfx__Attribute_t");
    arg3 = &temp3;
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[2], &arg4, s.thisObject());
    SE_PRECONDITION2(ok, false, "UIMeshBuffer_initialize,4,SWIGTYPE_uint32_t"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[3], &arg5, s.thisObject());
    SE_PRECONDITION2(ok, false, "UIMeshBuffer_initialize,5,SWIGTYPE_uint32_t"); 
    
    (arg1)->initialize(arg2,(ccstd::vector< cc::gfx::Attribute > &&)*arg3,arg4,arg5);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_UIMeshBuffer_initialize) 

static bool js_cc_UIMeshBuffer_reset(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::UIMeshBuffer *arg1 = (cc::UIMeshBuffer *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::UIMeshBuffer>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->reset();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_UIMeshBuffer_reset) 

static bool js_cc_UIMeshBuffer_destroy(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::UIMeshBuffer *arg1 = (cc::UIMeshBuffer *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::UIMeshBuffer>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->destroy();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_UIMeshBuffer_destroy) 

static bool js_cc_UIMeshBuffer_uploadBuffers(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::UIMeshBuffer *arg1 = (cc::UIMeshBuffer *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::UIMeshBuffer>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->uploadBuffers();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_UIMeshBuffer_uploadBuffers) 

static bool js_cc_UIMeshBuffer_syncSharedBufferToNative(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::UIMeshBuffer *arg1 = (cc::UIMeshBuffer *) NULL ;
    uint32_t *arg2 = (uint32_t *) NULL ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::UIMeshBuffer>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "UIMeshBuffer_syncSharedBufferToNative,2,SWIGTYPE_p_uint32_t"); 
    (arg1)->syncSharedBufferToNative(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_UIMeshBuffer_syncSharedBufferToNative) 

static bool js_cc_UIMeshBuffer_vData_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::UIMeshBuffer *arg1 = (cc::UIMeshBuffer *) NULL ;
    float *arg2 = (float *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::UIMeshBuffer>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "UIMeshBuffer_vData_set,2,SWIGTYPE_p_float"); 
    cc_UIMeshBuffer_vData_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_UIMeshBuffer_vData_set) 

static bool js_cc_UIMeshBuffer_vData_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::UIMeshBuffer *arg1 = (cc::UIMeshBuffer *) NULL ;
    float *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::UIMeshBuffer>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (float *)cc_UIMeshBuffer_vData_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "UIMeshBuffer_vData_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_UIMeshBuffer_vData_get) 

static bool js_cc_UIMeshBuffer_iData_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::UIMeshBuffer *arg1 = (cc::UIMeshBuffer *) NULL ;
    uint16_t *arg2 = (uint16_t *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::UIMeshBuffer>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "UIMeshBuffer_iData_set,2,SWIGTYPE_p_uint16_t"); 
    cc_UIMeshBuffer_iData_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_UIMeshBuffer_iData_set) 

static bool js_cc_UIMeshBuffer_iData_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::UIMeshBuffer *arg1 = (cc::UIMeshBuffer *) NULL ;
    uint16_t *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::UIMeshBuffer>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (uint16_t *)cc_UIMeshBuffer_iData_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "UIMeshBuffer_iData_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_UIMeshBuffer_iData_get) 

static bool js_cc_UIMeshBuffer_useLinkData_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::UIMeshBuffer *arg1 = (cc::UIMeshBuffer *) NULL ;
    bool arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::UIMeshBuffer>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg2);
    SE_PRECONDITION2(ok, false, "UIMeshBuffer_useLinkData_set,2,SWIGTYPE_bool"); 
    cc_UIMeshBuffer_useLinkData_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_UIMeshBuffer_useLinkData_set) 

static bool js_cc_UIMeshBuffer_useLinkData_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::UIMeshBuffer *arg1 = (cc::UIMeshBuffer *) NULL ;
    bool result;
    
    arg1 = SE_THIS_OBJECT<cc::UIMeshBuffer>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)cc_UIMeshBuffer_useLinkData_get(arg1);
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_UIMeshBuffer_useLinkData_get) 

bool js_register_cc_UIMeshBuffer(se::Object* obj) {
    auto* cls = se::Class::create("UIMeshBuffer", obj, nullptr, _SE(js_new_cc_UIMeshBuffer)); 
    
    cls->defineProperty("vData", _SE(js_cc_UIMeshBuffer_vData_get), _SE(js_cc_UIMeshBuffer_vData_set)); 
    cls->defineProperty("iData", _SE(js_cc_UIMeshBuffer_iData_get), _SE(js_cc_UIMeshBuffer_iData_set)); 
    cls->defineProperty("useLinkData", _SE(js_cc_UIMeshBuffer_useLinkData_get), _SE(js_cc_UIMeshBuffer_useLinkData_set)); 
    
    cls->defineFunction("initialize", _SE(js_cc_UIMeshBuffer_initialize)); 
    cls->defineFunction("reset", _SE(js_cc_UIMeshBuffer_reset)); 
    cls->defineFunction("destroy", _SE(js_cc_UIMeshBuffer_destroy)); 
    cls->defineFunction("uploadBuffers", _SE(js_cc_UIMeshBuffer_uploadBuffers)); 
    cls->defineFunction("syncSharedBufferToNative", _SE(js_cc_UIMeshBuffer_syncSharedBufferToNative)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_UIMeshBuffer));
    
    
    cls->install();
    JSBClassType::registerClass<cc::UIMeshBuffer>(cls);
    
    __jsb_cc_UIMeshBuffer_proto = cls->getProto();
    __jsb_cc_UIMeshBuffer_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_Render2dLayout_class = nullptr;
se::Object* __jsb_cc_Render2dLayout_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_Render2dLayout) 

static bool js_cc_Render2dLayout_position_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::Render2dLayout *arg1 = (cc::Render2dLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::Render2dLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->position, s.thisObject());
    SE_PRECONDITION2(ok, false, "Render2dLayout_position_set,2,SWIGTYPE_Vec3"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_Render2dLayout_position_set) 

static bool js_cc_Render2dLayout_position_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::Render2dLayout *arg1 = (cc::Render2dLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::Render2dLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->position, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Render2dLayout_position_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->position, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_Render2dLayout_position_get) 

static bool js_cc_Render2dLayout_uv_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::Render2dLayout *arg1 = (cc::Render2dLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::Render2dLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->uv, s.thisObject());
    SE_PRECONDITION2(ok, false, "Render2dLayout_uv_set,2,SWIGTYPE_Vec2"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_Render2dLayout_uv_set) 

static bool js_cc_Render2dLayout_uv_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::Render2dLayout *arg1 = (cc::Render2dLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::Render2dLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->uv, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Render2dLayout_uv_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->uv, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_Render2dLayout_uv_get) 

static bool js_cc_Render2dLayout_color_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::Render2dLayout *arg1 = (cc::Render2dLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::Render2dLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->color, s.thisObject());
    SE_PRECONDITION2(ok, false, "Render2dLayout_color_set,2,SWIGTYPE_Vec4"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_Render2dLayout_color_set) 

static bool js_cc_Render2dLayout_color_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::Render2dLayout *arg1 = (cc::Render2dLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::Render2dLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->color, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Render2dLayout_color_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->color, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_Render2dLayout_color_get) 

// js_ctor
static bool js_new_cc_Render2dLayout(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::Render2dLayout *result;
    result = (cc::Render2dLayout *)new cc::Render2dLayout();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_Render2dLayout, __jsb_cc_Render2dLayout_class, js_delete_cc_Render2dLayout)

static bool js_delete_cc_Render2dLayout(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_Render2dLayout) 

template<>
bool sevalue_to_native(const se::Value &from, cc::Render2dLayout * to, se::Object *ctx)
{
    assert(from.isObject());
    se::Object *json = from.toObject();
    auto* data = reinterpret_cast<cc::Render2dLayout*>(json->getPrivateData());
    if (data) {
        *to = *data;
        return true;
    }
    se::Value field;
    bool ok = true;
    
    json->getProperty("position", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->position), ctx);
    }
    
    
    json->getProperty("uv", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->uv), ctx);
    }
    
    
    json->getProperty("color", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->color), ctx);
    }
    
    
    return ok;
}


bool js_register_cc_Render2dLayout(se::Object* obj) {
    auto* cls = se::Class::create("Render2dLayout", obj, nullptr, _SE(js_new_cc_Render2dLayout)); 
    
    cls->defineProperty("position", _SE(js_cc_Render2dLayout_position_get), _SE(js_cc_Render2dLayout_position_set)); 
    cls->defineProperty("uv", _SE(js_cc_Render2dLayout_uv_get), _SE(js_cc_Render2dLayout_uv_set)); 
    cls->defineProperty("color", _SE(js_cc_Render2dLayout_color_get), _SE(js_cc_Render2dLayout_color_set)); 
    
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_Render2dLayout));
    
    
    cls->install();
    JSBClassType::registerClass<cc::Render2dLayout>(cls);
    
    __jsb_cc_Render2dLayout_proto = cls->getProto();
    __jsb_cc_Render2dLayout_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_LocalDSBF_class = nullptr;
se::Object* __jsb_cc_LocalDSBF_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_LocalDSBF) 

static bool js_cc_LocalDSBF_ds_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::LocalDSBF *arg1 = (cc::LocalDSBF *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::LocalDSBF>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg1->ds, s.thisObject());
    SE_PRECONDITION2(ok, false, "LocalDSBF_ds_set,2,SWIGTYPE_p_cc__gfx__DescriptorSet"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_LocalDSBF_ds_set) 

static bool js_cc_LocalDSBF_ds_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::LocalDSBF *arg1 = (cc::LocalDSBF *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::LocalDSBF>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(arg1->ds, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LocalDSBF_ds_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->ds, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_LocalDSBF_ds_get) 

static bool js_cc_LocalDSBF_uboBuf_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::LocalDSBF *arg1 = (cc::LocalDSBF *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::LocalDSBF>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg1->uboBuf, s.thisObject());
    SE_PRECONDITION2(ok, false, "LocalDSBF_uboBuf_set,2,SWIGTYPE_p_cc__gfx__Buffer"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_LocalDSBF_uboBuf_set) 

static bool js_cc_LocalDSBF_uboBuf_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::LocalDSBF *arg1 = (cc::LocalDSBF *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::LocalDSBF>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(arg1->uboBuf, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LocalDSBF_uboBuf_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->uboBuf, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_LocalDSBF_uboBuf_get) 

// js_ctor
static bool js_new_cc_LocalDSBF(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::LocalDSBF *result;
    result = (cc::LocalDSBF *)new cc::LocalDSBF();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_LocalDSBF, __jsb_cc_LocalDSBF_class, js_delete_cc_LocalDSBF)

static bool js_delete_cc_LocalDSBF(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_LocalDSBF) 

template<>
bool sevalue_to_native(const se::Value &from, cc::LocalDSBF * to, se::Object *ctx)
{
    assert(from.isObject());
    se::Object *json = from.toObject();
    auto* data = reinterpret_cast<cc::LocalDSBF*>(json->getPrivateData());
    if (data) {
        *to = *data;
        return true;
    }
    se::Value field;
    bool ok = true;
    
    json->getProperty("ds", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->ds), ctx);
    }
    
    
    json->getProperty("uboBuf", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->uboBuf), ctx);
    }
    
    
    return ok;
}


bool js_register_cc_LocalDSBF(se::Object* obj) {
    auto* cls = se::Class::create("LocalDSBF", obj, nullptr, _SE(js_new_cc_LocalDSBF)); 
    
    cls->defineProperty("ds", _SE(js_cc_LocalDSBF_ds_get), _SE(js_cc_LocalDSBF_ds_set)); 
    cls->defineProperty("uboBuf", _SE(js_cc_LocalDSBF_uboBuf_get), _SE(js_cc_LocalDSBF_uboBuf_set)); 
    
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_LocalDSBF));
    
    
    cls->install();
    JSBClassType::registerClass<cc::LocalDSBF>(cls);
    
    __jsb_cc_LocalDSBF_proto = cls->getProto();
    __jsb_cc_LocalDSBF_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_RenderDrawInfo_class = nullptr;
se::Object* __jsb_cc_RenderDrawInfo_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_RenderDrawInfo) 

// js_ctor
static bool js_new_cc_RenderDrawInfo(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::RenderDrawInfo *result;
    result = (cc::RenderDrawInfo *)new cc::RenderDrawInfo();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_RenderDrawInfo, __jsb_cc_RenderDrawInfo_class, js_delete_cc_RenderDrawInfo)

static bool js_delete_cc_RenderDrawInfo(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_RenderDrawInfo) 

static bool js_cc_RenderDrawInfo_getDrawInfoType(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint32_t result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = ((cc::RenderDrawInfo const *)arg1)->getDrawInfoType();
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_getDrawInfoType, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_getDrawInfoType) 

static bool js_cc_RenderDrawInfo_setDrawInfoType(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint32_t arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_setDrawInfoType,2,SWIGTYPE_uint32_t"); 
    
    (arg1)->setDrawInfoType(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_setDrawInfoType) 

static bool js_cc_RenderDrawInfo_getAccId(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint16_t result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = ((cc::RenderDrawInfo const *)arg1)->getAccId();
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_getAccId, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_getAccId) 

static bool js_cc_RenderDrawInfo_setAccId(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint16_t arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_setAccId,2,SWIGTYPE_uint16_t"); 
    
    (arg1)->setAccId(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_setAccId) 

static bool js_cc_RenderDrawInfo_getBufferId(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint16_t result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = ((cc::RenderDrawInfo const *)arg1)->getBufferId();
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_getBufferId, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_getBufferId) 

static bool js_cc_RenderDrawInfo_setBufferId(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint16_t arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_setBufferId,2,SWIGTYPE_uint16_t"); 
    
    (arg1)->setBufferId(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_setBufferId) 

static bool js_cc_RenderDrawInfo_getVertexOffset(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint32_t result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = ((cc::RenderDrawInfo const *)arg1)->getVertexOffset();
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_getVertexOffset, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_getVertexOffset) 

static bool js_cc_RenderDrawInfo_setVertexOffset(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint32_t arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_setVertexOffset,2,SWIGTYPE_uint32_t"); 
    
    (arg1)->setVertexOffset(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_setVertexOffset) 

static bool js_cc_RenderDrawInfo_getIndexOffset(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint32_t result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = ((cc::RenderDrawInfo const *)arg1)->getIndexOffset();
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_getIndexOffset, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_getIndexOffset) 

static bool js_cc_RenderDrawInfo_setIndexOffset(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint32_t arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_setIndexOffset,2,SWIGTYPE_uint32_t"); 
    
    (arg1)->setIndexOffset(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_setIndexOffset) 

static bool js_cc_RenderDrawInfo_getVbCount(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint32_t result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = ((cc::RenderDrawInfo const *)arg1)->getVbCount();
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_getVbCount, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_getVbCount) 

static bool js_cc_RenderDrawInfo_setVbCount(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint32_t arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_setVbCount,2,SWIGTYPE_uint32_t"); 
    
    (arg1)->setVbCount(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_setVbCount) 

static bool js_cc_RenderDrawInfo_getIbCount(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint32_t result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = ((cc::RenderDrawInfo const *)arg1)->getIbCount();
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_getIbCount, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_getIbCount) 

static bool js_cc_RenderDrawInfo_setIbCount(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint32_t arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_setIbCount,2,SWIGTYPE_uint32_t"); 
    
    (arg1)->setIbCount(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_setIbCount) 

static bool js_cc_RenderDrawInfo_getVertDirty(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)((cc::RenderDrawInfo const *)arg1)->getVertDirty();
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_getVertDirty) 

static bool js_cc_RenderDrawInfo_setVertDirty(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    bool arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg2);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_setVertDirty,2,SWIGTYPE_bool"); 
    (arg1)->setVertDirty(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_setVertDirty) 

static bool js_cc_RenderDrawInfo_getDataHash(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    ccstd::hash_t result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = ((cc::RenderDrawInfo const *)arg1)->getDataHash();
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_getDataHash, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_getDataHash) 

static bool js_cc_RenderDrawInfo_setDataHash(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    ccstd::hash_t arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_setDataHash,2,SWIGTYPE_ccstd__hash_t"); 
    
    (arg1)->setDataHash(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_setDataHash) 

static bool js_cc_RenderDrawInfo_getIsMeshBuffer(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)((cc::RenderDrawInfo const *)arg1)->getIsMeshBuffer();
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_getIsMeshBuffer) 

static bool js_cc_RenderDrawInfo_setIsMeshBuffer(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    bool arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg2);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_setIsMeshBuffer,2,SWIGTYPE_bool"); 
    (arg1)->setIsMeshBuffer(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_setIsMeshBuffer) 

static bool js_cc_RenderDrawInfo_setStride(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint8_t arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_setStride,2,SWIGTYPE_uint8_t"); 
    
    (arg1)->setStride(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_setStride) 

static bool js_cc_RenderDrawInfo_getMeshBuffer(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    cc::UIMeshBuffer *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::UIMeshBuffer *)((cc::RenderDrawInfo const *)arg1)->getMeshBuffer();
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_getMeshBuffer, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_getMeshBuffer) 

static bool js_cc_RenderDrawInfo_changeMeshBuffer(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->changeMeshBuffer();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_changeMeshBuffer) 

static bool js_cc_RenderDrawInfo_setRender2dBufferToNative(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint8_t *arg2 = (uint8_t *) NULL ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_setRender2dBufferToNative,2,SWIGTYPE_p_uint8_t"); 
    (arg1)->setRender2dBufferToNative(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_setRender2dBufferToNative) 

static bool js_cc_RenderDrawInfo_getAttrSharedBufferForJS(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    se::Object *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (se::Object *)((cc::RenderDrawInfo const *)arg1)->getAttrSharedBufferForJS();
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_getAttrSharedBufferForJS, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_getAttrSharedBufferForJS) 

static bool js_cc_RenderDrawInfo_requestIA(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    cc::gfx::Device *arg2 = (cc::gfx::Device *) NULL ;
    cc::gfx::InputAssembler *result = 0 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_requestIA,2,SWIGTYPE_p_cc__gfx__Device"); 
    result = (cc::gfx::InputAssembler *)(arg1)->requestIA(arg2);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_requestIA, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_requestIA) 

static bool js_cc_RenderDrawInfo_uploadBuffers(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->uploadBuffers();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_uploadBuffers) 

static bool js_cc_RenderDrawInfo_resetMeshIA(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->resetMeshIA();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_resetMeshIA) 

static bool js_cc_RenderDrawInfo_getLocalDes(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    cc::gfx::DescriptorSet *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::gfx::DescriptorSet *)(arg1)->getLocalDes();
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_getLocalDes, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_getLocalDes) 

static bool js_cc_RenderDrawInfo_updateLocalDescriptorSet(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    cc::Node *arg2 = (cc::Node *) NULL ;
    cc::gfx::DescriptorSetLayout *arg3 = (cc::gfx::DescriptorSetLayout *) NULL ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_updateLocalDescriptorSet,2,SWIGTYPE_p_cc__Node"); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_updateLocalDescriptorSet,3,SWIGTYPE_p_cc__gfx__DescriptorSetLayout"); 
    (arg1)->updateLocalDescriptorSet(arg2,arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_updateLocalDescriptorSet) 

static bool js_cc_RenderDrawInfo_resetDrawInfo(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->resetDrawInfo();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderDrawInfo_resetDrawInfo) 

static bool js_cc_RenderDrawInfo_vbBuffer_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    float *arg2 = (float *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_vbBuffer_set,2,SWIGTYPE_p_float"); 
    cc_RenderDrawInfo_vbBuffer_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_RenderDrawInfo_vbBuffer_set) 

static bool js_cc_RenderDrawInfo_vbBuffer_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    float *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (float *)cc_RenderDrawInfo_vbBuffer_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_vbBuffer_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_RenderDrawInfo_vbBuffer_get) 

static bool js_cc_RenderDrawInfo_ibBuffer_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint16_t *arg2 = (uint16_t *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_ibBuffer_set,2,SWIGTYPE_p_uint16_t"); 
    cc_RenderDrawInfo_ibBuffer_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_RenderDrawInfo_ibBuffer_set) 

static bool js_cc_RenderDrawInfo_ibBuffer_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint16_t *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (uint16_t *)cc_RenderDrawInfo_ibBuffer_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_ibBuffer_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_RenderDrawInfo_ibBuffer_get) 

static bool js_cc_RenderDrawInfo_vDataBuffer_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    float *arg2 = (float *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_vDataBuffer_set,2,SWIGTYPE_p_float"); 
    cc_RenderDrawInfo_vDataBuffer_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_RenderDrawInfo_vDataBuffer_set) 

static bool js_cc_RenderDrawInfo_vDataBuffer_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    float *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (float *)cc_RenderDrawInfo_vDataBuffer_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_vDataBuffer_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_RenderDrawInfo_vDataBuffer_get) 

static bool js_cc_RenderDrawInfo_iDataBuffer_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint16_t *arg2 = (uint16_t *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_iDataBuffer_set,2,SWIGTYPE_p_uint16_t"); 
    cc_RenderDrawInfo_iDataBuffer_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_RenderDrawInfo_iDataBuffer_set) 

static bool js_cc_RenderDrawInfo_iDataBuffer_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    uint16_t *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (uint16_t *)cc_RenderDrawInfo_iDataBuffer_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_iDataBuffer_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_RenderDrawInfo_iDataBuffer_get) 

static bool js_cc_RenderDrawInfo_material_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    cc::Material *arg2 = (cc::Material *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_material_set,2,SWIGTYPE_p_cc__Material"); 
    cc_RenderDrawInfo_material_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_RenderDrawInfo_material_set) 

static bool js_cc_RenderDrawInfo_material_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    cc::Material *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::Material *)cc_RenderDrawInfo_material_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_material_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_RenderDrawInfo_material_get) 

static bool js_cc_RenderDrawInfo_texture_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    cc::gfx::Texture *arg2 = (cc::gfx::Texture *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_texture_set,2,SWIGTYPE_p_cc__gfx__Texture"); 
    cc_RenderDrawInfo_texture_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_RenderDrawInfo_texture_set) 

static bool js_cc_RenderDrawInfo_texture_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    cc::gfx::Texture *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::gfx::Texture *)cc_RenderDrawInfo_texture_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_texture_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_RenderDrawInfo_texture_get) 

static bool js_cc_RenderDrawInfo_sampler_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    cc::gfx::Sampler *arg2 = (cc::gfx::Sampler *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_sampler_set,2,SWIGTYPE_p_cc__gfx__Sampler"); 
    cc_RenderDrawInfo_sampler_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_RenderDrawInfo_sampler_set) 

static bool js_cc_RenderDrawInfo_sampler_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    cc::gfx::Sampler *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::gfx::Sampler *)cc_RenderDrawInfo_sampler_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_sampler_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_RenderDrawInfo_sampler_get) 

static bool js_cc_RenderDrawInfo_model_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    cc::scene::Model *arg2 = (cc::scene::Model *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_model_set,2,SWIGTYPE_p_cc__scene__Model"); 
    cc_RenderDrawInfo_model_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_RenderDrawInfo_model_set) 

static bool js_cc_RenderDrawInfo_model_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    cc::scene::Model *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::scene::Model *)cc_RenderDrawInfo_model_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_model_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_RenderDrawInfo_model_get) 

static bool js_cc_RenderDrawInfo_subNode_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    cc::Node *arg2 = (cc::Node *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_subNode_set,2,SWIGTYPE_p_cc__Node"); 
    cc_RenderDrawInfo_subNode_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_RenderDrawInfo_subNode_set) 

static bool js_cc_RenderDrawInfo_subNode_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::RenderDrawInfo *arg1 = (cc::RenderDrawInfo *) NULL ;
    cc::Node *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderDrawInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::Node *)cc_RenderDrawInfo_subNode_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderDrawInfo_subNode_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_RenderDrawInfo_subNode_get) 

bool js_register_cc_RenderDrawInfo(se::Object* obj) {
    auto* cls = se::Class::create("RenderDrawInfo", obj, nullptr, _SE(js_new_cc_RenderDrawInfo)); 
    
    cls->defineProperty("vbBuffer", _SE(js_cc_RenderDrawInfo_vbBuffer_get), _SE(js_cc_RenderDrawInfo_vbBuffer_set)); 
    cls->defineProperty("ibBuffer", _SE(js_cc_RenderDrawInfo_ibBuffer_get), _SE(js_cc_RenderDrawInfo_ibBuffer_set)); 
    cls->defineProperty("vDataBuffer", _SE(js_cc_RenderDrawInfo_vDataBuffer_get), _SE(js_cc_RenderDrawInfo_vDataBuffer_set)); 
    cls->defineProperty("iDataBuffer", _SE(js_cc_RenderDrawInfo_iDataBuffer_get), _SE(js_cc_RenderDrawInfo_iDataBuffer_set)); 
    cls->defineProperty("material", _SE(js_cc_RenderDrawInfo_material_get), _SE(js_cc_RenderDrawInfo_material_set)); 
    cls->defineProperty("texture", _SE(js_cc_RenderDrawInfo_texture_get), _SE(js_cc_RenderDrawInfo_texture_set)); 
    cls->defineProperty("sampler", _SE(js_cc_RenderDrawInfo_sampler_get), _SE(js_cc_RenderDrawInfo_sampler_set)); 
    cls->defineProperty("model", _SE(js_cc_RenderDrawInfo_model_get), _SE(js_cc_RenderDrawInfo_model_set)); 
    cls->defineProperty("subNode", _SE(js_cc_RenderDrawInfo_subNode_get), _SE(js_cc_RenderDrawInfo_subNode_set)); 
    
    cls->defineFunction("getDrawInfoType", _SE(js_cc_RenderDrawInfo_getDrawInfoType)); 
    cls->defineFunction("setDrawInfoType", _SE(js_cc_RenderDrawInfo_setDrawInfoType)); 
    cls->defineFunction("getAccId", _SE(js_cc_RenderDrawInfo_getAccId)); 
    cls->defineFunction("setAccId", _SE(js_cc_RenderDrawInfo_setAccId)); 
    cls->defineFunction("getBufferId", _SE(js_cc_RenderDrawInfo_getBufferId)); 
    cls->defineFunction("setBufferId", _SE(js_cc_RenderDrawInfo_setBufferId)); 
    cls->defineFunction("getVertexOffset", _SE(js_cc_RenderDrawInfo_getVertexOffset)); 
    cls->defineFunction("setVertexOffset", _SE(js_cc_RenderDrawInfo_setVertexOffset)); 
    cls->defineFunction("getIndexOffset", _SE(js_cc_RenderDrawInfo_getIndexOffset)); 
    cls->defineFunction("setIndexOffset", _SE(js_cc_RenderDrawInfo_setIndexOffset)); 
    cls->defineFunction("getVbCount", _SE(js_cc_RenderDrawInfo_getVbCount)); 
    cls->defineFunction("setVbCount", _SE(js_cc_RenderDrawInfo_setVbCount)); 
    cls->defineFunction("getIbCount", _SE(js_cc_RenderDrawInfo_getIbCount)); 
    cls->defineFunction("setIbCount", _SE(js_cc_RenderDrawInfo_setIbCount)); 
    cls->defineFunction("getVertDirty", _SE(js_cc_RenderDrawInfo_getVertDirty)); 
    cls->defineFunction("setVertDirty", _SE(js_cc_RenderDrawInfo_setVertDirty)); 
    cls->defineFunction("getDataHash", _SE(js_cc_RenderDrawInfo_getDataHash)); 
    cls->defineFunction("setDataHash", _SE(js_cc_RenderDrawInfo_setDataHash)); 
    cls->defineFunction("getIsMeshBuffer", _SE(js_cc_RenderDrawInfo_getIsMeshBuffer)); 
    cls->defineFunction("setIsMeshBuffer", _SE(js_cc_RenderDrawInfo_setIsMeshBuffer)); 
    cls->defineFunction("setStride", _SE(js_cc_RenderDrawInfo_setStride)); 
    cls->defineFunction("getMeshBuffer", _SE(js_cc_RenderDrawInfo_getMeshBuffer)); 
    cls->defineFunction("changeMeshBuffer", _SE(js_cc_RenderDrawInfo_changeMeshBuffer)); 
    cls->defineFunction("setRender2dBufferToNative", _SE(js_cc_RenderDrawInfo_setRender2dBufferToNative)); 
    cls->defineFunction("getAttrSharedBufferForJS", _SE(js_cc_RenderDrawInfo_getAttrSharedBufferForJS)); 
    cls->defineFunction("requestIA", _SE(js_cc_RenderDrawInfo_requestIA)); 
    cls->defineFunction("uploadBuffers", _SE(js_cc_RenderDrawInfo_uploadBuffers)); 
    cls->defineFunction("resetMeshIA", _SE(js_cc_RenderDrawInfo_resetMeshIA)); 
    cls->defineFunction("getLocalDes", _SE(js_cc_RenderDrawInfo_getLocalDes)); 
    cls->defineFunction("updateLocalDescriptorSet", _SE(js_cc_RenderDrawInfo_updateLocalDescriptorSet)); 
    cls->defineFunction("resetDrawInfo", _SE(js_cc_RenderDrawInfo_resetDrawInfo)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_RenderDrawInfo));
    
    
    cls->install();
    JSBClassType::registerClass<cc::RenderDrawInfo>(cls);
    
    __jsb_cc_RenderDrawInfo_proto = cls->getProto();
    __jsb_cc_RenderDrawInfo_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_EntityAttrLayout_class = nullptr;
se::Object* __jsb_cc_EntityAttrLayout_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_EntityAttrLayout) 

static bool js_cc_EntityAttrLayout_localOpacity_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::EntityAttrLayout *arg1 = (cc::EntityAttrLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::EntityAttrLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1->localOpacity, nullptr);
    SE_PRECONDITION2(ok, false, "EntityAttrLayout_localOpacity_set,2,SWIGTYPE_float"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_EntityAttrLayout_localOpacity_set) 

static bool js_cc_EntityAttrLayout_localOpacity_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::EntityAttrLayout *arg1 = (cc::EntityAttrLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::EntityAttrLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // out 1
    ok &= nativevalue_to_se(arg1->localOpacity, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_EntityAttrLayout_localOpacity_get) 

static bool js_cc_EntityAttrLayout_colorR_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::EntityAttrLayout *arg1 = (cc::EntityAttrLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::EntityAttrLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->colorR, s.thisObject());
    SE_PRECONDITION2(ok, false, "EntityAttrLayout_colorR_set,2,SWIGTYPE_uint8_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_EntityAttrLayout_colorR_set) 

static bool js_cc_EntityAttrLayout_colorR_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::EntityAttrLayout *arg1 = (cc::EntityAttrLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::EntityAttrLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->colorR, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "EntityAttrLayout_colorR_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->colorR, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_EntityAttrLayout_colorR_get) 

static bool js_cc_EntityAttrLayout_colorG_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::EntityAttrLayout *arg1 = (cc::EntityAttrLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::EntityAttrLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->colorG, s.thisObject());
    SE_PRECONDITION2(ok, false, "EntityAttrLayout_colorG_set,2,SWIGTYPE_uint8_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_EntityAttrLayout_colorG_set) 

static bool js_cc_EntityAttrLayout_colorG_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::EntityAttrLayout *arg1 = (cc::EntityAttrLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::EntityAttrLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->colorG, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "EntityAttrLayout_colorG_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->colorG, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_EntityAttrLayout_colorG_get) 

static bool js_cc_EntityAttrLayout_colorB_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::EntityAttrLayout *arg1 = (cc::EntityAttrLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::EntityAttrLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->colorB, s.thisObject());
    SE_PRECONDITION2(ok, false, "EntityAttrLayout_colorB_set,2,SWIGTYPE_uint8_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_EntityAttrLayout_colorB_set) 

static bool js_cc_EntityAttrLayout_colorB_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::EntityAttrLayout *arg1 = (cc::EntityAttrLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::EntityAttrLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->colorB, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "EntityAttrLayout_colorB_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->colorB, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_EntityAttrLayout_colorB_get) 

static bool js_cc_EntityAttrLayout_colorA_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::EntityAttrLayout *arg1 = (cc::EntityAttrLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::EntityAttrLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->colorA, s.thisObject());
    SE_PRECONDITION2(ok, false, "EntityAttrLayout_colorA_set,2,SWIGTYPE_uint8_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_EntityAttrLayout_colorA_set) 

static bool js_cc_EntityAttrLayout_colorA_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::EntityAttrLayout *arg1 = (cc::EntityAttrLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::EntityAttrLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->colorA, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "EntityAttrLayout_colorA_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->colorA, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_EntityAttrLayout_colorA_get) 

static bool js_cc_EntityAttrLayout_maskMode_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::EntityAttrLayout *arg1 = (cc::EntityAttrLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::EntityAttrLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->maskMode, s.thisObject());
    SE_PRECONDITION2(ok, false, "EntityAttrLayout_maskMode_set,2,SWIGTYPE_uint8_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_EntityAttrLayout_maskMode_set) 

static bool js_cc_EntityAttrLayout_maskMode_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::EntityAttrLayout *arg1 = (cc::EntityAttrLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::EntityAttrLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->maskMode, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "EntityAttrLayout_maskMode_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->maskMode, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_EntityAttrLayout_maskMode_get) 

static bool js_cc_EntityAttrLayout_colorDirtyBit_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::EntityAttrLayout *arg1 = (cc::EntityAttrLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::EntityAttrLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->colorDirtyBit, s.thisObject());
    SE_PRECONDITION2(ok, false, "EntityAttrLayout_colorDirtyBit_set,2,SWIGTYPE_uint8_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_EntityAttrLayout_colorDirtyBit_set) 

static bool js_cc_EntityAttrLayout_colorDirtyBit_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::EntityAttrLayout *arg1 = (cc::EntityAttrLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::EntityAttrLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->colorDirtyBit, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "EntityAttrLayout_colorDirtyBit_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->colorDirtyBit, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_EntityAttrLayout_colorDirtyBit_get) 

static bool js_cc_EntityAttrLayout_enabledIndex_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::EntityAttrLayout *arg1 = (cc::EntityAttrLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::EntityAttrLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->enabledIndex, s.thisObject());
    SE_PRECONDITION2(ok, false, "EntityAttrLayout_enabledIndex_set,2,SWIGTYPE_uint8_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_EntityAttrLayout_enabledIndex_set) 

static bool js_cc_EntityAttrLayout_enabledIndex_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::EntityAttrLayout *arg1 = (cc::EntityAttrLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::EntityAttrLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->enabledIndex, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "EntityAttrLayout_enabledIndex_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->enabledIndex, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_EntityAttrLayout_enabledIndex_get) 

static bool js_cc_EntityAttrLayout_useLocal_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::EntityAttrLayout *arg1 = (cc::EntityAttrLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::EntityAttrLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->useLocal, s.thisObject());
    SE_PRECONDITION2(ok, false, "EntityAttrLayout_useLocal_set,2,SWIGTYPE_uint8_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_EntityAttrLayout_useLocal_set) 

static bool js_cc_EntityAttrLayout_useLocal_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::EntityAttrLayout *arg1 = (cc::EntityAttrLayout *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::EntityAttrLayout>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->useLocal, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "EntityAttrLayout_useLocal_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->useLocal, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_EntityAttrLayout_useLocal_get) 

// js_ctor
static bool js_new_cc_EntityAttrLayout(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::EntityAttrLayout *result;
    result = (cc::EntityAttrLayout *)new cc::EntityAttrLayout();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_EntityAttrLayout, __jsb_cc_EntityAttrLayout_class, js_delete_cc_EntityAttrLayout)

static bool js_delete_cc_EntityAttrLayout(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_EntityAttrLayout) 

template<>
bool sevalue_to_native(const se::Value &from, cc::EntityAttrLayout * to, se::Object *ctx)
{
    assert(from.isObject());
    se::Object *json = from.toObject();
    auto* data = reinterpret_cast<cc::EntityAttrLayout*>(json->getPrivateData());
    if (data) {
        *to = *data;
        return true;
    }
    se::Value field;
    bool ok = true;
    
    json->getProperty("localOpacity", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->localOpacity), ctx);
    }
    
    
    json->getProperty("colorR", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->colorR), ctx);
    }
    
    
    json->getProperty("colorG", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->colorG), ctx);
    }
    
    
    json->getProperty("colorB", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->colorB), ctx);
    }
    
    
    json->getProperty("colorA", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->colorA), ctx);
    }
    
    
    json->getProperty("maskMode", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->maskMode), ctx);
    }
    
    
    json->getProperty("colorDirtyBit", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->colorDirtyBit), ctx);
    }
    
    
    json->getProperty("enabledIndex", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->enabledIndex), ctx);
    }
    
    
    json->getProperty("useLocal", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->useLocal), ctx);
    }
    
    
    return ok;
}


bool js_register_cc_EntityAttrLayout(se::Object* obj) {
    auto* cls = se::Class::create("EntityAttrLayout", obj, nullptr, _SE(js_new_cc_EntityAttrLayout)); 
    
    cls->defineProperty("localOpacity", _SE(js_cc_EntityAttrLayout_localOpacity_get), _SE(js_cc_EntityAttrLayout_localOpacity_set)); 
    cls->defineProperty("colorR", _SE(js_cc_EntityAttrLayout_colorR_get), _SE(js_cc_EntityAttrLayout_colorR_set)); 
    cls->defineProperty("colorG", _SE(js_cc_EntityAttrLayout_colorG_get), _SE(js_cc_EntityAttrLayout_colorG_set)); 
    cls->defineProperty("colorB", _SE(js_cc_EntityAttrLayout_colorB_get), _SE(js_cc_EntityAttrLayout_colorB_set)); 
    cls->defineProperty("colorA", _SE(js_cc_EntityAttrLayout_colorA_get), _SE(js_cc_EntityAttrLayout_colorA_set)); 
    cls->defineProperty("maskMode", _SE(js_cc_EntityAttrLayout_maskMode_get), _SE(js_cc_EntityAttrLayout_maskMode_set)); 
    cls->defineProperty("colorDirtyBit", _SE(js_cc_EntityAttrLayout_colorDirtyBit_get), _SE(js_cc_EntityAttrLayout_colorDirtyBit_set)); 
    cls->defineProperty("enabledIndex", _SE(js_cc_EntityAttrLayout_enabledIndex_get), _SE(js_cc_EntityAttrLayout_enabledIndex_set)); 
    cls->defineProperty("useLocal", _SE(js_cc_EntityAttrLayout_useLocal_get), _SE(js_cc_EntityAttrLayout_useLocal_set)); 
    
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_EntityAttrLayout));
    
    
    cls->install();
    JSBClassType::registerClass<cc::EntityAttrLayout>(cls);
    
    __jsb_cc_EntityAttrLayout_proto = cls->getProto();
    __jsb_cc_EntityAttrLayout_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_RenderEntity_class = nullptr;
se::Object* __jsb_cc_RenderEntity_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_RenderEntity) 

// js_ctor
static bool js_new_cc_RenderEntity(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    if (argc != 1) {
        SE_REPORT_ERROR("js_new_cc_RenderEntity: wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    
    cc::RenderEntityType arg1 ;
    int32_t temp1 ;
    cc::RenderEntity *result;
    // %typemap(in) enum SWIGTYPE (int32_t temp1)
    ok &= sevalue_to_native(args[0], &temp1);
    SE_PRECONDITION2(ok, false, "new_RenderEntity,1,SWIGTYPE_cc__RenderEntityType");
    arg1 = (cc::RenderEntityType)temp1;
    result = (cc::RenderEntity *)new cc::RenderEntity(arg1);
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_RenderEntity, __jsb_cc_RenderEntity_class, js_delete_cc_RenderEntity)

static bool js_delete_cc_RenderEntity(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_RenderEntity) 

static bool js_cc_RenderEntity_addDynamicRenderDrawInfo(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    cc::RenderDrawInfo *arg2 = (cc::RenderDrawInfo *) NULL ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderEntity_addDynamicRenderDrawInfo,2,SWIGTYPE_p_cc__RenderDrawInfo"); 
    (arg1)->addDynamicRenderDrawInfo(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_addDynamicRenderDrawInfo) 

static bool js_cc_RenderEntity_setDynamicRenderDrawInfo(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    cc::RenderDrawInfo *arg2 = (cc::RenderDrawInfo *) NULL ;
    uint32_t arg3 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderEntity_setDynamicRenderDrawInfo,2,SWIGTYPE_p_cc__RenderDrawInfo"); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderEntity_setDynamicRenderDrawInfo,3,SWIGTYPE_uint32_t"); 
    
    (arg1)->setDynamicRenderDrawInfo(arg2,arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_setDynamicRenderDrawInfo) 

static bool js_cc_RenderEntity_removeDynamicRenderDrawInfo(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->removeDynamicRenderDrawInfo();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_removeDynamicRenderDrawInfo) 

static bool js_cc_RenderEntity_clearDynamicRenderDrawInfos(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->clearDynamicRenderDrawInfos();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_clearDynamicRenderDrawInfos) 

static bool js_cc_RenderEntity_clearStaticRenderDrawInfos(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->clearStaticRenderDrawInfos();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_clearStaticRenderDrawInfos) 

static bool js_cc_RenderEntity_getIsMask(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)((cc::RenderEntity const *)arg1)->getIsMask();
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_getIsMask) 

static bool js_cc_RenderEntity_getIsSubMask(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)((cc::RenderEntity const *)arg1)->getIsSubMask();
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_getIsSubMask) 

static bool js_cc_RenderEntity_getIsMaskInverted(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)((cc::RenderEntity const *)arg1)->getIsMaskInverted();
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_getIsMaskInverted) 

static bool js_cc_RenderEntity_getUseLocal(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)((cc::RenderEntity const *)arg1)->getUseLocal();
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_getUseLocal) 

static bool js_cc_RenderEntity_setUseLocal(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    bool arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg2);
    SE_PRECONDITION2(ok, false, "RenderEntity_setUseLocal,2,SWIGTYPE_bool"); 
    (arg1)->setUseLocal(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_setUseLocal) 

static bool js_cc_RenderEntity_getRenderTransform(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    cc::Node *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::Node *)((cc::RenderEntity const *)arg1)->getRenderTransform();
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderEntity_getRenderTransform, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_getRenderTransform) 

static bool js_cc_RenderEntity_setRenderTransform(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    cc::Node *arg2 = (cc::Node *) NULL ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderEntity_setRenderTransform,2,SWIGTYPE_p_cc__Node"); 
    (arg1)->setRenderTransform(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_setRenderTransform) 

static bool js_cc_RenderEntity_getStaticRenderDrawInfo(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    uint32_t arg2 ;
    cc::RenderDrawInfo *result = 0 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderEntity_getStaticRenderDrawInfo,2,SWIGTYPE_uint32_t"); 
    
    result = (cc::RenderDrawInfo *)(arg1)->getStaticRenderDrawInfo(arg2);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderEntity_getStaticRenderDrawInfo, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_getStaticRenderDrawInfo) 

static bool js_cc_RenderEntity_getStaticRenderDrawInfos(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    std::array< cc::RenderDrawInfo,4 > *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (std::array< cc::RenderDrawInfo,4 > *) &(arg1)->getStaticRenderDrawInfos();
    // %typemap(out) SWIGTYPE&
    ok &= nativevalue_to_se(*result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderEntity_getStaticRenderDrawInfos, Error processing arguments");
    SE_HOLD_RETURN_VALUE(*result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_getStaticRenderDrawInfos) 

static bool js_cc_RenderEntity_getEntitySharedBufferForJS(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    se::Object *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (se::Object *)((cc::RenderEntity const *)arg1)->getEntitySharedBufferForJS();
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderEntity_getEntitySharedBufferForJS, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_getEntitySharedBufferForJS) 

static bool js_cc_RenderEntity_setColorDirty(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    bool arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg2);
    SE_PRECONDITION2(ok, false, "RenderEntity_setColorDirty,2,SWIGTYPE_bool"); 
    (arg1)->setColorDirty(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_setColorDirty) 

static bool js_cc_RenderEntity_getColorAlpha(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    float result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (float)((cc::RenderEntity const *)arg1)->getColorAlpha();
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_getColorAlpha) 

static bool js_cc_RenderEntity_getLocalOpacity(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    float result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (float)((cc::RenderEntity const *)arg1)->getLocalOpacity();
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_getLocalOpacity) 

static bool js_cc_RenderEntity_getOpacity(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    float result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (float)((cc::RenderEntity const *)arg1)->getOpacity();
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_getOpacity) 

static bool js_cc_RenderEntity_setOpacity(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    float arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg2, nullptr);
    SE_PRECONDITION2(ok, false, "RenderEntity_setOpacity,2,SWIGTYPE_float"); 
    (arg1)->setOpacity(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_setOpacity) 

static bool js_cc_RenderEntity_getRenderDrawInfosSize(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    uint32_t result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = ((cc::RenderEntity const *)arg1)->getRenderDrawInfosSize();
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderEntity_getRenderDrawInfosSize, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_getRenderDrawInfosSize) 

static bool js_cc_RenderEntity_getRenderDrawInfoAt(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    uint32_t arg2 ;
    cc::RenderDrawInfo *result = 0 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderEntity_getRenderDrawInfoAt,2,SWIGTYPE_uint32_t"); 
    
    result = (cc::RenderDrawInfo *)(arg1)->getRenderDrawInfoAt(arg2);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderEntity_getRenderDrawInfoAt, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_RenderEntity_getRenderDrawInfoAt) 

static bool js_cc_RenderEntity_node_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    cc::Node *arg2 = (cc::Node *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderEntity_node_set,2,SWIGTYPE_p_cc__Node"); 
    cc_RenderEntity_node_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_RenderEntity_node_set) 

static bool js_cc_RenderEntity_node_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    cc::Node *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::Node *)cc_RenderEntity_node_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderEntity_node_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_RenderEntity_node_get) 

static bool js_cc_RenderEntity_staticDrawInfoSize_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    uint32_t arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderEntity_staticDrawInfoSize_set,2,SWIGTYPE_uint32_t"); 
    
    cc_RenderEntity_staticDrawInfoSize_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_RenderEntity_staticDrawInfoSize_set) 

static bool js_cc_RenderEntity_staticDrawInfoSize_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    uint32_t result;
    
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = cc_RenderEntity_staticDrawInfoSize_get(arg1);
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderEntity_staticDrawInfoSize_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_RenderEntity_staticDrawInfoSize_get) 

static bool js_cc_RenderEntity_stencilStage_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    uint32_t arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderEntity_stencilStage_set,2,SWIGTYPE_uint32_t"); 
    
    cc_RenderEntity_stencilStage_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_RenderEntity_stencilStage_set) 

static bool js_cc_RenderEntity_stencilStage_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::RenderEntity *arg1 = (cc::RenderEntity *) NULL ;
    uint32_t result;
    
    arg1 = SE_THIS_OBJECT<cc::RenderEntity>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = cc_RenderEntity_stencilStage_get(arg1);
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderEntity_stencilStage_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_RenderEntity_stencilStage_get) 

bool js_register_cc_RenderEntity(se::Object* obj) {
    auto* cls = se::Class::create("RenderEntity", obj, nullptr, _SE(js_new_cc_RenderEntity)); 
    
    cls->defineProperty("node", _SE(js_cc_RenderEntity_node_get), _SE(js_cc_RenderEntity_node_set)); 
    cls->defineProperty("staticDrawInfoSize", _SE(js_cc_RenderEntity_staticDrawInfoSize_get), _SE(js_cc_RenderEntity_staticDrawInfoSize_set)); 
    cls->defineProperty("stencilStage", _SE(js_cc_RenderEntity_stencilStage_get), _SE(js_cc_RenderEntity_stencilStage_set)); 
    
    cls->defineFunction("addDynamicRenderDrawInfo", _SE(js_cc_RenderEntity_addDynamicRenderDrawInfo)); 
    cls->defineFunction("setDynamicRenderDrawInfo", _SE(js_cc_RenderEntity_setDynamicRenderDrawInfo)); 
    cls->defineFunction("removeDynamicRenderDrawInfo", _SE(js_cc_RenderEntity_removeDynamicRenderDrawInfo)); 
    cls->defineFunction("clearDynamicRenderDrawInfos", _SE(js_cc_RenderEntity_clearDynamicRenderDrawInfos)); 
    cls->defineFunction("clearStaticRenderDrawInfos", _SE(js_cc_RenderEntity_clearStaticRenderDrawInfos)); 
    cls->defineFunction("getIsMask", _SE(js_cc_RenderEntity_getIsMask)); 
    cls->defineFunction("getIsSubMask", _SE(js_cc_RenderEntity_getIsSubMask)); 
    cls->defineFunction("getIsMaskInverted", _SE(js_cc_RenderEntity_getIsMaskInverted)); 
    cls->defineFunction("getUseLocal", _SE(js_cc_RenderEntity_getUseLocal)); 
    cls->defineFunction("setUseLocal", _SE(js_cc_RenderEntity_setUseLocal)); 
    cls->defineFunction("getRenderTransform", _SE(js_cc_RenderEntity_getRenderTransform)); 
    cls->defineFunction("setRenderTransform", _SE(js_cc_RenderEntity_setRenderTransform)); 
    cls->defineFunction("getStaticRenderDrawInfo", _SE(js_cc_RenderEntity_getStaticRenderDrawInfo)); 
    cls->defineFunction("getStaticRenderDrawInfos", _SE(js_cc_RenderEntity_getStaticRenderDrawInfos)); 
    cls->defineFunction("getEntitySharedBufferForJS", _SE(js_cc_RenderEntity_getEntitySharedBufferForJS)); 
    cls->defineFunction("setColorDirty", _SE(js_cc_RenderEntity_setColorDirty)); 
    cls->defineFunction("getColorAlpha", _SE(js_cc_RenderEntity_getColorAlpha)); 
    cls->defineFunction("getLocalOpacity", _SE(js_cc_RenderEntity_getLocalOpacity)); 
    cls->defineFunction("getOpacity", _SE(js_cc_RenderEntity_getOpacity)); 
    cls->defineFunction("setOpacity", _SE(js_cc_RenderEntity_setOpacity)); 
    cls->defineFunction("getRenderDrawInfosSize", _SE(js_cc_RenderEntity_getRenderDrawInfosSize)); 
    cls->defineFunction("getRenderDrawInfoAt", _SE(js_cc_RenderEntity_getRenderDrawInfoAt)); 
    
    cls->defineStaticProperty("STATIC_DRAW_INFO_CAPACITY", nullptr, nullptr); 
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_RenderEntity));
    
    
    cls->install();
    JSBClassType::registerClass<cc::RenderEntity>(cls);
    
    __jsb_cc_RenderEntity_proto = cls->getProto();
    __jsb_cc_RenderEntity_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_UIModelProxy_class = nullptr;
se::Object* __jsb_cc_UIModelProxy_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_UIModelProxy) 

// js_ctor
static bool js_new_cc_UIModelProxy(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::UIModelProxy *result;
    result = (cc::UIModelProxy *)new cc::UIModelProxy();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_UIModelProxy, __jsb_cc_UIModelProxy_class, js_delete_cc_UIModelProxy)

static bool js_delete_cc_UIModelProxy(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_UIModelProxy) 

static bool js_cc_UIModelProxy_initModel(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::UIModelProxy *arg1 = (cc::UIModelProxy *) NULL ;
    cc::Node *arg2 = (cc::Node *) NULL ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::UIModelProxy>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "UIModelProxy_initModel,2,SWIGTYPE_p_cc__Node"); 
    (arg1)->initModel(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_UIModelProxy_initModel) 

static bool js_cc_UIModelProxy_activeSubModels(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::UIModelProxy *arg1 = (cc::UIModelProxy *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::UIModelProxy>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->activeSubModels();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_UIModelProxy_activeSubModels) 

static bool js_cc_UIModelProxy_uploadData(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::UIModelProxy *arg1 = (cc::UIModelProxy *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::UIModelProxy>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->uploadData();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_UIModelProxy_uploadData) 

static bool js_cc_UIModelProxy_destroy(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::UIModelProxy *arg1 = (cc::UIModelProxy *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::UIModelProxy>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->destroy();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_UIModelProxy_destroy) 

static bool js_cc_UIModelProxy_clear(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::UIModelProxy *arg1 = (cc::UIModelProxy *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::UIModelProxy>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->clear();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_UIModelProxy_clear) 

static bool js_cc_UIModelProxy_getModel(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::UIModelProxy *arg1 = (cc::UIModelProxy *) NULL ;
    cc::scene::Model *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::UIModelProxy>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::scene::Model *)((cc::UIModelProxy const *)arg1)->getModel();
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "UIModelProxy_getModel, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_UIModelProxy_getModel) 

static bool js_cc_UIModelProxy_updateModels(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::UIModelProxy *arg1 = (cc::UIModelProxy *) NULL ;
    cc::scene::Model *arg2 = (cc::scene::Model *) NULL ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::UIModelProxy>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "UIModelProxy_updateModels,2,SWIGTYPE_p_cc__scene__Model"); 
    (arg1)->updateModels(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_UIModelProxy_updateModels) 

static bool js_cc_UIModelProxy_attachDrawInfo(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::UIModelProxy *arg1 = (cc::UIModelProxy *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::UIModelProxy>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->attachDrawInfo();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_UIModelProxy_attachDrawInfo) 

static bool js_cc_UIModelProxy_attachNode(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::UIModelProxy *arg1 = (cc::UIModelProxy *) NULL ;
    cc::Node *arg2 = (cc::Node *) NULL ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::UIModelProxy>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "UIModelProxy_attachNode,2,SWIGTYPE_p_cc__Node"); 
    (arg1)->attachNode(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_UIModelProxy_attachNode) 

bool js_register_cc_UIModelProxy(se::Object* obj) {
    auto* cls = se::Class::create("UIModelProxy", obj, nullptr, _SE(js_new_cc_UIModelProxy)); 
    
    
    cls->defineFunction("initModel", _SE(js_cc_UIModelProxy_initModel)); 
    cls->defineFunction("activeSubModels", _SE(js_cc_UIModelProxy_activeSubModels)); 
    cls->defineFunction("uploadData", _SE(js_cc_UIModelProxy_uploadData)); 
    cls->defineFunction("destroy", _SE(js_cc_UIModelProxy_destroy)); 
    cls->defineFunction("clear", _SE(js_cc_UIModelProxy_clear)); 
    cls->defineFunction("getModel", _SE(js_cc_UIModelProxy_getModel)); 
    cls->defineFunction("updateModels", _SE(js_cc_UIModelProxy_updateModels)); 
    cls->defineFunction("attachDrawInfo", _SE(js_cc_UIModelProxy_attachDrawInfo)); 
    cls->defineFunction("attachNode", _SE(js_cc_UIModelProxy_attachNode)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_UIModelProxy));
    
    
    cls->install();
    JSBClassType::registerClass<cc::UIModelProxy>(cls);
    
    __jsb_cc_UIModelProxy_proto = cls->getProto();
    __jsb_cc_UIModelProxy_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_Batcher2d_class = nullptr;
se::Object* __jsb_cc_Batcher2d_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_Batcher2d) 

static bool js_new_cc_Batcher2d__SWIG_0(se::State& s) // NOLINT(readability-identifier-naming)
{
    // js_overloaded_ctor
    const auto& args = s.args();
    CC_UNUSED bool ok = true;
    cc::Batcher2d *result;
    result = (cc::Batcher2d *)new cc::Batcher2d();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}


static bool js_new_cc_Batcher2d__SWIG_1(se::State& s) // NOLINT(readability-identifier-naming)
{
    // js_overloaded_ctor
    const auto& args = s.args();
    CC_UNUSED bool ok = true;
    cc::Root *arg1 = (cc::Root *) NULL ;
    cc::Batcher2d *result;
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg1, s.thisObject());
    SE_PRECONDITION2(ok, false, "new_Batcher2d,1,SWIGTYPE_p_cc__Root"); 
    result = (cc::Batcher2d *)new cc::Batcher2d(arg1);
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}


static bool js_new_Batcher2d(se::State& s) // NOLINT(readability-identifier-naming)
{
    // js_ctor_dispatcher
    size_t argc = s.args().size();
    bool ret = false;
    
    // switch all cases by means of series of if-returns.
    
    // js_ctor_dispatch_case
    if(argc == 0) {
        ret = js_new_cc_Batcher2d__SWIG_0(s);
        if (ret) {
            return ret; 
        } /* reset exception and return */
    }
    
    // js_ctor_dispatch_case
    if(argc == 1) {
        ret = js_new_cc_Batcher2d__SWIG_1(s);
        if (ret) {
            return ret; 
        } /* reset exception and return */
    }
    
    
    // default:
    SE_REPORT_ERROR("Illegal arguments for construction of Batcher2d");
    return false;
}
SE_BIND_CTOR(js_new_Batcher2d, __jsb_cc_Batcher2d_class, js_delete_cc_Batcher2d)

static bool js_delete_cc_Batcher2d(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_Batcher2d) 

static bool js_cc_Batcher2d_syncMeshBuffersToNative(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::Batcher2d *arg1 = (cc::Batcher2d *) NULL ;
    uint16_t arg2 ;
    ccstd::vector< cc::UIMeshBuffer * > *arg3 = 0 ;
    ccstd::vector< cc::UIMeshBuffer * > temp3 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::Batcher2d>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Batcher2d_syncMeshBuffersToNative,2,SWIGTYPE_uint16_t"); 
    
    // %typemap(in) SWIGTYPE&&
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Batcher2d_syncMeshBuffersToNative,3,SWIGTYPE_p_ccstd__vectorT_cc__UIMeshBuffer_p_t");
    arg3 = &temp3;
    
    (arg1)->syncMeshBuffersToNative(arg2,(ccstd::vector< cc::UIMeshBuffer * > &&)*arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_Batcher2d_syncMeshBuffersToNative) 

static bool js_cc_Batcher2d_initialize(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::Batcher2d *arg1 = (cc::Batcher2d *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::Batcher2d>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)(arg1)->initialize();
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_Batcher2d_initialize) 

static bool js_cc_Batcher2d_update(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::Batcher2d *arg1 = (cc::Batcher2d *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::Batcher2d>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->update();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_Batcher2d_update) 

static bool js_cc_Batcher2d_uploadBuffers(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::Batcher2d *arg1 = (cc::Batcher2d *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::Batcher2d>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->uploadBuffers();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_Batcher2d_uploadBuffers) 

static bool js_cc_Batcher2d_reset(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::Batcher2d *arg1 = (cc::Batcher2d *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::Batcher2d>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->reset();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_Batcher2d_reset) 

static bool js_cc_Batcher2d_syncRootNodesToNative(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::Batcher2d *arg1 = (cc::Batcher2d *) NULL ;
    ccstd::vector< cc::Node * > *arg2 = 0 ;
    ccstd::vector< cc::Node * > temp2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::Batcher2d>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Batcher2d_syncRootNodesToNative,2,SWIGTYPE_p_ccstd__vectorT_cc__Node_p_t");
    arg2 = &temp2;
    
    (arg1)->syncRootNodesToNative((ccstd::vector< cc::Node * > &&)*arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_Batcher2d_syncRootNodesToNative) 

static bool js_cc_Batcher2d_releaseDescriptorSetCache(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::Batcher2d *arg1 = (cc::Batcher2d *) NULL ;
    cc::gfx::Texture *arg2 = (cc::gfx::Texture *) NULL ;
    cc::gfx::Sampler *arg3 = (cc::gfx::Sampler *) NULL ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::Batcher2d>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Batcher2d_releaseDescriptorSetCache,2,SWIGTYPE_p_cc__gfx__Texture"); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Batcher2d_releaseDescriptorSetCache,3,SWIGTYPE_p_cc__gfx__Sampler"); 
    (arg1)->releaseDescriptorSetCache(arg2,arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_Batcher2d_releaseDescriptorSetCache) 

static bool js_cc_Batcher2d_getDefaultAttribute(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::Batcher2d *arg1 = (cc::Batcher2d *) NULL ;
    ccstd::vector< cc::gfx::Attribute > *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::Batcher2d>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (ccstd::vector< cc::gfx::Attribute > *)(arg1)->getDefaultAttribute();
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Batcher2d_getDefaultAttribute, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_Batcher2d_getDefaultAttribute) 

static bool js_cc_Batcher2d_handlePostRender(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::Batcher2d *arg1 = (cc::Batcher2d *) NULL ;
    cc::RenderEntity *arg2 = (cc::RenderEntity *) NULL ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::Batcher2d>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Batcher2d_handlePostRender,2,SWIGTYPE_p_cc__RenderEntity"); 
    (arg1)->handlePostRender(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_Batcher2d_handlePostRender) 

bool js_register_cc_Batcher2d(se::Object* obj) {
    auto* cls = se::Class::create("Batcher2d", obj, nullptr, _SE(js_new_Batcher2d)); 
    
    
    cls->defineFunction("syncMeshBuffersToNative", _SE(js_cc_Batcher2d_syncMeshBuffersToNative)); 
    cls->defineFunction("initialize", _SE(js_cc_Batcher2d_initialize)); 
    cls->defineFunction("update", _SE(js_cc_Batcher2d_update)); 
    cls->defineFunction("uploadBuffers", _SE(js_cc_Batcher2d_uploadBuffers)); 
    cls->defineFunction("reset", _SE(js_cc_Batcher2d_reset)); 
    cls->defineFunction("syncRootNodesToNative", _SE(js_cc_Batcher2d_syncRootNodesToNative)); 
    cls->defineFunction("releaseDescriptorSetCache", _SE(js_cc_Batcher2d_releaseDescriptorSetCache)); 
    cls->defineFunction("getDefaultAttribute", _SE(js_cc_Batcher2d_getDefaultAttribute)); 
    cls->defineFunction("handlePostRender", _SE(js_cc_Batcher2d_handlePostRender)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_Batcher2d));
    
    
    cls->install();
    JSBClassType::registerClass<cc::Batcher2d>(cls);
    
    __jsb_cc_Batcher2d_proto = cls->getProto();
    __jsb_cc_Batcher2d_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}




bool register_all_native2d(se::Object* obj) {
    // Get the ns
    se::Value nsVal;
    if (!obj->getProperty("n2d", &nsVal, true))
    {
        se::HandleObject jsobj(se::Object::createPlainObject());
        nsVal.setObject(jsobj);
        obj->setProperty("n2d", nsVal);
    }
    se::Object* ns = nsVal.toObject();
    /* Register classes */
    js_register_cc_MeshBufferLayout(ns); 
    js_register_cc_UIMeshBuffer(ns); 
    js_register_cc_Render2dLayout(ns); 
    js_register_cc_LocalDSBF(ns); 
    js_register_cc_RenderDrawInfo(ns); 
    js_register_cc_EntityAttrLayout(ns); 
    js_register_cc_RenderEntity(ns); 
    js_register_cc_UIModelProxy(ns); 
    js_register_cc_Batcher2d(ns); 
    
    /* Register global variables & global functions */
    
    
    
    return true;
}


#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif
// clang-format on
