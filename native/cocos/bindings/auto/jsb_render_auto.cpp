// clang-format off

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/****************************************************************************
 Copyright (c) 2022 Xiamen Yaji Software Co., Ltd.

 http://www.cocos.com

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
 worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
 not use Cocos Creator software for developing other software or tools that's
 used for developing games. You are not granted to publish, distribute,
 sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
****************************************************************************/

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-variable"
#elif defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-variable"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable : 4101)
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static 
#endif



#include <stdio.h>


#include "bindings/jswrapper/SeApi.h"
#include "bindings/manual/jsb_conversions.h"
#include "bindings/manual/jsb_global.h"


#include "bindings/auto/jsb_render_auto.h"
#include "bindings/auto/jsb_scene_auto.h"
#include "bindings/auto/jsb_gfx_auto.h"
#include "bindings/auto/jsb_assets_auto.h"
#include "renderer/pipeline/GeometryRenderer.h"
#include "renderer/pipeline/GlobalDescriptorSetManager.h"
#include "renderer/pipeline/custom/RenderCommonJsb.h"

using namespace cc;
using namespace cc::render;


#define cc_render_PipelineRuntime_device_get(self_) self_->getDevice()
  

#define cc_render_PipelineRuntime_globalDSManager_get(self_) self_->getGlobalDSManager()
  

#define cc_render_PipelineRuntime_descriptorSetLayout_get(self_) self_->getDescriptorSetLayout()
  

#define cc_render_PipelineRuntime_descriptorSet_get(self_) self_->getDescriptorSet()
  

#define cc_render_PipelineRuntime_commandBuffers_get(self_) self_->getCommandBuffers()
  

#define cc_render_PipelineRuntime_pipelineSceneData_get(self_) self_->getPipelineSceneData()
  

#define cc_render_PipelineRuntime_constantMacros_get(self_) self_->getConstantMacros()
  

#define cc_render_PipelineRuntime_profiler_get(self_) self_->getProfiler()
#define cc_render_PipelineRuntime_profiler_set(self_, val_) self_->setProfiler(val_)
  

#define cc_render_PipelineRuntime_geometryRenderer_get(self_) self_->getGeometryRenderer()
  

#define cc_render_PipelineRuntime_shadingScale_get(self_) self_->getShadingScale()
#define cc_render_PipelineRuntime_shadingScale_set(self_, val_) self_->setShadingScale(val_)
  

#define cc_render_RenderNode_name_get(self_) self_->getName()
#define cc_render_RenderNode_name_set(self_, val_) self_->setName(val_)
  

#define cc_render_SceneVisitor_pipelineSceneData_get(self_) self_->getPipelineSceneData()
  

#define cc_render_SceneTask_taskType_get(self_) self_->getTaskType()
  

#define cc_render_Pipeline_layoutGraphBuilder_get(self_) self_->getLayoutGraphBuilder()
  


se::Class* __jsb_cc_render_PipelineRuntime_class = nullptr;
se::Object* __jsb_cc_render_PipelineRuntime_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_render_PipelineRuntime) 

static bool js_delete_cc_render_PipelineRuntime(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_render_PipelineRuntime) 

static bool js_cc_render_PipelineRuntime_activate(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    gfx::Swapchain *arg2 = (gfx::Swapchain *) NULL ;
    bool result;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "PipelineRuntime_activate,2,SWIGTYPE_p_gfx__Swapchain"); 
    result = (bool)(arg1)->activate(arg2);
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_PipelineRuntime_activate) 

static bool js_cc_render_PipelineRuntime_destroy(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)(arg1)->destroy();
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_PipelineRuntime_destroy) 

static bool js_cc_render_PipelineRuntime_render(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    ccstd::vector< cc::scene::Camera * > *arg2 = 0 ;
    ccstd::vector< cc::scene::Camera * > temp2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "PipelineRuntime_render,2,SWIGTYPE_p_ccstd__vectorT_cc__scene__Camera_p_t");
    arg2 = &temp2;
    
    (arg1)->render((ccstd::vector< cc::scene::Camera * > const &)*arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_PipelineRuntime_render) 

static bool js_cc_render_PipelineRuntime_getMacroString(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    ccstd::string *arg2 = 0 ;
    ccstd::string temp2 ;
    ccstd::string *result = 0 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "PipelineRuntime_getMacroString,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    result = (ccstd::string *) &((cc::render::PipelineRuntime const *)arg1)->getMacroString((ccstd::string const &)*arg2);
    // %typemap(out) SWIGTYPE&
    ok &= nativevalue_to_se(*result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "PipelineRuntime_getMacroString, Error processing arguments");
    SE_HOLD_RETURN_VALUE(*result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_PipelineRuntime_getMacroString) 

static bool js_cc_render_PipelineRuntime_getMacroInt(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    ccstd::string *arg2 = 0 ;
    ccstd::string temp2 ;
    int32_t result;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "PipelineRuntime_getMacroInt,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    result = ((cc::render::PipelineRuntime const *)arg1)->getMacroInt((ccstd::string const &)*arg2);
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "PipelineRuntime_getMacroInt, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_PipelineRuntime_getMacroInt) 

static bool js_cc_render_PipelineRuntime_getMacroBool(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    ccstd::string *arg2 = 0 ;
    ccstd::string temp2 ;
    bool result;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "PipelineRuntime_getMacroBool,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    result = (bool)((cc::render::PipelineRuntime const *)arg1)->getMacroBool((ccstd::string const &)*arg2);
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_PipelineRuntime_getMacroBool) 

static bool js_cc_render_PipelineRuntime_setMacroString(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    ccstd::string *arg2 = 0 ;
    ccstd::string *arg3 = 0 ;
    ccstd::string temp2 ;
    ccstd::string temp3 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "PipelineRuntime_setMacroString,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "PipelineRuntime_setMacroString,3,SWIGTYPE_p_ccstd__string");
    arg3 = &temp3;
    
    (arg1)->setMacroString((ccstd::string const &)*arg2,(ccstd::string const &)*arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_PipelineRuntime_setMacroString) 

static bool js_cc_render_PipelineRuntime_setMacroInt(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    ccstd::string *arg2 = 0 ;
    int32_t arg3 ;
    ccstd::string temp2 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "PipelineRuntime_setMacroInt,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "PipelineRuntime_setMacroInt,3,SWIGTYPE_int32_t"); 
    
    (arg1)->setMacroInt((ccstd::string const &)*arg2,arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_PipelineRuntime_setMacroInt) 

static bool js_cc_render_PipelineRuntime_setMacroBool(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    ccstd::string *arg2 = 0 ;
    bool arg3 ;
    ccstd::string temp2 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "PipelineRuntime_setMacroBool,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    // %typemap(in) bool
    ok &= sevalue_to_native(args[1], &arg3);
    SE_PRECONDITION2(ok, false, "PipelineRuntime_setMacroBool,3,SWIGTYPE_bool"); 
    (arg1)->setMacroBool((ccstd::string const &)*arg2,arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_PipelineRuntime_setMacroBool) 

static bool js_cc_render_PipelineRuntime_onGlobalPipelineStateChanged(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->onGlobalPipelineStateChanged();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_PipelineRuntime_onGlobalPipelineStateChanged) 

static bool js_cc_render_PipelineRuntime_device_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    cc::gfx::Device *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::gfx::Device *)cc_render_PipelineRuntime_device_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "PipelineRuntime_device_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_render_PipelineRuntime_device_get) 

static bool js_cc_render_PipelineRuntime_globalDSManager_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    cc::pipeline::GlobalDSManager *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::pipeline::GlobalDSManager *)cc_render_PipelineRuntime_globalDSManager_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "PipelineRuntime_globalDSManager_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_render_PipelineRuntime_globalDSManager_get) 

static bool js_cc_render_PipelineRuntime_descriptorSetLayout_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    cc::gfx::DescriptorSetLayout *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::gfx::DescriptorSetLayout *)cc_render_PipelineRuntime_descriptorSetLayout_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "PipelineRuntime_descriptorSetLayout_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_render_PipelineRuntime_descriptorSetLayout_get) 

static bool js_cc_render_PipelineRuntime_descriptorSet_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    cc::gfx::DescriptorSet *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::gfx::DescriptorSet *)cc_render_PipelineRuntime_descriptorSet_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "PipelineRuntime_descriptorSet_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_render_PipelineRuntime_descriptorSet_get) 

static bool js_cc_render_PipelineRuntime_commandBuffers_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    ccstd::vector< cc::gfx::CommandBuffer * > *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (ccstd::vector< cc::gfx::CommandBuffer * > *) &cc_render_PipelineRuntime_commandBuffers_get(arg1);
    // %typemap(out) SWIGTYPE&
    ok &= nativevalue_to_se(*result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "PipelineRuntime_commandBuffers_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(*result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_render_PipelineRuntime_commandBuffers_get) 

static bool js_cc_render_PipelineRuntime_pipelineSceneData_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    cc::pipeline::PipelineSceneData *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::pipeline::PipelineSceneData *)cc_render_PipelineRuntime_pipelineSceneData_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "PipelineRuntime_pipelineSceneData_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_render_PipelineRuntime_pipelineSceneData_get) 

static bool js_cc_render_PipelineRuntime_constantMacros_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    ccstd::string *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (ccstd::string *) &cc_render_PipelineRuntime_constantMacros_get(arg1);
    // %typemap(out) SWIGTYPE&
    ok &= nativevalue_to_se(*result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "PipelineRuntime_constantMacros_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(*result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_render_PipelineRuntime_constantMacros_get) 

static bool js_cc_render_PipelineRuntime_profiler_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    cc::scene::Model *arg2 = (cc::scene::Model *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "PipelineRuntime_profiler_set,2,SWIGTYPE_p_cc__scene__Model"); 
    cc_render_PipelineRuntime_profiler_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_render_PipelineRuntime_profiler_set) 

static bool js_cc_render_PipelineRuntime_profiler_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    cc::scene::Model *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::scene::Model *)cc_render_PipelineRuntime_profiler_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "PipelineRuntime_profiler_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_render_PipelineRuntime_profiler_get) 

static bool js_cc_render_PipelineRuntime_geometryRenderer_get(se::State& s)
{
#if CC_USE_GEOMETRY_RENDERER
    
    CC_UNUSED bool ok = true;
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    cc::pipeline::GeometryRenderer *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::pipeline::GeometryRenderer *)cc_render_PipelineRuntime_geometryRenderer_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "PipelineRuntime_geometryRenderer_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
#endif // CC_USE_GEOMETRY_RENDERER
    
    return true;
}
SE_BIND_PROP_GET(js_cc_render_PipelineRuntime_geometryRenderer_get) 

static bool js_cc_render_PipelineRuntime_shadingScale_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    float arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg2, nullptr);
    SE_PRECONDITION2(ok, false, "PipelineRuntime_shadingScale_set,2,SWIGTYPE_float"); 
    cc_render_PipelineRuntime_shadingScale_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_render_PipelineRuntime_shadingScale_set) 

static bool js_cc_render_PipelineRuntime_shadingScale_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::render::PipelineRuntime *arg1 = (cc::render::PipelineRuntime *) NULL ;
    float result;
    
    arg1 = SE_THIS_OBJECT<cc::render::PipelineRuntime>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (float)cc_render_PipelineRuntime_shadingScale_get(arg1);
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_render_PipelineRuntime_shadingScale_get) 

bool js_register_cc_render_PipelineRuntime(se::Object* obj) {
    auto* cls = se::Class::create("PipelineRuntime", obj, nullptr, nullptr); 
    
    cls->defineProperty("device", _SE(js_cc_render_PipelineRuntime_device_get), nullptr); 
    cls->defineProperty("globalDSManager", _SE(js_cc_render_PipelineRuntime_globalDSManager_get), nullptr); 
    cls->defineProperty("descriptorSetLayout", _SE(js_cc_render_PipelineRuntime_descriptorSetLayout_get), nullptr); 
    cls->defineProperty("descriptorSet", _SE(js_cc_render_PipelineRuntime_descriptorSet_get), nullptr); 
    cls->defineProperty("commandBuffers", _SE(js_cc_render_PipelineRuntime_commandBuffers_get), nullptr); 
    cls->defineProperty("pipelineSceneData", _SE(js_cc_render_PipelineRuntime_pipelineSceneData_get), nullptr); 
    cls->defineProperty("constantMacros", _SE(js_cc_render_PipelineRuntime_constantMacros_get), nullptr); 
    cls->defineProperty("profiler", _SE(js_cc_render_PipelineRuntime_profiler_get), _SE(js_cc_render_PipelineRuntime_profiler_set)); 
    cls->defineProperty("geometryRenderer", _SE(js_cc_render_PipelineRuntime_geometryRenderer_get), nullptr); 
    cls->defineProperty("shadingScale", _SE(js_cc_render_PipelineRuntime_shadingScale_get), _SE(js_cc_render_PipelineRuntime_shadingScale_set)); 
    
    cls->defineFunction("activate", _SE(js_cc_render_PipelineRuntime_activate)); 
    cls->defineFunction("destroy", _SE(js_cc_render_PipelineRuntime_destroy)); 
    cls->defineFunction("render", _SE(js_cc_render_PipelineRuntime_render)); 
    cls->defineFunction("getMacroString", _SE(js_cc_render_PipelineRuntime_getMacroString)); 
    cls->defineFunction("getMacroInt", _SE(js_cc_render_PipelineRuntime_getMacroInt)); 
    cls->defineFunction("getMacroBool", _SE(js_cc_render_PipelineRuntime_getMacroBool)); 
    cls->defineFunction("setMacroString", _SE(js_cc_render_PipelineRuntime_setMacroString)); 
    cls->defineFunction("setMacroInt", _SE(js_cc_render_PipelineRuntime_setMacroInt)); 
    cls->defineFunction("setMacroBool", _SE(js_cc_render_PipelineRuntime_setMacroBool)); 
    cls->defineFunction("onGlobalPipelineStateChanged", _SE(js_cc_render_PipelineRuntime_onGlobalPipelineStateChanged)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_render_PipelineRuntime));
    
    
    cls->install();
    JSBClassType::registerClass<cc::render::PipelineRuntime>(cls);
    
    __jsb_cc_render_PipelineRuntime_proto = cls->getProto();
    __jsb_cc_render_PipelineRuntime_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_render_RenderNode_class = nullptr;
se::Object* __jsb_cc_render_RenderNode_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_render_RenderNode) 

static bool js_delete_cc_render_RenderNode(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_render_RenderNode) 

static bool js_cc_render_RenderNode_name_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::RenderNode *arg1 = (cc::render::RenderNode *) NULL ;
    ccstd::string arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::RenderNode>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RenderNode_name_set,2,SWIGTYPE_ccstd__string"); 
    
    cc_render_RenderNode_name_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_render_RenderNode_name_set) 

static bool js_cc_render_RenderNode_name_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::render::RenderNode *arg1 = (cc::render::RenderNode *) NULL ;
    ccstd::string result;
    
    arg1 = SE_THIS_OBJECT<cc::render::RenderNode>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = cc_render_RenderNode_name_get(arg1);
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RenderNode_name_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_render_RenderNode_name_get) 

bool js_register_cc_render_RenderNode(se::Object* obj) {
    auto* cls = se::Class::create("RenderNode", obj, nullptr, nullptr); 
    
    cls->defineProperty("name", _SE(js_cc_render_RenderNode_name_get), _SE(js_cc_render_RenderNode_name_set)); 
    
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_render_RenderNode));
    
    
    cls->install();
    JSBClassType::registerClass<cc::render::RenderNode>(cls);
    
    __jsb_cc_render_RenderNode_proto = cls->getProto();
    __jsb_cc_render_RenderNode_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_render_Setter_class = nullptr;
se::Object* __jsb_cc_render_Setter_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_render_Setter) 

static bool js_cc_render_Setter_setMat4(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Setter *arg1 = (cc::render::Setter *) NULL ;
    ccstd::string *arg2 = 0 ;
    cc::Mat4 *arg3 = 0 ;
    ccstd::string temp2 ;
    cc::Mat4 temp3 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Setter>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setMat4,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setMat4,3,SWIGTYPE_p_cc__Mat4");
    arg3 = &temp3;
    
    (arg1)->setMat4((ccstd::string const &)*arg2,(cc::Mat4 const &)*arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Setter_setMat4) 

static bool js_cc_render_Setter_setQuaternion(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Setter *arg1 = (cc::render::Setter *) NULL ;
    ccstd::string *arg2 = 0 ;
    cc::Quaternion *arg3 = 0 ;
    ccstd::string temp2 ;
    cc::Quaternion temp3 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Setter>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setQuaternion,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setQuaternion,3,SWIGTYPE_p_cc__Quaternion");
    arg3 = &temp3;
    
    (arg1)->setQuaternion((ccstd::string const &)*arg2,(cc::Quaternion const &)*arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Setter_setQuaternion) 

static bool js_cc_render_Setter_setColor(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Setter *arg1 = (cc::render::Setter *) NULL ;
    ccstd::string *arg2 = 0 ;
    gfx::Color *arg3 = 0 ;
    ccstd::string temp2 ;
    gfx::Color temp3 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Setter>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setColor,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setColor,3,SWIGTYPE_p_gfx__Color");
    arg3 = &temp3;
    
    (arg1)->setColor((ccstd::string const &)*arg2,(gfx::Color const &)*arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Setter_setColor) 

static bool js_cc_render_Setter_setVec4(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Setter *arg1 = (cc::render::Setter *) NULL ;
    ccstd::string *arg2 = 0 ;
    cc::Vec4 *arg3 = 0 ;
    ccstd::string temp2 ;
    cc::Vec4 temp3 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Setter>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setVec4,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setVec4,3,SWIGTYPE_p_cc__Vec4");
    arg3 = &temp3;
    
    (arg1)->setVec4((ccstd::string const &)*arg2,(cc::Vec4 const &)*arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Setter_setVec4) 

static bool js_cc_render_Setter_setVec2(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Setter *arg1 = (cc::render::Setter *) NULL ;
    ccstd::string *arg2 = 0 ;
    cc::Vec2 *arg3 = 0 ;
    ccstd::string temp2 ;
    cc::Vec2 temp3 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Setter>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setVec2,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setVec2,3,SWIGTYPE_p_cc__Vec2");
    arg3 = &temp3;
    
    (arg1)->setVec2((ccstd::string const &)*arg2,(cc::Vec2 const &)*arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Setter_setVec2) 

static bool js_cc_render_Setter_setFloat(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Setter *arg1 = (cc::render::Setter *) NULL ;
    ccstd::string *arg2 = 0 ;
    float arg3 ;
    ccstd::string temp2 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Setter>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setFloat,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[1], &arg3, nullptr);
    SE_PRECONDITION2(ok, false, "Setter_setFloat,3,SWIGTYPE_float"); 
    (arg1)->setFloat((ccstd::string const &)*arg2,arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Setter_setFloat) 

static bool js_cc_render_Setter_setBuffer(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Setter *arg1 = (cc::render::Setter *) NULL ;
    ccstd::string *arg2 = 0 ;
    gfx::Buffer *arg3 = (gfx::Buffer *) NULL ;
    ccstd::string temp2 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Setter>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setBuffer,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setBuffer,3,SWIGTYPE_p_gfx__Buffer"); 
    (arg1)->setBuffer((ccstd::string const &)*arg2,arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Setter_setBuffer) 

static bool js_cc_render_Setter_setTexture(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Setter *arg1 = (cc::render::Setter *) NULL ;
    ccstd::string *arg2 = 0 ;
    gfx::Texture *arg3 = (gfx::Texture *) NULL ;
    ccstd::string temp2 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Setter>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setTexture,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setTexture,3,SWIGTYPE_p_gfx__Texture"); 
    (arg1)->setTexture((ccstd::string const &)*arg2,arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Setter_setTexture) 

static bool js_cc_render_Setter_setReadWriteBuffer(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Setter *arg1 = (cc::render::Setter *) NULL ;
    ccstd::string *arg2 = 0 ;
    gfx::Buffer *arg3 = (gfx::Buffer *) NULL ;
    ccstd::string temp2 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Setter>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setReadWriteBuffer,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setReadWriteBuffer,3,SWIGTYPE_p_gfx__Buffer"); 
    (arg1)->setReadWriteBuffer((ccstd::string const &)*arg2,arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Setter_setReadWriteBuffer) 

static bool js_cc_render_Setter_setReadWriteTexture(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Setter *arg1 = (cc::render::Setter *) NULL ;
    ccstd::string *arg2 = 0 ;
    gfx::Texture *arg3 = (gfx::Texture *) NULL ;
    ccstd::string temp2 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Setter>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setReadWriteTexture,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setReadWriteTexture,3,SWIGTYPE_p_gfx__Texture"); 
    (arg1)->setReadWriteTexture((ccstd::string const &)*arg2,arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Setter_setReadWriteTexture) 

static bool js_cc_render_Setter_setSampler(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Setter *arg1 = (cc::render::Setter *) NULL ;
    ccstd::string *arg2 = 0 ;
    gfx::Sampler *arg3 = (gfx::Sampler *) NULL ;
    ccstd::string temp2 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Setter>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setSampler,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Setter_setSampler,3,SWIGTYPE_p_gfx__Sampler"); 
    (arg1)->setSampler((ccstd::string const &)*arg2,arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Setter_setSampler) 

static bool js_delete_cc_render_Setter(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_render_Setter) 

bool js_register_cc_render_Setter(se::Object* obj) {
    auto* cls = se::Class::create("Setter", obj, __jsb_cc_render_RenderNode_proto, nullptr); 
    
    
    cls->defineFunction("setMat4", _SE(js_cc_render_Setter_setMat4)); 
    cls->defineFunction("setQuaternion", _SE(js_cc_render_Setter_setQuaternion)); 
    cls->defineFunction("setColor", _SE(js_cc_render_Setter_setColor)); 
    cls->defineFunction("setVec4", _SE(js_cc_render_Setter_setVec4)); 
    cls->defineFunction("setVec2", _SE(js_cc_render_Setter_setVec2)); 
    cls->defineFunction("setFloat", _SE(js_cc_render_Setter_setFloat)); 
    cls->defineFunction("setBuffer", _SE(js_cc_render_Setter_setBuffer)); 
    cls->defineFunction("setTexture", _SE(js_cc_render_Setter_setTexture)); 
    cls->defineFunction("setReadWriteBuffer", _SE(js_cc_render_Setter_setReadWriteBuffer)); 
    cls->defineFunction("setReadWriteTexture", _SE(js_cc_render_Setter_setReadWriteTexture)); 
    cls->defineFunction("setSampler", _SE(js_cc_render_Setter_setSampler)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_render_Setter));
    
    
    cls->install();
    JSBClassType::registerClass<cc::render::Setter>(cls);
    
    __jsb_cc_render_Setter_proto = cls->getProto();
    __jsb_cc_render_Setter_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_render_RasterQueueBuilder_class = nullptr;
se::Object* __jsb_cc_render_RasterQueueBuilder_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_render_RasterQueueBuilder) 

static bool js_cc_render_RasterQueueBuilder_addSceneOfCamera__SWIG_0(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::render::RasterQueueBuilder *arg1 = (cc::render::RasterQueueBuilder *) NULL ;
    cc::scene::Camera *arg2 = (cc::scene::Camera *) NULL ;
    LightInfo arg3 ;
    SceneFlags arg4 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::RasterQueueBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addSceneOfCamera,2,SWIGTYPE_p_cc__scene__Camera"); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addSceneOfCamera,3,SWIGTYPE_LightInfo"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[2], &arg4, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addSceneOfCamera,4,SWIGTYPE_SceneFlags"); 
    
    (arg1)->addSceneOfCamera(arg2,arg3,arg4);
    
    
    return true;
}

static bool js_cc_render_RasterQueueBuilder_addScene__SWIG_0(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::render::RasterQueueBuilder *arg1 = (cc::render::RasterQueueBuilder *) NULL ;
    ccstd::string *arg2 = 0 ;
    SceneFlags arg3 ;
    ccstd::string temp2 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::RasterQueueBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addScene,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addScene,3,SWIGTYPE_SceneFlags"); 
    
    (arg1)->addScene((ccstd::string const &)*arg2,arg3);
    
    
    return true;
}

static bool js_cc_render_RasterQueueBuilder_addFullscreenQuad__SWIG_0(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::render::RasterQueueBuilder *arg1 = (cc::render::RasterQueueBuilder *) NULL ;
    Material *arg2 = (Material *) NULL ;
    uint32_t arg3 ;
    SceneFlags arg4 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::RasterQueueBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addFullscreenQuad,2,SWIGTYPE_p_Material"); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addFullscreenQuad,3,SWIGTYPE_uint32_t"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[2], &arg4, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addFullscreenQuad,4,SWIGTYPE_SceneFlags"); 
    
    (arg1)->addFullscreenQuad(arg2,arg3,arg4);
    
    
    return true;
}

static bool js_cc_render_RasterQueueBuilder_addCameraQuad__SWIG_0(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::render::RasterQueueBuilder *arg1 = (cc::render::RasterQueueBuilder *) NULL ;
    cc::scene::Camera *arg2 = (cc::scene::Camera *) NULL ;
    Material *arg3 = (Material *) NULL ;
    uint32_t arg4 ;
    SceneFlags arg5 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::RasterQueueBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addCameraQuad,2,SWIGTYPE_p_cc__scene__Camera"); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addCameraQuad,3,SWIGTYPE_p_Material"); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[2], &arg4, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addCameraQuad,4,SWIGTYPE_uint32_t"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[3], &arg5, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addCameraQuad,5,SWIGTYPE_SceneFlags"); 
    
    (arg1)->addCameraQuad(arg2,arg3,arg4,arg5);
    
    
    return true;
}

static bool js_cc_render_RasterQueueBuilder_clearRenderTarget__SWIG_0(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::render::RasterQueueBuilder *arg1 = (cc::render::RasterQueueBuilder *) NULL ;
    ccstd::string *arg2 = 0 ;
    gfx::Color *arg3 = 0 ;
    ccstd::string temp2 ;
    gfx::Color temp3 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::RasterQueueBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_clearRenderTarget,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_clearRenderTarget,3,SWIGTYPE_p_gfx__Color");
    arg3 = &temp3;
    
    (arg1)->clearRenderTarget((ccstd::string const &)*arg2,(gfx::Color const &)*arg3);
    
    
    return true;
}

static bool js_cc_render_RasterQueueBuilder_setViewport(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::RasterQueueBuilder *arg1 = (cc::render::RasterQueueBuilder *) NULL ;
    gfx::Viewport *arg2 = 0 ;
    gfx::Viewport temp2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::RasterQueueBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_setViewport,2,SWIGTYPE_p_gfx__Viewport");
    arg2 = &temp2;
    
    (arg1)->setViewport((gfx::Viewport const &)*arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_RasterQueueBuilder_setViewport) 

static bool js_cc_render_RasterQueueBuilder_addSceneOfCamera__SWIG_1(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::render::RasterQueueBuilder *arg1 = (cc::render::RasterQueueBuilder *) NULL ;
    cc::scene::Camera *arg2 = (cc::scene::Camera *) NULL ;
    LightInfo arg3 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::RasterQueueBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addSceneOfCamera,2,SWIGTYPE_p_cc__scene__Camera"); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addSceneOfCamera,3,SWIGTYPE_LightInfo"); 
    
    (arg1)->addSceneOfCamera(arg2,arg3);
    
    
    return true;
}

static bool js_cc_render_RasterQueueBuilder_addSceneOfCamera(se::State& s)
{
    // js_function_dispatcher
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    // js_function_dispatch_case
    if (argc == 3) {
        ok = js_cc_render_RasterQueueBuilder_addSceneOfCamera__SWIG_0(s);
        if (ok) {
            return true; 
        }
    } // js_function_dispatch_case
    if (argc == 2) {
        ok = js_cc_render_RasterQueueBuilder_addSceneOfCamera__SWIG_1(s);
        if (ok) {
            return true; 
        }
    } 
    SE_REPORT_ERROR("wrong number of arguments: %d", (int)argc);
    return false;
}
SE_BIND_FUNC(js_cc_render_RasterQueueBuilder_addSceneOfCamera) 

static bool js_cc_render_RasterQueueBuilder_addScene__SWIG_1(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::render::RasterQueueBuilder *arg1 = (cc::render::RasterQueueBuilder *) NULL ;
    ccstd::string *arg2 = 0 ;
    ccstd::string temp2 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::RasterQueueBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addScene,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    (arg1)->addScene((ccstd::string const &)*arg2);
    
    
    return true;
}

static bool js_cc_render_RasterQueueBuilder_addScene(se::State& s)
{
    // js_function_dispatcher
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    // js_function_dispatch_case
    if (argc == 2) {
        ok = js_cc_render_RasterQueueBuilder_addScene__SWIG_0(s);
        if (ok) {
            return true; 
        }
    } // js_function_dispatch_case
    if (argc == 1) {
        ok = js_cc_render_RasterQueueBuilder_addScene__SWIG_1(s);
        if (ok) {
            return true; 
        }
    } 
    SE_REPORT_ERROR("wrong number of arguments: %d", (int)argc);
    return false;
}
SE_BIND_FUNC(js_cc_render_RasterQueueBuilder_addScene) 

static bool js_cc_render_RasterQueueBuilder_addFullscreenQuad__SWIG_1(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::render::RasterQueueBuilder *arg1 = (cc::render::RasterQueueBuilder *) NULL ;
    Material *arg2 = (Material *) NULL ;
    uint32_t arg3 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::RasterQueueBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addFullscreenQuad,2,SWIGTYPE_p_Material"); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addFullscreenQuad,3,SWIGTYPE_uint32_t"); 
    
    (arg1)->addFullscreenQuad(arg2,arg3);
    
    
    return true;
}

static bool js_cc_render_RasterQueueBuilder_addFullscreenQuad(se::State& s)
{
    // js_function_dispatcher
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    // js_function_dispatch_case
    if (argc == 3) {
        ok = js_cc_render_RasterQueueBuilder_addFullscreenQuad__SWIG_0(s);
        if (ok) {
            return true; 
        }
    } // js_function_dispatch_case
    if (argc == 2) {
        ok = js_cc_render_RasterQueueBuilder_addFullscreenQuad__SWIG_1(s);
        if (ok) {
            return true; 
        }
    } 
    SE_REPORT_ERROR("wrong number of arguments: %d", (int)argc);
    return false;
}
SE_BIND_FUNC(js_cc_render_RasterQueueBuilder_addFullscreenQuad) 

static bool js_cc_render_RasterQueueBuilder_addCameraQuad__SWIG_1(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::render::RasterQueueBuilder *arg1 = (cc::render::RasterQueueBuilder *) NULL ;
    cc::scene::Camera *arg2 = (cc::scene::Camera *) NULL ;
    Material *arg3 = (Material *) NULL ;
    uint32_t arg4 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::RasterQueueBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addCameraQuad,2,SWIGTYPE_p_cc__scene__Camera"); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addCameraQuad,3,SWIGTYPE_p_Material"); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[2], &arg4, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_addCameraQuad,4,SWIGTYPE_uint32_t"); 
    
    (arg1)->addCameraQuad(arg2,arg3,arg4);
    
    
    return true;
}

static bool js_cc_render_RasterQueueBuilder_addCameraQuad(se::State& s)
{
    // js_function_dispatcher
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    // js_function_dispatch_case
    if (argc == 4) {
        ok = js_cc_render_RasterQueueBuilder_addCameraQuad__SWIG_0(s);
        if (ok) {
            return true; 
        }
    } // js_function_dispatch_case
    if (argc == 3) {
        ok = js_cc_render_RasterQueueBuilder_addCameraQuad__SWIG_1(s);
        if (ok) {
            return true; 
        }
    } 
    SE_REPORT_ERROR("wrong number of arguments: %d", (int)argc);
    return false;
}
SE_BIND_FUNC(js_cc_render_RasterQueueBuilder_addCameraQuad) 

static bool js_cc_render_RasterQueueBuilder_clearRenderTarget__SWIG_1(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::render::RasterQueueBuilder *arg1 = (cc::render::RasterQueueBuilder *) NULL ;
    ccstd::string *arg2 = 0 ;
    ccstd::string temp2 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::RasterQueueBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterQueueBuilder_clearRenderTarget,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    (arg1)->clearRenderTarget((ccstd::string const &)*arg2);
    
    
    return true;
}

static bool js_cc_render_RasterQueueBuilder_clearRenderTarget(se::State& s)
{
    // js_function_dispatcher
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    // js_function_dispatch_case
    if (argc == 2) {
        ok = js_cc_render_RasterQueueBuilder_clearRenderTarget__SWIG_0(s);
        if (ok) {
            return true; 
        }
    } // js_function_dispatch_case
    if (argc == 1) {
        ok = js_cc_render_RasterQueueBuilder_clearRenderTarget__SWIG_1(s);
        if (ok) {
            return true; 
        }
    } 
    SE_REPORT_ERROR("wrong number of arguments: %d", (int)argc);
    return false;
}
SE_BIND_FUNC(js_cc_render_RasterQueueBuilder_clearRenderTarget) 

static bool js_delete_cc_render_RasterQueueBuilder(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_render_RasterQueueBuilder) 

bool js_register_cc_render_RasterQueueBuilder(se::Object* obj) {
    auto* cls = se::Class::create("RasterQueueBuilder", obj, __jsb_cc_render_Setter_proto, nullptr); 
    
    
    cls->defineFunction("setViewport", _SE(js_cc_render_RasterQueueBuilder_setViewport)); 
    cls->defineFunction("addSceneOfCamera", _SE(js_cc_render_RasterQueueBuilder_addSceneOfCamera)); 
    cls->defineFunction("addScene", _SE(js_cc_render_RasterQueueBuilder_addScene)); 
    cls->defineFunction("addFullscreenQuad", _SE(js_cc_render_RasterQueueBuilder_addFullscreenQuad)); 
    cls->defineFunction("addCameraQuad", _SE(js_cc_render_RasterQueueBuilder_addCameraQuad)); 
    cls->defineFunction("clearRenderTarget", _SE(js_cc_render_RasterQueueBuilder_clearRenderTarget)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_render_RasterQueueBuilder));
    
    
    cls->install();
    JSBClassType::registerClass<cc::render::RasterQueueBuilder>(cls);
    
    __jsb_cc_render_RasterQueueBuilder_proto = cls->getProto();
    __jsb_cc_render_RasterQueueBuilder_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_render_RasterPassBuilder_class = nullptr;
se::Object* __jsb_cc_render_RasterPassBuilder_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_render_RasterPassBuilder) 

static bool js_cc_render_RasterPassBuilder_addRasterView(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::RasterPassBuilder *arg1 = (cc::render::RasterPassBuilder *) NULL ;
    ccstd::string *arg2 = 0 ;
    RasterView *arg3 = 0 ;
    ccstd::string temp2 ;
    RasterView temp3 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::RasterPassBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterPassBuilder_addRasterView,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterPassBuilder_addRasterView,3,SWIGTYPE_p_RasterView");
    arg3 = &temp3;
    
    (arg1)->addRasterView((ccstd::string const &)*arg2,(RasterView const &)*arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_RasterPassBuilder_addRasterView) 

static bool js_cc_render_RasterPassBuilder_addComputeView(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::RasterPassBuilder *arg1 = (cc::render::RasterPassBuilder *) NULL ;
    ccstd::string *arg2 = 0 ;
    ComputeView *arg3 = 0 ;
    ccstd::string temp2 ;
    ComputeView temp3 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::RasterPassBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterPassBuilder_addComputeView,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterPassBuilder_addComputeView,3,SWIGTYPE_p_ComputeView");
    arg3 = &temp3;
    
    (arg1)->addComputeView((ccstd::string const &)*arg2,(ComputeView const &)*arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_RasterPassBuilder_addComputeView) 

static bool js_cc_render_RasterPassBuilder_addQueue__SWIG_0(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::render::RasterPassBuilder *arg1 = (cc::render::RasterPassBuilder *) NULL ;
    QueueHint arg2 ;
    cc::render::RasterQueueBuilder *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::RasterPassBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterPassBuilder_addQueue,2,SWIGTYPE_QueueHint"); 
    
    result = (cc::render::RasterQueueBuilder *)(arg1)->addQueue(arg2);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RasterPassBuilder_addQueue, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}

static bool js_cc_render_RasterPassBuilder_setViewport(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::RasterPassBuilder *arg1 = (cc::render::RasterPassBuilder *) NULL ;
    gfx::Viewport *arg2 = 0 ;
    gfx::Viewport temp2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::RasterPassBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "RasterPassBuilder_setViewport,2,SWIGTYPE_p_gfx__Viewport");
    arg2 = &temp2;
    
    (arg1)->setViewport((gfx::Viewport const &)*arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_RasterPassBuilder_setViewport) 

static bool js_cc_render_RasterPassBuilder_addQueue__SWIG_1(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::render::RasterPassBuilder *arg1 = (cc::render::RasterPassBuilder *) NULL ;
    cc::render::RasterQueueBuilder *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::RasterPassBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::render::RasterQueueBuilder *)(arg1)->addQueue();
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "RasterPassBuilder_addQueue, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}

static bool js_cc_render_RasterPassBuilder_addQueue(se::State& s)
{
    // js_function_dispatcher
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    // js_function_dispatch_case
    if (argc == 1) {
        ok = js_cc_render_RasterPassBuilder_addQueue__SWIG_0(s);
        if (ok) {
            return true; 
        }
    } // js_function_dispatch_case
    if (argc == 0) {
        ok = js_cc_render_RasterPassBuilder_addQueue__SWIG_1(s);
        if (ok) {
            return true; 
        }
    } 
    SE_REPORT_ERROR("wrong number of arguments: %d", (int)argc);
    return false;
}
SE_BIND_FUNC(js_cc_render_RasterPassBuilder_addQueue) 

static bool js_delete_cc_render_RasterPassBuilder(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_render_RasterPassBuilder) 

bool js_register_cc_render_RasterPassBuilder(se::Object* obj) {
    auto* cls = se::Class::create("RasterPassBuilder", obj, __jsb_cc_render_Setter_proto, nullptr); 
    
    
    cls->defineFunction("addRasterView", _SE(js_cc_render_RasterPassBuilder_addRasterView)); 
    cls->defineFunction("addComputeView", _SE(js_cc_render_RasterPassBuilder_addComputeView)); 
    cls->defineFunction("setViewport", _SE(js_cc_render_RasterPassBuilder_setViewport)); 
    cls->defineFunction("addQueue", _SE(js_cc_render_RasterPassBuilder_addQueue)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_render_RasterPassBuilder));
    
    
    cls->install();
    JSBClassType::registerClass<cc::render::RasterPassBuilder>(cls);
    
    __jsb_cc_render_RasterPassBuilder_proto = cls->getProto();
    __jsb_cc_render_RasterPassBuilder_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_render_ComputeQueueBuilder_class = nullptr;
se::Object* __jsb_cc_render_ComputeQueueBuilder_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_render_ComputeQueueBuilder) 

static bool js_cc_render_ComputeQueueBuilder_addDispatch(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::ComputeQueueBuilder *arg1 = (cc::render::ComputeQueueBuilder *) NULL ;
    ccstd::string *arg2 = 0 ;
    uint32_t arg3 ;
    uint32_t arg4 ;
    uint32_t arg5 ;
    ccstd::string temp2 ;
    
    if(argc != 4) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 4);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::ComputeQueueBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "ComputeQueueBuilder_addDispatch,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "ComputeQueueBuilder_addDispatch,3,SWIGTYPE_uint32_t"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[2], &arg4, s.thisObject());
    SE_PRECONDITION2(ok, false, "ComputeQueueBuilder_addDispatch,4,SWIGTYPE_uint32_t"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[3], &arg5, s.thisObject());
    SE_PRECONDITION2(ok, false, "ComputeQueueBuilder_addDispatch,5,SWIGTYPE_uint32_t"); 
    
    (arg1)->addDispatch((ccstd::string const &)*arg2,arg3,arg4,arg5);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_ComputeQueueBuilder_addDispatch) 

static bool js_delete_cc_render_ComputeQueueBuilder(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_render_ComputeQueueBuilder) 

bool js_register_cc_render_ComputeQueueBuilder(se::Object* obj) {
    auto* cls = se::Class::create("ComputeQueueBuilder", obj, __jsb_cc_render_Setter_proto, nullptr); 
    
    
    cls->defineFunction("addDispatch", _SE(js_cc_render_ComputeQueueBuilder_addDispatch)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_render_ComputeQueueBuilder));
    
    
    cls->install();
    JSBClassType::registerClass<cc::render::ComputeQueueBuilder>(cls);
    
    __jsb_cc_render_ComputeQueueBuilder_proto = cls->getProto();
    __jsb_cc_render_ComputeQueueBuilder_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_render_ComputePassBuilder_class = nullptr;
se::Object* __jsb_cc_render_ComputePassBuilder_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_render_ComputePassBuilder) 

static bool js_cc_render_ComputePassBuilder_addComputeView(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::ComputePassBuilder *arg1 = (cc::render::ComputePassBuilder *) NULL ;
    ccstd::string *arg2 = 0 ;
    ComputeView *arg3 = 0 ;
    ccstd::string temp2 ;
    ComputeView temp3 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::ComputePassBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "ComputePassBuilder_addComputeView,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "ComputePassBuilder_addComputeView,3,SWIGTYPE_p_ComputeView");
    arg3 = &temp3;
    
    (arg1)->addComputeView((ccstd::string const &)*arg2,(ComputeView const &)*arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_ComputePassBuilder_addComputeView) 

static bool js_cc_render_ComputePassBuilder_addQueue(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::ComputePassBuilder *arg1 = (cc::render::ComputePassBuilder *) NULL ;
    cc::render::ComputeQueueBuilder *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::ComputePassBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::render::ComputeQueueBuilder *)(arg1)->addQueue();
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "ComputePassBuilder_addQueue, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_ComputePassBuilder_addQueue) 

static bool js_delete_cc_render_ComputePassBuilder(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_render_ComputePassBuilder) 

bool js_register_cc_render_ComputePassBuilder(se::Object* obj) {
    auto* cls = se::Class::create("ComputePassBuilder", obj, __jsb_cc_render_Setter_proto, nullptr); 
    
    
    cls->defineFunction("addComputeView", _SE(js_cc_render_ComputePassBuilder_addComputeView)); 
    cls->defineFunction("addQueue", _SE(js_cc_render_ComputePassBuilder_addQueue)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_render_ComputePassBuilder));
    
    
    cls->install();
    JSBClassType::registerClass<cc::render::ComputePassBuilder>(cls);
    
    __jsb_cc_render_ComputePassBuilder_proto = cls->getProto();
    __jsb_cc_render_ComputePassBuilder_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_render_MovePassBuilder_class = nullptr;
se::Object* __jsb_cc_render_MovePassBuilder_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_render_MovePassBuilder) 

static bool js_cc_render_MovePassBuilder_addPair(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::MovePassBuilder *arg1 = (cc::render::MovePassBuilder *) NULL ;
    MovePair *arg2 = 0 ;
    MovePair temp2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::MovePassBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "MovePassBuilder_addPair,2,SWIGTYPE_p_MovePair");
    arg2 = &temp2;
    
    (arg1)->addPair((MovePair const &)*arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_MovePassBuilder_addPair) 

static bool js_delete_cc_render_MovePassBuilder(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_render_MovePassBuilder) 

bool js_register_cc_render_MovePassBuilder(se::Object* obj) {
    auto* cls = se::Class::create("MovePassBuilder", obj, __jsb_cc_render_RenderNode_proto, nullptr); 
    
    
    cls->defineFunction("addPair", _SE(js_cc_render_MovePassBuilder_addPair)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_render_MovePassBuilder));
    
    
    cls->install();
    JSBClassType::registerClass<cc::render::MovePassBuilder>(cls);
    
    __jsb_cc_render_MovePassBuilder_proto = cls->getProto();
    __jsb_cc_render_MovePassBuilder_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_render_CopyPassBuilder_class = nullptr;
se::Object* __jsb_cc_render_CopyPassBuilder_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_render_CopyPassBuilder) 

static bool js_cc_render_CopyPassBuilder_addPair(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::CopyPassBuilder *arg1 = (cc::render::CopyPassBuilder *) NULL ;
    CopyPair *arg2 = 0 ;
    CopyPair temp2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::CopyPassBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "CopyPassBuilder_addPair,2,SWIGTYPE_p_CopyPair");
    arg2 = &temp2;
    
    (arg1)->addPair((CopyPair const &)*arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_CopyPassBuilder_addPair) 

static bool js_delete_cc_render_CopyPassBuilder(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_render_CopyPassBuilder) 

bool js_register_cc_render_CopyPassBuilder(se::Object* obj) {
    auto* cls = se::Class::create("CopyPassBuilder", obj, __jsb_cc_render_RenderNode_proto, nullptr); 
    
    
    cls->defineFunction("addPair", _SE(js_cc_render_CopyPassBuilder_addPair)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_render_CopyPassBuilder));
    
    
    cls->install();
    JSBClassType::registerClass<cc::render::CopyPassBuilder>(cls);
    
    __jsb_cc_render_CopyPassBuilder_proto = cls->getProto();
    __jsb_cc_render_CopyPassBuilder_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_render_SceneVisitor_class = nullptr;
se::Object* __jsb_cc_render_SceneVisitor_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_render_SceneVisitor) 

static bool js_delete_cc_render_SceneVisitor(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_render_SceneVisitor) 

static bool js_cc_render_SceneVisitor_setViewport(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::SceneVisitor *arg1 = (cc::render::SceneVisitor *) NULL ;
    gfx::Viewport *arg2 = 0 ;
    gfx::Viewport temp2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::SceneVisitor>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "SceneVisitor_setViewport,2,SWIGTYPE_p_gfx__Viewport");
    arg2 = &temp2;
    
    (arg1)->setViewport((gfx::Viewport const &)*arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_SceneVisitor_setViewport) 

static bool js_cc_render_SceneVisitor_setScissor(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::SceneVisitor *arg1 = (cc::render::SceneVisitor *) NULL ;
    gfx::Rect *arg2 = 0 ;
    gfx::Rect temp2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::SceneVisitor>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "SceneVisitor_setScissor,2,SWIGTYPE_p_gfx__Rect");
    arg2 = &temp2;
    
    (arg1)->setScissor((gfx::Rect const &)*arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_SceneVisitor_setScissor) 

static bool js_cc_render_SceneVisitor_bindPipelineState(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::SceneVisitor *arg1 = (cc::render::SceneVisitor *) NULL ;
    gfx::PipelineState *arg2 = (gfx::PipelineState *) NULL ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::SceneVisitor>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "SceneVisitor_bindPipelineState,2,SWIGTYPE_p_gfx__PipelineState"); 
    (arg1)->bindPipelineState(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_SceneVisitor_bindPipelineState) 

static bool js_cc_render_SceneVisitor_bindInputAssembler(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::SceneVisitor *arg1 = (cc::render::SceneVisitor *) NULL ;
    gfx::InputAssembler *arg2 = (gfx::InputAssembler *) NULL ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::SceneVisitor>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "SceneVisitor_bindInputAssembler,2,SWIGTYPE_p_gfx__InputAssembler"); 
    (arg1)->bindInputAssembler(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_SceneVisitor_bindInputAssembler) 

static bool js_cc_render_SceneVisitor_draw(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::SceneVisitor *arg1 = (cc::render::SceneVisitor *) NULL ;
    gfx::DrawInfo *arg2 = 0 ;
    gfx::DrawInfo temp2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::SceneVisitor>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "SceneVisitor_draw,2,SWIGTYPE_p_gfx__DrawInfo");
    arg2 = &temp2;
    
    (arg1)->draw((gfx::DrawInfo const &)*arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_SceneVisitor_draw) 

static bool js_cc_render_SceneVisitor_pipelineSceneData_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::render::SceneVisitor *arg1 = (cc::render::SceneVisitor *) NULL ;
    cc::pipeline::PipelineSceneData *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::SceneVisitor>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::pipeline::PipelineSceneData *)cc_render_SceneVisitor_pipelineSceneData_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "SceneVisitor_pipelineSceneData_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_render_SceneVisitor_pipelineSceneData_get) 

bool js_register_cc_render_SceneVisitor(se::Object* obj) {
    auto* cls = se::Class::create("SceneVisitor", obj, nullptr, nullptr); 
    
    cls->defineProperty("pipelineSceneData", _SE(js_cc_render_SceneVisitor_pipelineSceneData_get), nullptr); 
    
    cls->defineFunction("setViewport", _SE(js_cc_render_SceneVisitor_setViewport)); 
    cls->defineFunction("setScissor", _SE(js_cc_render_SceneVisitor_setScissor)); 
    cls->defineFunction("bindPipelineState", _SE(js_cc_render_SceneVisitor_bindPipelineState)); 
    cls->defineFunction("bindInputAssembler", _SE(js_cc_render_SceneVisitor_bindInputAssembler)); 
    cls->defineFunction("draw", _SE(js_cc_render_SceneVisitor_draw)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_render_SceneVisitor));
    
    
    cls->install();
    JSBClassType::registerClass<cc::render::SceneVisitor>(cls);
    
    __jsb_cc_render_SceneVisitor_proto = cls->getProto();
    __jsb_cc_render_SceneVisitor_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_render_SceneTask_class = nullptr;
se::Object* __jsb_cc_render_SceneTask_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_render_SceneTask) 

static bool js_delete_cc_render_SceneTask(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_render_SceneTask) 

static bool js_cc_render_SceneTask_start(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::SceneTask *arg1 = (cc::render::SceneTask *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::SceneTask>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->start();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_SceneTask_start) 

static bool js_cc_render_SceneTask_join(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::SceneTask *arg1 = (cc::render::SceneTask *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::SceneTask>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->join();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_SceneTask_join) 

static bool js_cc_render_SceneTask_submit(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::SceneTask *arg1 = (cc::render::SceneTask *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::SceneTask>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->submit();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_SceneTask_submit) 

static bool js_cc_render_SceneTask_taskType_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::render::SceneTask *arg1 = (cc::render::SceneTask *) NULL ;
    cc::render::TaskType result;
    
    arg1 = SE_THIS_OBJECT<cc::render::SceneTask>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = cc_render_SceneTask_taskType_get(arg1);
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "SceneTask_taskType_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_render_SceneTask_taskType_get) 

bool js_register_cc_render_SceneTask(se::Object* obj) {
    auto* cls = se::Class::create("SceneTask", obj, nullptr, nullptr); 
    
    cls->defineProperty("taskType", _SE(js_cc_render_SceneTask_taskType_get), nullptr); 
    
    cls->defineFunction("start", _SE(js_cc_render_SceneTask_start)); 
    cls->defineFunction("join", _SE(js_cc_render_SceneTask_join)); 
    cls->defineFunction("submit", _SE(js_cc_render_SceneTask_submit)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_render_SceneTask));
    
    
    cls->install();
    JSBClassType::registerClass<cc::render::SceneTask>(cls);
    
    __jsb_cc_render_SceneTask_proto = cls->getProto();
    __jsb_cc_render_SceneTask_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_render_SceneTransversal_class = nullptr;
se::Object* __jsb_cc_render_SceneTransversal_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_render_SceneTransversal) 

static bool js_delete_cc_render_SceneTransversal(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_render_SceneTransversal) 

static bool js_cc_render_SceneTransversal_transverse(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::SceneTransversal *arg1 = (cc::render::SceneTransversal *) NULL ;
    cc::render::SceneVisitor *arg2 = (cc::render::SceneVisitor *) NULL ;
    cc::render::SceneTask *result = 0 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::SceneTransversal>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "SceneTransversal_transverse,2,SWIGTYPE_p_cc__render__SceneVisitor"); 
    result = (cc::render::SceneTask *)((cc::render::SceneTransversal const *)arg1)->transverse(arg2);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "SceneTransversal_transverse, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_SceneTransversal_transverse) 

bool js_register_cc_render_SceneTransversal(se::Object* obj) {
    auto* cls = se::Class::create("SceneTransversal", obj, nullptr, nullptr); 
    
    
    cls->defineFunction("transverse", _SE(js_cc_render_SceneTransversal_transverse)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_render_SceneTransversal));
    
    
    cls->install();
    JSBClassType::registerClass<cc::render::SceneTransversal>(cls);
    
    __jsb_cc_render_SceneTransversal_proto = cls->getProto();
    __jsb_cc_render_SceneTransversal_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_render_LayoutGraphBuilder_class = nullptr;
se::Object* __jsb_cc_render_LayoutGraphBuilder_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_render_LayoutGraphBuilder) 

static bool js_delete_cc_render_LayoutGraphBuilder(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_render_LayoutGraphBuilder) 

static bool js_cc_render_LayoutGraphBuilder_clear(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::LayoutGraphBuilder *arg1 = (cc::render::LayoutGraphBuilder *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::LayoutGraphBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->clear();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_LayoutGraphBuilder_clear) 

static bool js_cc_render_LayoutGraphBuilder_addRenderStage(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::LayoutGraphBuilder *arg1 = (cc::render::LayoutGraphBuilder *) NULL ;
    ccstd::string *arg2 = 0 ;
    ccstd::string temp2 ;
    uint32_t result;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::LayoutGraphBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "LayoutGraphBuilder_addRenderStage,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    result = (arg1)->addRenderStage((ccstd::string const &)*arg2);
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LayoutGraphBuilder_addRenderStage, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_LayoutGraphBuilder_addRenderStage) 

static bool js_cc_render_LayoutGraphBuilder_addRenderPhase(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::LayoutGraphBuilder *arg1 = (cc::render::LayoutGraphBuilder *) NULL ;
    ccstd::string *arg2 = 0 ;
    uint32_t arg3 ;
    ccstd::string temp2 ;
    uint32_t result;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::LayoutGraphBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "LayoutGraphBuilder_addRenderPhase,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "LayoutGraphBuilder_addRenderPhase,3,SWIGTYPE_uint32_t"); 
    
    result = (arg1)->addRenderPhase((ccstd::string const &)*arg2,arg3);
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LayoutGraphBuilder_addRenderPhase, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_LayoutGraphBuilder_addRenderPhase) 

static bool js_cc_render_LayoutGraphBuilder_addShader(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::LayoutGraphBuilder *arg1 = (cc::render::LayoutGraphBuilder *) NULL ;
    ccstd::string *arg2 = 0 ;
    uint32_t arg3 ;
    ccstd::string temp2 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::LayoutGraphBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "LayoutGraphBuilder_addShader,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "LayoutGraphBuilder_addShader,3,SWIGTYPE_uint32_t"); 
    
    (arg1)->addShader((ccstd::string const &)*arg2,arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_LayoutGraphBuilder_addShader) 

static bool js_cc_render_LayoutGraphBuilder_addDescriptorBlock(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::LayoutGraphBuilder *arg1 = (cc::render::LayoutGraphBuilder *) NULL ;
    uint32_t arg2 ;
    DescriptorBlockIndex *arg3 = 0 ;
    DescriptorBlockFlattened *arg4 = 0 ;
    DescriptorBlockIndex temp3 ;
    DescriptorBlockFlattened temp4 ;
    
    if(argc != 3) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 3);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::LayoutGraphBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "LayoutGraphBuilder_addDescriptorBlock,2,SWIGTYPE_uint32_t"); 
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "LayoutGraphBuilder_addDescriptorBlock,3,SWIGTYPE_p_DescriptorBlockIndex");
    arg3 = &temp3;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[2], &temp4, s.thisObject());
    SE_PRECONDITION2(ok, false, "LayoutGraphBuilder_addDescriptorBlock,4,SWIGTYPE_p_DescriptorBlockFlattened");
    arg4 = &temp4;
    
    (arg1)->addDescriptorBlock(arg2,(DescriptorBlockIndex const &)*arg3,(DescriptorBlockFlattened const &)*arg4);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_LayoutGraphBuilder_addDescriptorBlock) 

static bool js_cc_render_LayoutGraphBuilder_addUniformBlock(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::LayoutGraphBuilder *arg1 = (cc::render::LayoutGraphBuilder *) NULL ;
    uint32_t arg2 ;
    DescriptorBlockIndex *arg3 = 0 ;
    ccstd::string *arg4 = 0 ;
    gfx::UniformBlock *arg5 = 0 ;
    DescriptorBlockIndex temp3 ;
    ccstd::string temp4 ;
    gfx::UniformBlock temp5 ;
    
    if(argc != 4) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 4);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::LayoutGraphBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "LayoutGraphBuilder_addUniformBlock,2,SWIGTYPE_uint32_t"); 
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "LayoutGraphBuilder_addUniformBlock,3,SWIGTYPE_p_DescriptorBlockIndex");
    arg3 = &temp3;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[2], &temp4, s.thisObject());
    SE_PRECONDITION2(ok, false, "LayoutGraphBuilder_addUniformBlock,4,SWIGTYPE_p_ccstd__string");
    arg4 = &temp4;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[3], &temp5, s.thisObject());
    SE_PRECONDITION2(ok, false, "LayoutGraphBuilder_addUniformBlock,5,SWIGTYPE_p_gfx__UniformBlock");
    arg5 = &temp5;
    
    (arg1)->addUniformBlock(arg2,(DescriptorBlockIndex const &)*arg3,(ccstd::string const &)*arg4,(gfx::UniformBlock const &)*arg5);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_LayoutGraphBuilder_addUniformBlock) 

static bool js_cc_render_LayoutGraphBuilder_reserveDescriptorBlock(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::LayoutGraphBuilder *arg1 = (cc::render::LayoutGraphBuilder *) NULL ;
    uint32_t arg2 ;
    DescriptorBlockIndex *arg3 = 0 ;
    DescriptorBlockFlattened *arg4 = 0 ;
    DescriptorBlockIndex temp3 ;
    DescriptorBlockFlattened temp4 ;
    
    if(argc != 3) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 3);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::LayoutGraphBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "LayoutGraphBuilder_reserveDescriptorBlock,2,SWIGTYPE_uint32_t"); 
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "LayoutGraphBuilder_reserveDescriptorBlock,3,SWIGTYPE_p_DescriptorBlockIndex");
    arg3 = &temp3;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[2], &temp4, s.thisObject());
    SE_PRECONDITION2(ok, false, "LayoutGraphBuilder_reserveDescriptorBlock,4,SWIGTYPE_p_DescriptorBlockFlattened");
    arg4 = &temp4;
    
    (arg1)->reserveDescriptorBlock(arg2,(DescriptorBlockIndex const &)*arg3,(DescriptorBlockFlattened const &)*arg4);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_LayoutGraphBuilder_reserveDescriptorBlock) 

static bool js_cc_render_LayoutGraphBuilder_compile(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::LayoutGraphBuilder *arg1 = (cc::render::LayoutGraphBuilder *) NULL ;
    int result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::LayoutGraphBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (int)(arg1)->compile();
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_LayoutGraphBuilder_compile) 

static bool js_cc_render_LayoutGraphBuilder_print(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::LayoutGraphBuilder *arg1 = (cc::render::LayoutGraphBuilder *) NULL ;
    ccstd::string result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::LayoutGraphBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = ((cc::render::LayoutGraphBuilder const *)arg1)->print();
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LayoutGraphBuilder_print, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_LayoutGraphBuilder_print) 

bool js_register_cc_render_LayoutGraphBuilder(se::Object* obj) {
    auto* cls = se::Class::create("LayoutGraphBuilder", obj, nullptr, nullptr); 
    
    
    cls->defineFunction("clear", _SE(js_cc_render_LayoutGraphBuilder_clear)); 
    cls->defineFunction("addRenderStage", _SE(js_cc_render_LayoutGraphBuilder_addRenderStage)); 
    cls->defineFunction("addRenderPhase", _SE(js_cc_render_LayoutGraphBuilder_addRenderPhase)); 
    cls->defineFunction("addShader", _SE(js_cc_render_LayoutGraphBuilder_addShader)); 
    cls->defineFunction("addDescriptorBlock", _SE(js_cc_render_LayoutGraphBuilder_addDescriptorBlock)); 
    cls->defineFunction("addUniformBlock", _SE(js_cc_render_LayoutGraphBuilder_addUniformBlock)); 
    cls->defineFunction("reserveDescriptorBlock", _SE(js_cc_render_LayoutGraphBuilder_reserveDescriptorBlock)); 
    cls->defineFunction("compile", _SE(js_cc_render_LayoutGraphBuilder_compile)); 
    cls->defineFunction("print", _SE(js_cc_render_LayoutGraphBuilder_print)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_render_LayoutGraphBuilder));
    
    
    cls->install();
    JSBClassType::registerClass<cc::render::LayoutGraphBuilder>(cls);
    
    __jsb_cc_render_LayoutGraphBuilder_proto = cls->getProto();
    __jsb_cc_render_LayoutGraphBuilder_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_render_Pipeline_class = nullptr;
se::Object* __jsb_cc_render_Pipeline_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_render_Pipeline) 

static bool js_cc_render_Pipeline_beginSetup(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->beginSetup();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Pipeline_beginSetup) 

static bool js_cc_render_Pipeline_endSetup(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->endSetup();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Pipeline_endSetup) 

static bool js_cc_render_Pipeline_containsResource(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    ccstd::string *arg2 = 0 ;
    ccstd::string temp2 ;
    bool result;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_containsResource,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    result = (bool)((cc::render::Pipeline const *)arg1)->containsResource((ccstd::string const &)*arg2);
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Pipeline_containsResource) 

static bool js_cc_render_Pipeline_addRenderTexture(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    ccstd::string *arg2 = 0 ;
    gfx::Format arg3 ;
    uint32_t arg4 ;
    uint32_t arg5 ;
    cc::scene::RenderWindow *arg6 = (cc::scene::RenderWindow *) NULL ;
    ccstd::string temp2 ;
    uint32_t result;
    
    if(argc != 5) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 5);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addRenderTexture,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addRenderTexture,3,SWIGTYPE_gfx__Format"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[2], &arg4, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addRenderTexture,4,SWIGTYPE_uint32_t"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[3], &arg5, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addRenderTexture,5,SWIGTYPE_uint32_t"); 
    
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[4], &arg6, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addRenderTexture,6,SWIGTYPE_p_cc__scene__RenderWindow"); 
    result = (arg1)->addRenderTexture((ccstd::string const &)*arg2,arg3,arg4,arg5,arg6);
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Pipeline_addRenderTexture, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Pipeline_addRenderTexture) 

static bool js_cc_render_Pipeline_addRenderTarget__SWIG_0(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    ccstd::string *arg2 = 0 ;
    gfx::Format arg3 ;
    uint32_t arg4 ;
    uint32_t arg5 ;
    ResourceResidency arg6 ;
    ccstd::string temp2 ;
    uint32_t result;
    
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addRenderTarget,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addRenderTarget,3,SWIGTYPE_gfx__Format"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[2], &arg4, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addRenderTarget,4,SWIGTYPE_uint32_t"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[3], &arg5, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addRenderTarget,5,SWIGTYPE_uint32_t"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[4], &arg6, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addRenderTarget,6,SWIGTYPE_ResourceResidency"); 
    
    result = (arg1)->addRenderTarget((ccstd::string const &)*arg2,arg3,arg4,arg5,arg6);
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Pipeline_addRenderTarget, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}

static bool js_cc_render_Pipeline_addDepthStencil__SWIG_0(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    ccstd::string *arg2 = 0 ;
    gfx::Format arg3 ;
    uint32_t arg4 ;
    uint32_t arg5 ;
    ResourceResidency arg6 ;
    ccstd::string temp2 ;
    uint32_t result;
    
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addDepthStencil,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addDepthStencil,3,SWIGTYPE_gfx__Format"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[2], &arg4, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addDepthStencil,4,SWIGTYPE_uint32_t"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[3], &arg5, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addDepthStencil,5,SWIGTYPE_uint32_t"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[4], &arg6, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addDepthStencil,6,SWIGTYPE_ResourceResidency"); 
    
    result = (arg1)->addDepthStencil((ccstd::string const &)*arg2,arg3,arg4,arg5,arg6);
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Pipeline_addDepthStencil, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}

static bool js_cc_render_Pipeline_updateRenderWindow(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    ccstd::string *arg2 = 0 ;
    cc::scene::RenderWindow *arg3 = (cc::scene::RenderWindow *) NULL ;
    ccstd::string temp2 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_updateRenderWindow,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_updateRenderWindow,3,SWIGTYPE_p_cc__scene__RenderWindow"); 
    (arg1)->updateRenderWindow((ccstd::string const &)*arg2,arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Pipeline_updateRenderWindow) 

static bool js_cc_render_Pipeline_beginFrame(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->beginFrame();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Pipeline_beginFrame) 

static bool js_cc_render_Pipeline_endFrame(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->endFrame();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Pipeline_endFrame) 

static bool js_cc_render_Pipeline_addRasterPass__SWIG_0(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    uint32_t arg2 ;
    uint32_t arg3 ;
    ccstd::string *arg4 = 0 ;
    ccstd::string temp4 ;
    cc::render::RasterPassBuilder *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addRasterPass,2,SWIGTYPE_uint32_t"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addRasterPass,3,SWIGTYPE_uint32_t"); 
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[2], &temp4, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addRasterPass,4,SWIGTYPE_p_ccstd__string");
    arg4 = &temp4;
    
    result = (cc::render::RasterPassBuilder *)(arg1)->addRasterPass(arg2,arg3,(ccstd::string const &)*arg4);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Pipeline_addRasterPass, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}

static bool js_cc_render_Pipeline_addComputePass(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    ccstd::string *arg2 = 0 ;
    ccstd::string temp2 ;
    cc::render::ComputePassBuilder *result = 0 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addComputePass,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    result = (cc::render::ComputePassBuilder *)(arg1)->addComputePass((ccstd::string const &)*arg2);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Pipeline_addComputePass, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Pipeline_addComputePass) 

static bool js_cc_render_Pipeline_addMovePass(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    cc::render::MovePassBuilder *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::render::MovePassBuilder *)(arg1)->addMovePass();
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Pipeline_addMovePass, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Pipeline_addMovePass) 

static bool js_cc_render_Pipeline_addCopyPass(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    cc::render::CopyPassBuilder *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::render::CopyPassBuilder *)(arg1)->addCopyPass();
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Pipeline_addCopyPass, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Pipeline_addCopyPass) 

static bool js_cc_render_Pipeline_presentAll(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->presentAll();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Pipeline_presentAll) 

static bool js_cc_render_Pipeline_createSceneTransversal(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    cc::scene::Camera *arg2 = (cc::scene::Camera *) NULL ;
    cc::scene::RenderScene *arg3 = (cc::scene::RenderScene *) NULL ;
    cc::render::SceneTransversal *result = 0 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_createSceneTransversal,2,SWIGTYPE_p_cc__scene__Camera"); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_createSceneTransversal,3,SWIGTYPE_p_cc__scene__RenderScene"); 
    result = (cc::render::SceneTransversal *)(arg1)->createSceneTransversal((cc::scene::Camera const *)arg2,(cc::scene::RenderScene const *)arg3);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Pipeline_createSceneTransversal, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Pipeline_createSceneTransversal) 

static bool js_cc_render_Pipeline_getDescriptorSetLayout(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    ccstd::string *arg2 = 0 ;
    UpdateFrequency arg3 ;
    ccstd::string temp2 ;
    gfx::DescriptorSetLayout *result = 0 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_getDescriptorSetLayout,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_getDescriptorSetLayout,3,SWIGTYPE_UpdateFrequency"); 
    
    result = (gfx::DescriptorSetLayout *)(arg1)->getDescriptorSetLayout((ccstd::string const &)*arg2,arg3);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Pipeline_getDescriptorSetLayout, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Pipeline_getDescriptorSetLayout) 

static bool js_cc_render_Pipeline_addRenderTarget__SWIG_1(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    ccstd::string *arg2 = 0 ;
    gfx::Format arg3 ;
    uint32_t arg4 ;
    uint32_t arg5 ;
    ccstd::string temp2 ;
    uint32_t result;
    
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addRenderTarget,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addRenderTarget,3,SWIGTYPE_gfx__Format"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[2], &arg4, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addRenderTarget,4,SWIGTYPE_uint32_t"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[3], &arg5, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addRenderTarget,5,SWIGTYPE_uint32_t"); 
    
    result = (arg1)->addRenderTarget((ccstd::string const &)*arg2,arg3,arg4,arg5);
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Pipeline_addRenderTarget, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}

static bool js_cc_render_Pipeline_addRenderTarget(se::State& s)
{
    // js_function_dispatcher
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    // js_function_dispatch_case
    if (argc == 5) {
        ok = js_cc_render_Pipeline_addRenderTarget__SWIG_0(s);
        if (ok) {
            return true; 
        }
    } // js_function_dispatch_case
    if (argc == 4) {
        ok = js_cc_render_Pipeline_addRenderTarget__SWIG_1(s);
        if (ok) {
            return true; 
        }
    } 
    SE_REPORT_ERROR("wrong number of arguments: %d", (int)argc);
    return false;
}
SE_BIND_FUNC(js_cc_render_Pipeline_addRenderTarget) 

static bool js_cc_render_Pipeline_addDepthStencil__SWIG_1(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    ccstd::string *arg2 = 0 ;
    gfx::Format arg3 ;
    uint32_t arg4 ;
    uint32_t arg5 ;
    ccstd::string temp2 ;
    uint32_t result;
    
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addDepthStencil,2,SWIGTYPE_p_ccstd__string");
    arg2 = &temp2;
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addDepthStencil,3,SWIGTYPE_gfx__Format"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[2], &arg4, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addDepthStencil,4,SWIGTYPE_uint32_t"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[3], &arg5, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addDepthStencil,5,SWIGTYPE_uint32_t"); 
    
    result = (arg1)->addDepthStencil((ccstd::string const &)*arg2,arg3,arg4,arg5);
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Pipeline_addDepthStencil, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}

static bool js_cc_render_Pipeline_addDepthStencil(se::State& s)
{
    // js_function_dispatcher
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    // js_function_dispatch_case
    if (argc == 5) {
        ok = js_cc_render_Pipeline_addDepthStencil__SWIG_0(s);
        if (ok) {
            return true; 
        }
    } // js_function_dispatch_case
    if (argc == 4) {
        ok = js_cc_render_Pipeline_addDepthStencil__SWIG_1(s);
        if (ok) {
            return true; 
        }
    } 
    SE_REPORT_ERROR("wrong number of arguments: %d", (int)argc);
    return false;
}
SE_BIND_FUNC(js_cc_render_Pipeline_addDepthStencil) 

static bool js_cc_render_Pipeline_addRasterPass__SWIG_1(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    uint32_t arg2 ;
    uint32_t arg3 ;
    cc::render::RasterPassBuilder *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addRasterPass,2,SWIGTYPE_uint32_t"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Pipeline_addRasterPass,3,SWIGTYPE_uint32_t"); 
    
    result = (cc::render::RasterPassBuilder *)(arg1)->addRasterPass(arg2,arg3);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Pipeline_addRasterPass, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}

static bool js_cc_render_Pipeline_addRasterPass(se::State& s)
{
    // js_function_dispatcher
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    // js_function_dispatch_case
    if (argc == 3) {
        ok = js_cc_render_Pipeline_addRasterPass__SWIG_0(s);
        if (ok) {
            return true; 
        }
    } // js_function_dispatch_case
    if (argc == 2) {
        ok = js_cc_render_Pipeline_addRasterPass__SWIG_1(s);
        if (ok) {
            return true; 
        }
    } 
    SE_REPORT_ERROR("wrong number of arguments: %d", (int)argc);
    return false;
}
SE_BIND_FUNC(js_cc_render_Pipeline_addRasterPass) 

static bool js_cc_render_Pipeline_layoutGraphBuilder_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::render::Pipeline *arg1 = (cc::render::Pipeline *) NULL ;
    cc::render::LayoutGraphBuilder *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::render::Pipeline>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::render::LayoutGraphBuilder *)cc_render_Pipeline_layoutGraphBuilder_get(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Pipeline_layoutGraphBuilder_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_render_Pipeline_layoutGraphBuilder_get) 

static bool js_delete_cc_render_Pipeline(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_render_Pipeline) 

bool js_register_cc_render_Pipeline(se::Object* obj) {
    auto* cls = se::Class::create("Pipeline", obj, __jsb_cc_render_PipelineRuntime_proto, nullptr); 
    
    cls->defineProperty("layoutGraphBuilder", _SE(js_cc_render_Pipeline_layoutGraphBuilder_get), nullptr); 
    
    cls->defineFunction("beginSetup", _SE(js_cc_render_Pipeline_beginSetup)); 
    cls->defineFunction("endSetup", _SE(js_cc_render_Pipeline_endSetup)); 
    cls->defineFunction("containsResource", _SE(js_cc_render_Pipeline_containsResource)); 
    cls->defineFunction("addRenderTexture", _SE(js_cc_render_Pipeline_addRenderTexture)); 
    cls->defineFunction("updateRenderWindow", _SE(js_cc_render_Pipeline_updateRenderWindow)); 
    cls->defineFunction("beginFrame", _SE(js_cc_render_Pipeline_beginFrame)); 
    cls->defineFunction("endFrame", _SE(js_cc_render_Pipeline_endFrame)); 
    cls->defineFunction("addComputePass", _SE(js_cc_render_Pipeline_addComputePass)); 
    cls->defineFunction("addMovePass", _SE(js_cc_render_Pipeline_addMovePass)); 
    cls->defineFunction("addCopyPass", _SE(js_cc_render_Pipeline_addCopyPass)); 
    cls->defineFunction("presentAll", _SE(js_cc_render_Pipeline_presentAll)); 
    cls->defineFunction("createSceneTransversal", _SE(js_cc_render_Pipeline_createSceneTransversal)); 
    cls->defineFunction("getDescriptorSetLayout", _SE(js_cc_render_Pipeline_getDescriptorSetLayout)); 
    cls->defineFunction("addRenderTarget", _SE(js_cc_render_Pipeline_addRenderTarget)); 
    cls->defineFunction("addDepthStencil", _SE(js_cc_render_Pipeline_addDepthStencil)); 
    cls->defineFunction("addRasterPass", _SE(js_cc_render_Pipeline_addRasterPass)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_render_Pipeline));
    
    
    cls->install();
    JSBClassType::registerClass<cc::render::Pipeline>(cls);
    
    __jsb_cc_render_Pipeline_proto = cls->getProto();
    __jsb_cc_render_Pipeline_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_render_PipelineBuilder_class = nullptr;
se::Object* __jsb_cc_render_PipelineBuilder_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_render_PipelineBuilder) 

static bool js_delete_cc_render_PipelineBuilder(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_render_PipelineBuilder) 

static bool js_cc_render_PipelineBuilder_setup(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::PipelineBuilder *arg1 = (cc::render::PipelineBuilder *) NULL ;
    ccstd::vector< cc::scene::Camera * > *arg2 = 0 ;
    cc::render::Pipeline *arg3 = (cc::render::Pipeline *) NULL ;
    ccstd::vector< cc::scene::Camera * > temp2 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::render::PipelineBuilder>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "PipelineBuilder_setup,2,SWIGTYPE_p_ccstd__vectorT_cc__scene__Camera_p_t");
    arg2 = &temp2;
    
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "PipelineBuilder_setup,3,SWIGTYPE_p_cc__render__Pipeline"); 
    (arg1)->setup((ccstd::vector< cc::scene::Camera * > const &)*arg2,arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_PipelineBuilder_setup) 

bool js_register_cc_render_PipelineBuilder(se::Object* obj) {
    auto* cls = se::Class::create("PipelineBuilder", obj, nullptr, nullptr); 
    
    
    cls->defineFunction("setup", _SE(js_cc_render_PipelineBuilder_setup)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_render_PipelineBuilder));
    
    
    cls->install();
    JSBClassType::registerClass<cc::render::PipelineBuilder>(cls);
    
    __jsb_cc_render_PipelineBuilder_proto = cls->getProto();
    __jsb_cc_render_PipelineBuilder_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_render_Factory_class = nullptr;
se::Object* __jsb_cc_render_Factory_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_render_Factory) 

static bool js_cc_render_Factory_createPipeline_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::render::Pipeline *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    result = (cc::render::Pipeline *)cc::render::Factory::createPipeline();
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Factory_createPipeline, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_render_Factory_createPipeline_static) 

// js_ctor
static bool js_new_cc_render_Factory(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::render::Factory *result;
    result = (cc::render::Factory *)new cc::render::Factory();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_render_Factory, __jsb_cc_render_Factory_class, js_delete_cc_render_Factory)

static bool js_delete_cc_render_Factory(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_render_Factory) 

bool js_register_cc_render_Factory(se::Object* obj) {
    auto* cls = se::Class::create("Factory", obj, nullptr, _SE(js_new_cc_render_Factory)); 
    
    
    
    
    cls->defineStaticFunction("createPipeline", _SE(js_cc_render_Factory_createPipeline_static)); 
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_render_Factory));
    
    
    cls->install();
    JSBClassType::registerClass<cc::render::Factory>(cls);
    
    __jsb_cc_render_Factory_proto = cls->getProto();
    __jsb_cc_render_Factory_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}




bool register_all_render(se::Object* obj) {
    // Get the ns
    se::Value nsVal;
    if (!obj->getProperty("render", &nsVal, true))
    {
        se::HandleObject jsobj(se::Object::createPlainObject());
        nsVal.setObject(jsobj);
        obj->setProperty("render", nsVal);
    }
    se::Object* ns = nsVal.toObject();
    /* Register classes */
    js_register_cc_render_PipelineRuntime(ns); 
    js_register_cc_render_RenderNode(ns); 
    js_register_cc_render_Setter(ns); 
    js_register_cc_render_RasterQueueBuilder(ns); 
    js_register_cc_render_RasterPassBuilder(ns); 
    js_register_cc_render_ComputeQueueBuilder(ns); 
    js_register_cc_render_ComputePassBuilder(ns); 
    js_register_cc_render_MovePassBuilder(ns); 
    js_register_cc_render_CopyPassBuilder(ns); 
    js_register_cc_render_SceneVisitor(ns); 
    js_register_cc_render_SceneTask(ns); 
    js_register_cc_render_SceneTransversal(ns); 
    js_register_cc_render_LayoutGraphBuilder(ns); 
    js_register_cc_render_Pipeline(ns); 
    js_register_cc_render_PipelineBuilder(ns); 
    js_register_cc_render_Factory(ns); 
    
    /* Register global variables & global functions */
    
    
    
    return true;
}


#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif
// clang-format on
