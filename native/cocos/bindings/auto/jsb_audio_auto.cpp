// clang-format off

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/****************************************************************************
 Copyright (c) 2022 Xiamen Yaji Software Co., Ltd.

 http://www.cocos.com

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
 worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
 not use Cocos Creator software for developing other software or tools that's
 used for developing games. You are not granted to publish, distribute,
 sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
****************************************************************************/

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static 
#endif



#include <stdio.h>


#include "bindings/jswrapper/SeApi.h"
#include "bindings/manual/jsb_conversions.h"
#include "bindings/manual/jsb_global.h"


#include "bindings/auto/jsb_audio_auto.h"



se::Class* __jsb_cc_AudioProfile_class = nullptr;
se::Object* __jsb_cc_AudioProfile_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_AudioProfile) 

static bool js_cc_AudioProfile_name_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::AudioProfile *arg1 = (cc::AudioProfile *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::AudioProfile>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->name, s.thisObject());
    SE_PRECONDITION2(ok, false, "AudioProfile_name_set,2,SWIGTYPE_ccstd__string"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_AudioProfile_name_set) 

static bool js_cc_AudioProfile_name_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::AudioProfile *arg1 = (cc::AudioProfile *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::AudioProfile>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->name, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "AudioProfile_name_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->name, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_AudioProfile_name_get) 

static bool js_cc_AudioProfile_maxInstances_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::AudioProfile *arg1 = (cc::AudioProfile *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::AudioProfile>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) unsigned int, unsigned short, unsigned long, unsigned char
    ok &= sevalue_to_native(args[0], &arg1->maxInstances, nullptr);
    SE_PRECONDITION2(ok, false, "AudioProfile_maxInstances_set,2,SWIGTYPE_unsigned_int");
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_AudioProfile_maxInstances_set) 

static bool js_cc_AudioProfile_maxInstances_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::AudioProfile *arg1 = (cc::AudioProfile *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::AudioProfile>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // out 1
    ok &= nativevalue_to_se(arg1->maxInstances, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_AudioProfile_maxInstances_get) 

static bool js_cc_AudioProfile_minDelay_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::AudioProfile *arg1 = (cc::AudioProfile *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::AudioProfile>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1->minDelay, nullptr);
    SE_PRECONDITION2(ok, false, "AudioProfile_minDelay_set,2,SWIGTYPE_double"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_AudioProfile_minDelay_set) 

static bool js_cc_AudioProfile_minDelay_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::AudioProfile *arg1 = (cc::AudioProfile *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::AudioProfile>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // out 1
    ok &= nativevalue_to_se(arg1->minDelay, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_AudioProfile_minDelay_get) 

// js_ctor
static bool js_new_cc_AudioProfile(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::AudioProfile *result;
    result = (cc::AudioProfile *)new cc::AudioProfile();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_AudioProfile, __jsb_cc_AudioProfile_class, js_delete_cc_AudioProfile)

static bool js_delete_cc_AudioProfile(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_AudioProfile) 

bool js_register_cc_AudioProfile(se::Object* obj) {
    auto* cls = se::Class::create("AudioProfile", obj, nullptr, _SE(js_new_cc_AudioProfile)); 
    
    cls->defineProperty("name", _SE(js_cc_AudioProfile_name_get), _SE(js_cc_AudioProfile_name_set)); 
    cls->defineProperty("maxInstances", _SE(js_cc_AudioProfile_maxInstances_get), _SE(js_cc_AudioProfile_maxInstances_set)); 
    cls->defineProperty("minDelay", _SE(js_cc_AudioProfile_minDelay_get), _SE(js_cc_AudioProfile_minDelay_set)); 
    
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_AudioProfile));
    
    
    cls->install();
    JSBClassType::registerClass<cc::AudioProfile>(cls);
    
    __jsb_cc_AudioProfile_proto = cls->getProto();
    __jsb_cc_AudioProfile_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_AudioEngine_class = nullptr;
se::Object* __jsb_cc_AudioEngine_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_AudioEngine) 

static bool js_cc_AudioEngine_INVALID_AUDIO_ID_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    int result;
    
    result = (int)(int)cc::AudioEngine::INVALID_AUDIO_ID;
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_AudioEngine_INVALID_AUDIO_ID_get) 

static bool js_cc_AudioEngine_TIME_UNKNOWN_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    float result;
    
    result = (float)(float)cc::AudioEngine::TIME_UNKNOWN;
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_AudioEngine_TIME_UNKNOWN_get) 

static bool js_cc_AudioEngine_lazyInit_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    result = (bool)cc::AudioEngine::lazyInit();
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_lazyInit_static) 

static bool js_cc_AudioEngine_end_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    cc::AudioEngine::end();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_end_static) 

static bool js_cc_AudioEngine_getDefaultProfile_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::AudioProfile *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    result = (cc::AudioProfile *)cc::AudioEngine::getDefaultProfile();
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "AudioEngine_getDefaultProfile, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_getDefaultProfile_static) 

static bool js_cc_AudioEngine_play2d_static__SWIG_0(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    ccstd::string *arg1 = 0 ;
    bool arg2 ;
    float arg3 ;
    cc::AudioProfile *arg4 = (cc::AudioProfile *) NULL ;
    ccstd::string temp1 ;
    int result;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp1, s.thisObject());
    SE_PRECONDITION2(ok, false, "AudioEngine_play2d,1,SWIGTYPE_p_ccstd__string");
    arg1 = &temp1;
    
    // %typemap(in) bool
    ok &= sevalue_to_native(args[1], &arg2);
    SE_PRECONDITION2(ok, false, "AudioEngine_play2d,2,SWIGTYPE_bool"); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[2], &arg3, nullptr);
    SE_PRECONDITION2(ok, false, "AudioEngine_play2d,3,SWIGTYPE_float"); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[3], &arg4, s.thisObject());
    SE_PRECONDITION2(ok, false, "AudioEngine_play2d,4,SWIGTYPE_p_cc__AudioProfile"); 
    result = (int)cc::AudioEngine::play2d((ccstd::string const &)*arg1,arg2,arg3,(cc::AudioProfile const *)arg4);
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}

static bool js_cc_AudioEngine_play2d_static__SWIG_1(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    ccstd::string *arg1 = 0 ;
    bool arg2 ;
    float arg3 ;
    ccstd::string temp1 ;
    int result;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp1, s.thisObject());
    SE_PRECONDITION2(ok, false, "AudioEngine_play2d,1,SWIGTYPE_p_ccstd__string");
    arg1 = &temp1;
    
    // %typemap(in) bool
    ok &= sevalue_to_native(args[1], &arg2);
    SE_PRECONDITION2(ok, false, "AudioEngine_play2d,2,SWIGTYPE_bool"); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[2], &arg3, nullptr);
    SE_PRECONDITION2(ok, false, "AudioEngine_play2d,3,SWIGTYPE_float"); 
    result = (int)cc::AudioEngine::play2d((ccstd::string const &)*arg1,arg2,arg3);
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}

static bool js_cc_AudioEngine_play2d_static__SWIG_2(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    ccstd::string *arg1 = 0 ;
    bool arg2 ;
    ccstd::string temp1 ;
    int result;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp1, s.thisObject());
    SE_PRECONDITION2(ok, false, "AudioEngine_play2d,1,SWIGTYPE_p_ccstd__string");
    arg1 = &temp1;
    
    // %typemap(in) bool
    ok &= sevalue_to_native(args[1], &arg2);
    SE_PRECONDITION2(ok, false, "AudioEngine_play2d,2,SWIGTYPE_bool"); 
    result = (int)cc::AudioEngine::play2d((ccstd::string const &)*arg1,arg2);
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}

static bool js_cc_AudioEngine_play2d_static__SWIG_3(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    ccstd::string *arg1 = 0 ;
    ccstd::string temp1 ;
    int result;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp1, s.thisObject());
    SE_PRECONDITION2(ok, false, "AudioEngine_play2d,1,SWIGTYPE_p_ccstd__string");
    arg1 = &temp1;
    
    result = (int)cc::AudioEngine::play2d((ccstd::string const &)*arg1);
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}

static bool js_cc_AudioEngine_play2d_static(se::State& s)
{
    // js_function_dispatcher
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    // js_function_dispatch_case
    if (argc == 4) {
        ok = js_cc_AudioEngine_play2d_static__SWIG_0(s);
        if (ok) {
            return true; 
        }
    } // js_function_dispatch_case
    if (argc == 3) {
        ok = js_cc_AudioEngine_play2d_static__SWIG_1(s);
        if (ok) {
            return true; 
        }
    } // js_function_dispatch_case
    if (argc == 2) {
        ok = js_cc_AudioEngine_play2d_static__SWIG_2(s);
        if (ok) {
            return true; 
        }
    } // js_function_dispatch_case
    if (argc == 1) {
        ok = js_cc_AudioEngine_play2d_static__SWIG_3(s);
        if (ok) {
            return true; 
        }
    } 
    SE_REPORT_ERROR("wrong number of arguments: %d", (int)argc);
    return false;
}
SE_BIND_FUNC(js_cc_AudioEngine_play2d_static) 

static bool js_cc_AudioEngine_setLoop_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    int arg1 ;
    bool arg2 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1, nullptr);
    SE_PRECONDITION2(ok, false, "AudioEngine_setLoop,1,SWIGTYPE_int"); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[1], &arg2);
    SE_PRECONDITION2(ok, false, "AudioEngine_setLoop,2,SWIGTYPE_bool"); 
    cc::AudioEngine::setLoop(arg1,arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_setLoop_static) 

static bool js_cc_AudioEngine_isLoop_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    int arg1 ;
    bool result;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1, nullptr);
    SE_PRECONDITION2(ok, false, "AudioEngine_isLoop,1,SWIGTYPE_int"); 
    result = (bool)cc::AudioEngine::isLoop(arg1);
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_isLoop_static) 

static bool js_cc_AudioEngine_setVolume_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    int arg1 ;
    float arg2 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1, nullptr);
    SE_PRECONDITION2(ok, false, "AudioEngine_setVolume,1,SWIGTYPE_int"); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[1], &arg2, nullptr);
    SE_PRECONDITION2(ok, false, "AudioEngine_setVolume,2,SWIGTYPE_float"); 
    cc::AudioEngine::setVolume(arg1,arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_setVolume_static) 

static bool js_cc_AudioEngine_setVolumeFactor_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    float arg1 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1, nullptr);
    SE_PRECONDITION2(ok, false, "AudioEngine_setVolumeFactor,1,SWIGTYPE_float"); 
    cc::AudioEngine::setVolumeFactor(arg1);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_setVolumeFactor_static) 

static bool js_cc_AudioEngine_getVolume_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    int arg1 ;
    float result;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1, nullptr);
    SE_PRECONDITION2(ok, false, "AudioEngine_getVolume,1,SWIGTYPE_int"); 
    result = (float)cc::AudioEngine::getVolume(arg1);
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_getVolume_static) 

static bool js_cc_AudioEngine_pause_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    int arg1 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1, nullptr);
    SE_PRECONDITION2(ok, false, "AudioEngine_pause,1,SWIGTYPE_int"); 
    cc::AudioEngine::pause(arg1);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_pause_static) 

static bool js_cc_AudioEngine_pauseAll_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    cc::AudioEngine::pauseAll();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_pauseAll_static) 

static bool js_cc_AudioEngine_resume_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    int arg1 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1, nullptr);
    SE_PRECONDITION2(ok, false, "AudioEngine_resume,1,SWIGTYPE_int"); 
    cc::AudioEngine::resume(arg1);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_resume_static) 

static bool js_cc_AudioEngine_resumeAll_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    cc::AudioEngine::resumeAll();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_resumeAll_static) 

static bool js_cc_AudioEngine_stop_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    int arg1 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1, nullptr);
    SE_PRECONDITION2(ok, false, "AudioEngine_stop,1,SWIGTYPE_int"); 
    cc::AudioEngine::stop(arg1);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_stop_static) 

static bool js_cc_AudioEngine_stopAll_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    cc::AudioEngine::stopAll();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_stopAll_static) 

static bool js_cc_AudioEngine_setCurrentTime_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    int arg1 ;
    float arg2 ;
    bool result;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1, nullptr);
    SE_PRECONDITION2(ok, false, "AudioEngine_setCurrentTime,1,SWIGTYPE_int"); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[1], &arg2, nullptr);
    SE_PRECONDITION2(ok, false, "AudioEngine_setCurrentTime,2,SWIGTYPE_float"); 
    result = (bool)cc::AudioEngine::setCurrentTime(arg1,arg2);
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_setCurrentTime_static) 

static bool js_cc_AudioEngine_getCurrentTime_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    int arg1 ;
    float result;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1, nullptr);
    SE_PRECONDITION2(ok, false, "AudioEngine_getCurrentTime,1,SWIGTYPE_int"); 
    result = (float)cc::AudioEngine::getCurrentTime(arg1);
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_getCurrentTime_static) 

static bool js_cc_AudioEngine_getDuration_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    int arg1 ;
    float result;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1, nullptr);
    SE_PRECONDITION2(ok, false, "AudioEngine_getDuration,1,SWIGTYPE_int"); 
    result = (float)cc::AudioEngine::getDuration(arg1);
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_getDuration_static) 

static bool js_cc_AudioEngine_getDurationFromFile_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    ccstd::string *arg1 = 0 ;
    ccstd::string temp1 ;
    float result;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp1, s.thisObject());
    SE_PRECONDITION2(ok, false, "AudioEngine_getDurationFromFile,1,SWIGTYPE_p_ccstd__string");
    arg1 = &temp1;
    
    result = (float)cc::AudioEngine::getDurationFromFile((ccstd::string const &)*arg1);
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_getDurationFromFile_static) 

static bool js_cc_AudioEngine_getState_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    int arg1 ;
    cc::AudioEngine::AudioState result;
    int32_t temp ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1, nullptr);
    SE_PRECONDITION2(ok, false, "AudioEngine_getState,1,SWIGTYPE_int"); 
    result = (cc::AudioEngine::AudioState)cc::AudioEngine::getState(arg1);
    // out 4
    s.rval().setInt32(static_cast<int32_t>(result));
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_getState_static) 

static bool js_cc_AudioEngine_setFinishCallback_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    int arg1 ;
    std::function< void (int,ccstd::string const &) > *arg2 = 0 ;
    std::function< void (int,ccstd::string const &) > temp2 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1, nullptr);
    SE_PRECONDITION2(ok, false, "AudioEngine_setFinishCallback,1,SWIGTYPE_int"); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[1], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "AudioEngine_setFinishCallback,2,SWIGTYPE_p_std__functionT_void_fint_ccstd__string_const_RF_t");
    arg2 = &temp2;
    
    cc::AudioEngine::setFinishCallback(arg1,(std::function< void (int,ccstd::string const &) > const &)*arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_setFinishCallback_static) 

static bool js_cc_AudioEngine_getMaxAudioInstance_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    int result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    result = (int)cc::AudioEngine::getMaxAudioInstance();
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_getMaxAudioInstance_static) 

static bool js_cc_AudioEngine_setMaxAudioInstance_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    int arg1 ;
    bool result;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1, nullptr);
    SE_PRECONDITION2(ok, false, "AudioEngine_setMaxAudioInstance,1,SWIGTYPE_int"); 
    result = (bool)cc::AudioEngine::setMaxAudioInstance(arg1);
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_setMaxAudioInstance_static) 

static bool js_cc_AudioEngine_uncache_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    ccstd::string *arg1 = 0 ;
    ccstd::string temp1 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp1, s.thisObject());
    SE_PRECONDITION2(ok, false, "AudioEngine_uncache,1,SWIGTYPE_p_ccstd__string");
    arg1 = &temp1;
    
    cc::AudioEngine::uncache((ccstd::string const &)*arg1);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_uncache_static) 

static bool js_cc_AudioEngine_uncacheAll_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    cc::AudioEngine::uncacheAll();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_uncacheAll_static) 

static bool js_cc_AudioEngine_getProfile_static__SWIG_0(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    int arg1 ;
    cc::AudioProfile *result = 0 ;
    
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1, nullptr);
    SE_PRECONDITION2(ok, false, "AudioEngine_getProfile,1,SWIGTYPE_int"); 
    result = (cc::AudioProfile *)cc::AudioEngine::getProfile(arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "AudioEngine_getProfile, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}

static bool js_cc_AudioEngine_getProfile_static__SWIG_1(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    ccstd::string *arg1 = 0 ;
    ccstd::string temp1 ;
    cc::AudioProfile *result = 0 ;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp1, s.thisObject());
    SE_PRECONDITION2(ok, false, "AudioEngine_getProfile,1,SWIGTYPE_p_ccstd__string");
    arg1 = &temp1;
    
    result = (cc::AudioProfile *)cc::AudioEngine::getProfile((ccstd::string const &)*arg1);
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "AudioEngine_getProfile, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}

static bool js_cc_AudioEngine_getProfile_static(se::State& s)
{
    // js_function_dispatcher
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    // js_function_dispatch_case
    if (argc == 1) {
        ok = js_cc_AudioEngine_getProfile_static__SWIG_0(s);
        if (ok) {
            return true; 
        }
    } // js_function_dispatch_case
    if (argc == 1) {
        ok = js_cc_AudioEngine_getProfile_static__SWIG_1(s);
        if (ok) {
            return true; 
        }
    } 
    SE_REPORT_ERROR("wrong number of arguments: %d", (int)argc);
    return false;
}
SE_BIND_FUNC(js_cc_AudioEngine_getProfile_static) 

static bool js_cc_AudioEngine_preload_static__SWIG_0(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    ccstd::string *arg1 = 0 ;
    ccstd::string temp1 ;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp1, s.thisObject());
    SE_PRECONDITION2(ok, false, "AudioEngine_preload,1,SWIGTYPE_p_ccstd__string");
    arg1 = &temp1;
    
    cc::AudioEngine::preload((ccstd::string const &)*arg1);
    
    
    return true;
}

static bool js_cc_AudioEngine_preload_static__SWIG_1(se::State& s)
{
    // js_overloaded_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    ccstd::string *arg1 = 0 ;
    std::function< void (bool) > *arg2 = 0 ;
    ccstd::string temp1 ;
    std::function< void (bool) > temp2 ;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp1, s.thisObject());
    SE_PRECONDITION2(ok, false, "AudioEngine_preload,1,SWIGTYPE_p_ccstd__string");
    arg1 = &temp1;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[1], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "AudioEngine_preload,2,SWIGTYPE_p_std__functionT_void_fboolF_t");
    arg2 = &temp2;
    
    cc::AudioEngine::preload((ccstd::string const &)*arg1,(std::function< void (bool) > const &)*arg2);
    
    
    return true;
}

static bool js_cc_AudioEngine_preload_static(se::State& s)
{
    // js_function_dispatcher
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    // js_function_dispatch_case
    if (argc == 1) {
        ok = js_cc_AudioEngine_preload_static__SWIG_0(s);
        if (ok) {
            return true; 
        }
    } // js_function_dispatch_case
    if (argc == 2) {
        ok = js_cc_AudioEngine_preload_static__SWIG_1(s);
        if (ok) {
            return true; 
        }
    } 
    SE_REPORT_ERROR("wrong number of arguments: %d", (int)argc);
    return false;
}
SE_BIND_FUNC(js_cc_AudioEngine_preload_static) 

static bool js_cc_AudioEngine_getPlayingAudioCount_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    int result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    result = (int)cc::AudioEngine::getPlayingAudioCount();
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_getPlayingAudioCount_static) 

static bool js_cc_AudioEngine_setEnabled_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    bool arg1 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg1);
    SE_PRECONDITION2(ok, false, "AudioEngine_setEnabled,1,SWIGTYPE_bool"); 
    cc::AudioEngine::setEnabled(arg1);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_setEnabled_static) 

static bool js_cc_AudioEngine_isEnabled_static(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    result = (bool)cc::AudioEngine::isEnabled();
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_AudioEngine_isEnabled_static) 

// js_ctor
static bool js_new_cc_AudioEngine(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::AudioEngine *result;
    result = (cc::AudioEngine *)new cc::AudioEngine();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_AudioEngine, __jsb_cc_AudioEngine_class, js_delete_cc_AudioEngine)

static bool js_delete_cc_AudioEngine(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_AudioEngine) 

bool js_register_cc_AudioEngine(se::Object* obj) {
    auto* cls = se::Class::create("AudioEngine", obj, nullptr, _SE(js_new_cc_AudioEngine)); 
    
    
    
    cls->defineStaticProperty("INVALID_AUDIO_ID", _SE(js_cc_AudioEngine_INVALID_AUDIO_ID_get), nullptr); 
    cls->defineStaticProperty("TIME_UNKNOWN", _SE(js_cc_AudioEngine_TIME_UNKNOWN_get), nullptr); 
    
    cls->defineStaticFunction("lazyInit", _SE(js_cc_AudioEngine_lazyInit_static)); 
    cls->defineStaticFunction("end", _SE(js_cc_AudioEngine_end_static)); 
    cls->defineStaticFunction("getDefaultProfile", _SE(js_cc_AudioEngine_getDefaultProfile_static)); 
    cls->defineStaticFunction("play2d", _SE(js_cc_AudioEngine_play2d_static)); 
    cls->defineStaticFunction("setLoop", _SE(js_cc_AudioEngine_setLoop_static)); 
    cls->defineStaticFunction("isLoop", _SE(js_cc_AudioEngine_isLoop_static)); 
    cls->defineStaticFunction("setVolume", _SE(js_cc_AudioEngine_setVolume_static)); 
    cls->defineStaticFunction("setVolumeFactor", _SE(js_cc_AudioEngine_setVolumeFactor_static)); 
    cls->defineStaticFunction("getVolume", _SE(js_cc_AudioEngine_getVolume_static)); 
    cls->defineStaticFunction("pause", _SE(js_cc_AudioEngine_pause_static)); 
    cls->defineStaticFunction("pauseAll", _SE(js_cc_AudioEngine_pauseAll_static)); 
    cls->defineStaticFunction("resume", _SE(js_cc_AudioEngine_resume_static)); 
    cls->defineStaticFunction("resumeAll", _SE(js_cc_AudioEngine_resumeAll_static)); 
    cls->defineStaticFunction("stop", _SE(js_cc_AudioEngine_stop_static)); 
    cls->defineStaticFunction("stopAll", _SE(js_cc_AudioEngine_stopAll_static)); 
    cls->defineStaticFunction("setCurrentTime", _SE(js_cc_AudioEngine_setCurrentTime_static)); 
    cls->defineStaticFunction("getCurrentTime", _SE(js_cc_AudioEngine_getCurrentTime_static)); 
    cls->defineStaticFunction("getDuration", _SE(js_cc_AudioEngine_getDuration_static)); 
    cls->defineStaticFunction("getDurationFromFile", _SE(js_cc_AudioEngine_getDurationFromFile_static)); 
    cls->defineStaticFunction("getState", _SE(js_cc_AudioEngine_getState_static)); 
    cls->defineStaticFunction("setFinishCallback", _SE(js_cc_AudioEngine_setFinishCallback_static)); 
    cls->defineStaticFunction("getMaxAudioInstance", _SE(js_cc_AudioEngine_getMaxAudioInstance_static)); 
    cls->defineStaticFunction("setMaxAudioInstance", _SE(js_cc_AudioEngine_setMaxAudioInstance_static)); 
    cls->defineStaticFunction("uncache", _SE(js_cc_AudioEngine_uncache_static)); 
    cls->defineStaticFunction("uncacheAll", _SE(js_cc_AudioEngine_uncacheAll_static)); 
    cls->defineStaticFunction("getProfile", _SE(js_cc_AudioEngine_getProfile_static)); 
    cls->defineStaticFunction("preload", _SE(js_cc_AudioEngine_preload_static)); 
    cls->defineStaticFunction("getPlayingAudioCount", _SE(js_cc_AudioEngine_getPlayingAudioCount_static)); 
    cls->defineStaticFunction("setEnabled", _SE(js_cc_AudioEngine_setEnabled_static)); 
    cls->defineStaticFunction("isEnabled", _SE(js_cc_AudioEngine_isEnabled_static)); 
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_AudioEngine));
    
    
    cls->install();
    JSBClassType::registerClass<cc::AudioEngine>(cls);
    
    __jsb_cc_AudioEngine_proto = cls->getProto();
    __jsb_cc_AudioEngine_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}




bool register_all_audio(se::Object* obj) {
    // Get the ns
    se::Value nsVal;
    if (!obj->getProperty("jsb", &nsVal, true))
    {
        se::HandleObject jsobj(se::Object::createPlainObject());
        nsVal.setObject(jsobj);
        obj->setProperty("jsb", nsVal);
    }
    se::Object* ns = nsVal.toObject();
    /* Register classes */
    js_register_cc_AudioProfile(ns); 
    js_register_cc_AudioEngine(ns); 
    
    /* Register global variables & global functions */
    
    
    
    return true;
}

// clang-format on
