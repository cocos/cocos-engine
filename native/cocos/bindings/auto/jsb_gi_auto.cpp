// clang-format off

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/****************************************************************************
 Copyright (c) 2022 Xiamen Yaji Software Co., Ltd.

 http://www.cocos.com

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
 worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
 not use Cocos Creator software for developing other software or tools that's
 used for developing games. You are not granted to publish, distribute,
 sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
****************************************************************************/

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-variable"
#elif defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-variable"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable : 4101)
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static 
#endif



#include <stdio.h>


#include "bindings/jswrapper/SeApi.h"
#include "bindings/manual/jsb_conversions.h"
#include "bindings/manual/jsb_global.h"


#include "bindings/auto/jsb_gi_auto.h"

using namespace cc;
using namespace cc::gi;


#define cc_gi_LightProbesData_probes_get(self_) self_->getProbes()
#define cc_gi_LightProbesData_probes_set(self_, val_) self_->setProbes(val_)
  

#define cc_gi_LightProbesData_tetrahedrons_get(self_) self_->getTetrahedrons()
#define cc_gi_LightProbesData_tetrahedrons_set(self_, val_) self_->setTetrahedrons(val_)
  

#define cc_gi_LightProbes_enabled_get(self_) self_->isEnabled()
#define cc_gi_LightProbes_enabled_set(self_, val_) self_->setEnabled(val_)
  

#define cc_gi_LightProbes_GIScale_get(self_) self_->getGIScale()
#define cc_gi_LightProbes_GIScale_set(self_, val_) self_->setGIScale(val_)
  

#define cc_gi_LightProbes_GISamples_get(self_) self_->getGISamples()
#define cc_gi_LightProbes_GISamples_set(self_, val_) self_->setGISamples(val_)
  

#define cc_gi_LightProbes_Bounces_get(self_) self_->getBounces()
#define cc_gi_LightProbes_Bounces_set(self_, val_) self_->setBounces(val_)
  

#define cc_gi_LightProbes_reduceRinging_get(self_) self_->getReduceRinging()
#define cc_gi_LightProbes_reduceRinging_set(self_, val_) self_->setReduceRinging(val_)
  

#define cc_gi_LightProbes_showProbe_get(self_) self_->isShowProbe()
#define cc_gi_LightProbes_showProbe_set(self_, val_) self_->setShowProbe(val_)
  

#define cc_gi_LightProbes_showWireframe_get(self_) self_->isShowWireframe()
#define cc_gi_LightProbes_showWireframe_set(self_, val_) self_->setShowWireframe(val_)
  

#define cc_gi_LightProbes_showConvex_get(self_) self_->isShowConvex()
#define cc_gi_LightProbes_showConvex_set(self_, val_) self_->setShowConvex(val_)
  

#define cc_gi_LightProbes_data_get(self_) self_->getData()
#define cc_gi_LightProbes_data_set(self_, val_) self_->setData(val_)
  

#define cc_gi_LightProbeInfo_enabled_get(self_) self_->isEnabled()
#define cc_gi_LightProbeInfo_enabled_set(self_, val_) self_->setEnabled(val_)
  

#define cc_gi_LightProbeInfo_GIScale_get(self_) self_->getGIScale()
#define cc_gi_LightProbeInfo_GIScale_set(self_, val_) self_->setGIScale(val_)
  

#define cc_gi_LightProbeInfo_GISamples_get(self_) self_->getGISamples()
#define cc_gi_LightProbeInfo_GISamples_set(self_, val_) self_->setGISamples(val_)
  

#define cc_gi_LightProbeInfo_Bounces_get(self_) self_->getBounces()
#define cc_gi_LightProbeInfo_Bounces_set(self_, val_) self_->setBounces(val_)
  

#define cc_gi_LightProbeInfo_reduceRinging_get(self_) self_->getReduceRinging()
#define cc_gi_LightProbeInfo_reduceRinging_set(self_, val_) self_->setReduceRinging(val_)
  

#define cc_gi_LightProbeInfo_showProbe_get(self_) self_->isShowProbe()
#define cc_gi_LightProbeInfo_showProbe_set(self_, val_) self_->setShowProbe(val_)
  

#define cc_gi_LightProbeInfo_showWireframe_get(self_) self_->isShowWireframe()
#define cc_gi_LightProbeInfo_showWireframe_set(self_, val_) self_->setShowWireframe(val_)
  

#define cc_gi_LightProbeInfo_showConvex_get(self_) self_->isShowConvex()
#define cc_gi_LightProbeInfo_showConvex_set(self_, val_) self_->setShowConvex(val_)
  

#define cc_gi_LightProbeInfo_data_get(self_) self_->getData()
#define cc_gi_LightProbeInfo_data_set(self_, val_) self_->setData(val_)
  


se::Class* __jsb_cc_gi_Vertex_class = nullptr;
se::Object* __jsb_cc_gi_Vertex_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_gi_Vertex) 

static bool js_cc_gi_Vertex_position_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::Vertex *arg1 = (cc::gi::Vertex *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Vertex>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->position, s.thisObject());
    SE_PRECONDITION2(ok, false, "Vertex_position_set,2,SWIGTYPE_Vec3"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_Vertex_position_set) 

static bool js_cc_gi_Vertex_position_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::Vertex *arg1 = (cc::gi::Vertex *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Vertex>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->position, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Vertex_position_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->position, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_Vertex_position_get) 

static bool js_cc_gi_Vertex_normal_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::Vertex *arg1 = (cc::gi::Vertex *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Vertex>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->normal, s.thisObject());
    SE_PRECONDITION2(ok, false, "Vertex_normal_set,2,SWIGTYPE_Vec3"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_Vertex_normal_set) 

static bool js_cc_gi_Vertex_normal_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::Vertex *arg1 = (cc::gi::Vertex *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Vertex>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->normal, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Vertex_normal_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->normal, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_Vertex_normal_get) 

static bool js_cc_gi_Vertex_coefficients_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::Vertex *arg1 = (cc::gi::Vertex *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Vertex>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->coefficients, s.thisObject());
    SE_PRECONDITION2(ok, false, "Vertex_coefficients_set,2,SWIGTYPE_ccstd__vectorT_Vec3_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_Vertex_coefficients_set) 

static bool js_cc_gi_Vertex_coefficients_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::Vertex *arg1 = (cc::gi::Vertex *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Vertex>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->coefficients, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Vertex_coefficients_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->coefficients, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_Vertex_coefficients_get) 

static bool js_new_cc_gi_Vertex__SWIG_0(se::State& s) // NOLINT(readability-identifier-naming)
{
    // js_overloaded_ctor
    const auto& args = s.args();
    CC_UNUSED bool ok = true;
    cc::gi::Vertex *result;
    result = (cc::gi::Vertex *)new cc::gi::Vertex();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}


static bool js_new_cc_gi_Vertex__SWIG_1(se::State& s) // NOLINT(readability-identifier-naming)
{
    // js_overloaded_ctor
    const auto& args = s.args();
    CC_UNUSED bool ok = true;
    Vec3 *arg1 = 0 ;
    Vec3 temp1 ;
    cc::gi::Vertex *result;
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp1, s.thisObject());
    SE_PRECONDITION2(ok, false, "new_Vertex,1,SWIGTYPE_p_Vec3");
    arg1 = &temp1;
    
    result = (cc::gi::Vertex *)new cc::gi::Vertex((Vec3 const &)*arg1);
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}


static bool js_new_Vertex(se::State& s) // NOLINT(readability-identifier-naming)
{
    // js_ctor_dispatcher
    size_t argc = s.args().size();
    bool ret = false;
    
    // switch all cases by means of series of if-returns.
    
    // js_ctor_dispatch_case
    if(argc == 0) {
        ret = js_new_cc_gi_Vertex__SWIG_0(s);
        if (ret) {
            return ret; 
        } /* reset exception and return */
    }
    
    // js_ctor_dispatch_case
    if(argc == 1) {
        ret = js_new_cc_gi_Vertex__SWIG_1(s);
        if (ret) {
            return ret; 
        } /* reset exception and return */
    }
    
    
    // default:
    SE_REPORT_ERROR("Illegal arguments for construction of Vertex");
    return false;
}
SE_BIND_CTOR(js_new_Vertex, __jsb_cc_gi_Vertex_class, js_delete_cc_gi_Vertex)

static bool js_delete_cc_gi_Vertex(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_gi_Vertex) 

template<>
bool sevalue_to_native(const se::Value &from, cc::gi::Vertex * to, se::Object *ctx)
{
    assert(from.isObject());
    se::Object *json = from.toObject();
    auto* data = reinterpret_cast<cc::gi::Vertex*>(json->getPrivateData());
    if (data) {
        *to = *data;
        return true;
    }
    se::Value field;
    bool ok = true;
    
    json->getProperty("position", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->position), ctx);
    }
    
    
    json->getProperty("normal", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->normal), ctx);
    }
    
    
    json->getProperty("coefficients", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->coefficients), ctx);
    }
    
    
    return ok;
}


bool js_register_cc_gi_Vertex(se::Object* obj) {
    auto* cls = se::Class::create("Vertex", obj, nullptr, _SE(js_new_Vertex)); 
    
    cls->defineProperty("position", _SE(js_cc_gi_Vertex_position_get), _SE(js_cc_gi_Vertex_position_set)); 
    cls->defineProperty("normal", _SE(js_cc_gi_Vertex_normal_get), _SE(js_cc_gi_Vertex_normal_set)); 
    cls->defineProperty("coefficients", _SE(js_cc_gi_Vertex_coefficients_get), _SE(js_cc_gi_Vertex_coefficients_set)); 
    
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_gi_Vertex));
    
    
    cls->install();
    JSBClassType::registerClass<cc::gi::Vertex>(cls);
    
    __jsb_cc_gi_Vertex_proto = cls->getProto();
    __jsb_cc_gi_Vertex_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_gi_CircumSphere_class = nullptr;
se::Object* __jsb_cc_gi_CircumSphere_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_gi_CircumSphere) 

static bool js_cc_gi_CircumSphere_center_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::CircumSphere *arg1 = (cc::gi::CircumSphere *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::CircumSphere>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->center, s.thisObject());
    SE_PRECONDITION2(ok, false, "CircumSphere_center_set,2,SWIGTYPE_Vec3"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_CircumSphere_center_set) 

static bool js_cc_gi_CircumSphere_center_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::CircumSphere *arg1 = (cc::gi::CircumSphere *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::CircumSphere>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->center, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "CircumSphere_center_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->center, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_CircumSphere_center_get) 

static bool js_cc_gi_CircumSphere_radiusSquared_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::CircumSphere *arg1 = (cc::gi::CircumSphere *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::CircumSphere>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1->radiusSquared, nullptr);
    SE_PRECONDITION2(ok, false, "CircumSphere_radiusSquared_set,2,SWIGTYPE_float"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_CircumSphere_radiusSquared_set) 

static bool js_cc_gi_CircumSphere_radiusSquared_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::CircumSphere *arg1 = (cc::gi::CircumSphere *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::CircumSphere>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // out 1
    ok &= nativevalue_to_se(arg1->radiusSquared, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_CircumSphere_radiusSquared_get) 

// js_ctor
static bool js_new_cc_gi_CircumSphere(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::gi::CircumSphere *result;
    result = (cc::gi::CircumSphere *)new cc::gi::CircumSphere();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_gi_CircumSphere, __jsb_cc_gi_CircumSphere_class, js_delete_cc_gi_CircumSphere)

static bool js_cc_gi_CircumSphere_init(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::CircumSphere *arg1 = (cc::gi::CircumSphere *) NULL ;
    Vec3 *arg2 = 0 ;
    Vec3 *arg3 = 0 ;
    Vec3 *arg4 = 0 ;
    Vec3 *arg5 = 0 ;
    Vec3 temp2 ;
    Vec3 temp3 ;
    Vec3 temp4 ;
    Vec3 temp5 ;
    
    if(argc != 4) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 4);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::gi::CircumSphere>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "CircumSphere_init,2,SWIGTYPE_p_Vec3");
    arg2 = &temp2;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "CircumSphere_init,3,SWIGTYPE_p_Vec3");
    arg3 = &temp3;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[2], &temp4, s.thisObject());
    SE_PRECONDITION2(ok, false, "CircumSphere_init,4,SWIGTYPE_p_Vec3");
    arg4 = &temp4;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[3], &temp5, s.thisObject());
    SE_PRECONDITION2(ok, false, "CircumSphere_init,5,SWIGTYPE_p_Vec3");
    arg5 = &temp5;
    
    (arg1)->init((Vec3 const &)*arg2,(Vec3 const &)*arg3,(Vec3 const &)*arg4,(Vec3 const &)*arg5);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_gi_CircumSphere_init) 

static bool js_delete_cc_gi_CircumSphere(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_gi_CircumSphere) 

template<>
bool sevalue_to_native(const se::Value &from, cc::gi::CircumSphere * to, se::Object *ctx)
{
    assert(from.isObject());
    se::Object *json = from.toObject();
    auto* data = reinterpret_cast<cc::gi::CircumSphere*>(json->getPrivateData());
    if (data) {
        *to = *data;
        return true;
    }
    se::Value field;
    bool ok = true;
    
    json->getProperty("center", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->center), ctx);
    }
    
    
    json->getProperty("radiusSquared", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->radiusSquared), ctx);
    }
    
    
    return ok;
}


bool js_register_cc_gi_CircumSphere(se::Object* obj) {
    auto* cls = se::Class::create("CircumSphere", obj, nullptr, _SE(js_new_cc_gi_CircumSphere)); 
    
    cls->defineProperty("center", _SE(js_cc_gi_CircumSphere_center_get), _SE(js_cc_gi_CircumSphere_center_set)); 
    cls->defineProperty("radiusSquared", _SE(js_cc_gi_CircumSphere_radiusSquared_get), _SE(js_cc_gi_CircumSphere_radiusSquared_set)); 
    
    cls->defineFunction("init", _SE(js_cc_gi_CircumSphere_init)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_gi_CircumSphere));
    
    
    cls->install();
    JSBClassType::registerClass<cc::gi::CircumSphere>(cls);
    
    __jsb_cc_gi_CircumSphere_proto = cls->getProto();
    __jsb_cc_gi_CircumSphere_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_gi_Tetrahedron_class = nullptr;
se::Object* __jsb_cc_gi_Tetrahedron_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_gi_Tetrahedron) 

static bool js_cc_gi_Tetrahedron_invalid_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg1->invalid);
    SE_PRECONDITION2(ok, false, "Tetrahedron_invalid_set,2,SWIGTYPE_bool"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_Tetrahedron_invalid_set) 

static bool js_cc_gi_Tetrahedron_invalid_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // out 5
    ok &= nativevalue_to_se(arg1->invalid, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_Tetrahedron_invalid_get) 

static bool js_cc_gi_Tetrahedron_vertex0_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->vertex0, s.thisObject());
    SE_PRECONDITION2(ok, false, "Tetrahedron_vertex0_set,2,SWIGTYPE_int32_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_Tetrahedron_vertex0_set) 

static bool js_cc_gi_Tetrahedron_vertex0_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->vertex0, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Tetrahedron_vertex0_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->vertex0, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_Tetrahedron_vertex0_get) 

static bool js_cc_gi_Tetrahedron_vertex1_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->vertex1, s.thisObject());
    SE_PRECONDITION2(ok, false, "Tetrahedron_vertex1_set,2,SWIGTYPE_int32_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_Tetrahedron_vertex1_set) 

static bool js_cc_gi_Tetrahedron_vertex1_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->vertex1, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Tetrahedron_vertex1_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->vertex1, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_Tetrahedron_vertex1_get) 

static bool js_cc_gi_Tetrahedron_vertex2_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->vertex2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Tetrahedron_vertex2_set,2,SWIGTYPE_int32_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_Tetrahedron_vertex2_set) 

static bool js_cc_gi_Tetrahedron_vertex2_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->vertex2, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Tetrahedron_vertex2_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->vertex2, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_Tetrahedron_vertex2_get) 

static bool js_cc_gi_Tetrahedron_vertex3_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->vertex3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Tetrahedron_vertex3_set,2,SWIGTYPE_int32_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_Tetrahedron_vertex3_set) 

static bool js_cc_gi_Tetrahedron_vertex3_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->vertex3, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Tetrahedron_vertex3_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->vertex3, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_Tetrahedron_vertex3_get) 

static bool js_cc_gi_Tetrahedron_neighbours_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->neighbours, s.thisObject());
    SE_PRECONDITION2(ok, false, "Tetrahedron_neighbours_set,2,SWIGTYPE_ccstd__arrayT_int32_t_4_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_Tetrahedron_neighbours_set) 

static bool js_cc_gi_Tetrahedron_neighbours_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->neighbours, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Tetrahedron_neighbours_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->neighbours, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_Tetrahedron_neighbours_get) 

static bool js_cc_gi_Tetrahedron_matrix_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->matrix, s.thisObject());
    SE_PRECONDITION2(ok, false, "Tetrahedron_matrix_set,2,SWIGTYPE_Mat3"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_Tetrahedron_matrix_set) 

static bool js_cc_gi_Tetrahedron_matrix_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->matrix, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Tetrahedron_matrix_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->matrix, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_Tetrahedron_matrix_get) 

static bool js_cc_gi_Tetrahedron_offset_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->offset, s.thisObject());
    SE_PRECONDITION2(ok, false, "Tetrahedron_offset_set,2,SWIGTYPE_Vec3"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_Tetrahedron_offset_set) 

static bool js_cc_gi_Tetrahedron_offset_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->offset, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Tetrahedron_offset_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->offset, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_Tetrahedron_offset_get) 

static bool js_cc_gi_Tetrahedron_sphere_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->sphere, s.thisObject());
    SE_PRECONDITION2(ok, false, "Tetrahedron_sphere_set,2,SWIGTYPE_cc__gi__CircumSphere"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_Tetrahedron_sphere_set) 

static bool js_cc_gi_Tetrahedron_sphere_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->sphere, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Tetrahedron_sphere_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->sphere, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_Tetrahedron_sphere_get) 

static bool js_new_cc_gi_Tetrahedron__SWIG_0(se::State& s) // NOLINT(readability-identifier-naming)
{
    // js_overloaded_ctor
    const auto& args = s.args();
    CC_UNUSED bool ok = true;
    cc::gi::Delaunay *arg1 = (cc::gi::Delaunay *) NULL ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    int32_t arg5 ;
    cc::gi::Tetrahedron *result;
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg1, s.thisObject());
    SE_PRECONDITION2(ok, false, "new_Tetrahedron,1,SWIGTYPE_p_cc__gi__Delaunay"); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "new_Tetrahedron,2,SWIGTYPE_int32_t"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[2], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "new_Tetrahedron,3,SWIGTYPE_int32_t"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[3], &arg4, s.thisObject());
    SE_PRECONDITION2(ok, false, "new_Tetrahedron,4,SWIGTYPE_int32_t"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[4], &arg5, s.thisObject());
    SE_PRECONDITION2(ok, false, "new_Tetrahedron,5,SWIGTYPE_int32_t"); 
    
    result = (cc::gi::Tetrahedron *)new cc::gi::Tetrahedron((cc::gi::Delaunay const *)arg1,arg2,arg3,arg4,arg5);
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}


static bool js_new_cc_gi_Tetrahedron__SWIG_1(se::State& s) // NOLINT(readability-identifier-naming)
{
    // js_overloaded_ctor
    const auto& args = s.args();
    CC_UNUSED bool ok = true;
    cc::gi::Delaunay *arg1 = (cc::gi::Delaunay *) NULL ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    cc::gi::Tetrahedron *result;
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg1, s.thisObject());
    SE_PRECONDITION2(ok, false, "new_Tetrahedron,1,SWIGTYPE_p_cc__gi__Delaunay"); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "new_Tetrahedron,2,SWIGTYPE_int32_t"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[2], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "new_Tetrahedron,3,SWIGTYPE_int32_t"); 
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[3], &arg4, s.thisObject());
    SE_PRECONDITION2(ok, false, "new_Tetrahedron,4,SWIGTYPE_int32_t"); 
    
    result = (cc::gi::Tetrahedron *)new cc::gi::Tetrahedron((cc::gi::Delaunay const *)arg1,arg2,arg3,arg4);
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}


static bool js_new_cc_gi_Tetrahedron__SWIG_2(se::State& s) // NOLINT(readability-identifier-naming)
{
    // js_overloaded_ctor
    const auto& args = s.args();
    CC_UNUSED bool ok = true;
    cc::gi::Tetrahedron *result;
    result = (cc::gi::Tetrahedron *)new cc::gi::Tetrahedron();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}


static bool js_new_Tetrahedron(se::State& s) // NOLINT(readability-identifier-naming)
{
    // js_ctor_dispatcher
    size_t argc = s.args().size();
    bool ret = false;
    
    // switch all cases by means of series of if-returns.
    
    // js_ctor_dispatch_case
    if(argc == 5) {
        ret = js_new_cc_gi_Tetrahedron__SWIG_0(s);
        if (ret) {
            return ret; 
        } /* reset exception and return */
    }
    
    // js_ctor_dispatch_case
    if(argc == 4) {
        ret = js_new_cc_gi_Tetrahedron__SWIG_1(s);
        if (ret) {
            return ret; 
        } /* reset exception and return */
    }
    
    // js_ctor_dispatch_case
    if(argc == 0) {
        ret = js_new_cc_gi_Tetrahedron__SWIG_2(s);
        if (ret) {
            return ret; 
        } /* reset exception and return */
    }
    
    
    // default:
    SE_REPORT_ERROR("Illegal arguments for construction of Tetrahedron");
    return false;
}
SE_BIND_CTOR(js_new_Tetrahedron, __jsb_cc_gi_Tetrahedron_class, js_delete_cc_gi_Tetrahedron)

static bool js_cc_gi_Tetrahedron_isInCircumSphere(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    Vec3 *arg2 = 0 ;
    Vec3 temp2 ;
    bool result;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Tetrahedron_isInCircumSphere,2,SWIGTYPE_p_Vec3");
    arg2 = &temp2;
    
    result = (bool)((cc::gi::Tetrahedron const *)arg1)->isInCircumSphere((Vec3 const &)*arg2);
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_gi_Tetrahedron_isInCircumSphere) 

static bool js_cc_gi_Tetrahedron_contain(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    int32_t arg2 ;
    bool result;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Tetrahedron_contain,2,SWIGTYPE_int32_t"); 
    
    result = (bool)((cc::gi::Tetrahedron const *)arg1)->contain(arg2);
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_gi_Tetrahedron_contain) 

static bool js_cc_gi_Tetrahedron_isInnerTetrahedron(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)((cc::gi::Tetrahedron const *)arg1)->isInnerTetrahedron();
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_gi_Tetrahedron_isInnerTetrahedron) 

static bool js_cc_gi_Tetrahedron_isOuterCell(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::Tetrahedron *arg1 = (cc::gi::Tetrahedron *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::gi::Tetrahedron>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)((cc::gi::Tetrahedron const *)arg1)->isOuterCell();
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_gi_Tetrahedron_isOuterCell) 

static bool js_delete_cc_gi_Tetrahedron(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_gi_Tetrahedron) 

template<>
bool sevalue_to_native(const se::Value &from, cc::gi::Tetrahedron * to, se::Object *ctx)
{
    assert(from.isObject());
    se::Object *json = from.toObject();
    auto* data = reinterpret_cast<cc::gi::Tetrahedron*>(json->getPrivateData());
    if (data) {
        *to = *data;
        return true;
    }
    se::Value field;
    bool ok = true;
    
    json->getProperty("invalid", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->invalid), ctx);
    }
    
    
    json->getProperty("vertex0", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->vertex0), ctx);
    }
    
    
    json->getProperty("vertex1", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->vertex1), ctx);
    }
    
    
    json->getProperty("vertex2", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->vertex2), ctx);
    }
    
    
    json->getProperty("vertex3", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->vertex3), ctx);
    }
    
    
    json->getProperty("neighbours", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->neighbours), ctx);
    }
    
    
    json->getProperty("matrix", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->matrix), ctx);
    }
    
    
    json->getProperty("offset", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->offset), ctx);
    }
    
    
    json->getProperty("sphere", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->sphere), ctx);
    }
    
    
    return ok;
}


bool js_register_cc_gi_Tetrahedron(se::Object* obj) {
    auto* cls = se::Class::create("Tetrahedron", obj, nullptr, _SE(js_new_Tetrahedron)); 
    
    cls->defineProperty("invalid", _SE(js_cc_gi_Tetrahedron_invalid_get), _SE(js_cc_gi_Tetrahedron_invalid_set)); 
    cls->defineProperty("vertex0", _SE(js_cc_gi_Tetrahedron_vertex0_get), _SE(js_cc_gi_Tetrahedron_vertex0_set)); 
    cls->defineProperty("vertex1", _SE(js_cc_gi_Tetrahedron_vertex1_get), _SE(js_cc_gi_Tetrahedron_vertex1_set)); 
    cls->defineProperty("vertex2", _SE(js_cc_gi_Tetrahedron_vertex2_get), _SE(js_cc_gi_Tetrahedron_vertex2_set)); 
    cls->defineProperty("vertex3", _SE(js_cc_gi_Tetrahedron_vertex3_get), _SE(js_cc_gi_Tetrahedron_vertex3_set)); 
    cls->defineProperty("neighbours", _SE(js_cc_gi_Tetrahedron_neighbours_get), _SE(js_cc_gi_Tetrahedron_neighbours_set)); 
    cls->defineProperty("matrix", _SE(js_cc_gi_Tetrahedron_matrix_get), _SE(js_cc_gi_Tetrahedron_matrix_set)); 
    cls->defineProperty("offset", _SE(js_cc_gi_Tetrahedron_offset_get), _SE(js_cc_gi_Tetrahedron_offset_set)); 
    cls->defineProperty("sphere", _SE(js_cc_gi_Tetrahedron_sphere_get), _SE(js_cc_gi_Tetrahedron_sphere_set)); 
    
    cls->defineFunction("isInCircumSphere", _SE(js_cc_gi_Tetrahedron_isInCircumSphere)); 
    cls->defineFunction("contain", _SE(js_cc_gi_Tetrahedron_contain)); 
    cls->defineFunction("isInnerTetrahedron", _SE(js_cc_gi_Tetrahedron_isInnerTetrahedron)); 
    cls->defineFunction("isOuterCell", _SE(js_cc_gi_Tetrahedron_isOuterCell)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_gi_Tetrahedron));
    
    
    cls->install();
    JSBClassType::registerClass<cc::gi::Tetrahedron>(cls);
    
    __jsb_cc_gi_Tetrahedron_proto = cls->getProto();
    __jsb_cc_gi_Tetrahedron_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_gi_Delaunay_class = nullptr;
se::Object* __jsb_cc_gi_Delaunay_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_gi_Delaunay) 

// js_ctor
static bool js_new_cc_gi_Delaunay(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::gi::Delaunay *result;
    result = (cc::gi::Delaunay *)new cc::gi::Delaunay();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_gi_Delaunay, __jsb_cc_gi_Delaunay_class, js_delete_cc_gi_Delaunay)

static bool js_delete_cc_gi_Delaunay(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_gi_Delaunay) 

static bool js_cc_gi_Delaunay_getProbes(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::Delaunay *arg1 = (cc::gi::Delaunay *) NULL ;
    ccstd::vector< cc::gi::Vertex > *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::gi::Delaunay>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (ccstd::vector< cc::gi::Vertex > *) &((cc::gi::Delaunay const *)arg1)->getProbes();
    // %typemap(out) SWIGTYPE&
    ok &= nativevalue_to_se(*result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Delaunay_getProbes, Error processing arguments");
    SE_HOLD_RETURN_VALUE(*result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_gi_Delaunay_getProbes) 

static bool js_cc_gi_Delaunay_getTetrahedrons(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::Delaunay *arg1 = (cc::gi::Delaunay *) NULL ;
    ccstd::vector< cc::gi::Tetrahedron > *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::gi::Delaunay>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (ccstd::vector< cc::gi::Tetrahedron > *) &((cc::gi::Delaunay const *)arg1)->getTetrahedrons();
    // %typemap(out) SWIGTYPE&
    ok &= nativevalue_to_se(*result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Delaunay_getTetrahedrons, Error processing arguments");
    SE_HOLD_RETURN_VALUE(*result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_gi_Delaunay_getTetrahedrons) 

static bool js_cc_gi_Delaunay_build(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::Delaunay *arg1 = (cc::gi::Delaunay *) NULL ;
    ccstd::vector< cc::gi::Vertex > *arg2 = 0 ;
    ccstd::vector< cc::gi::Vertex > temp2 ;
    ccstd::vector< cc::gi::Tetrahedron > result;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::gi::Delaunay>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Delaunay_build,2,SWIGTYPE_p_ccstd__vectorT_cc__gi__Vertex_t");
    arg2 = &temp2;
    
    result = (arg1)->build((ccstd::vector< cc::gi::Vertex > const &)*arg2);
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Delaunay_build, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_gi_Delaunay_build) 

bool js_register_cc_gi_Delaunay(se::Object* obj) {
    auto* cls = se::Class::create("Delaunay", obj, nullptr, _SE(js_new_cc_gi_Delaunay)); 
    
    
    cls->defineFunction("getProbes", _SE(js_cc_gi_Delaunay_getProbes)); 
    cls->defineFunction("getTetrahedrons", _SE(js_cc_gi_Delaunay_getTetrahedrons)); 
    cls->defineFunction("build", _SE(js_cc_gi_Delaunay_build)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_gi_Delaunay));
    
    
    cls->install();
    JSBClassType::registerClass<cc::gi::Delaunay>(cls);
    
    __jsb_cc_gi_Delaunay_proto = cls->getProto();
    __jsb_cc_gi_Delaunay_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_gi_LightProbesData_class = nullptr;
se::Object* __jsb_cc_gi_LightProbesData_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_gi_LightProbesData) 

// js_ctor
static bool js_new_cc_gi_LightProbesData(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::gi::LightProbesData *result;
    result = (cc::gi::LightProbesData *)new cc::gi::LightProbesData();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_gi_LightProbesData, __jsb_cc_gi_LightProbesData_class, js_delete_cc_gi_LightProbesData)

static bool js_cc_gi_LightProbesData_empty(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbesData *arg1 = (cc::gi::LightProbesData *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbesData>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)((cc::gi::LightProbesData const *)arg1)->empty();
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_gi_LightProbesData_empty) 

static bool js_cc_gi_LightProbesData_reset(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbesData *arg1 = (cc::gi::LightProbesData *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbesData>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->reset();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_gi_LightProbesData_reset) 

static bool js_cc_gi_LightProbesData_updateProbes(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbesData *arg1 = (cc::gi::LightProbesData *) NULL ;
    ccstd::vector< Vec3 > *arg2 = 0 ;
    ccstd::vector< Vec3 > temp2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbesData>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbesData_updateProbes,2,SWIGTYPE_p_ccstd__vectorT_Vec3_t");
    arg2 = &temp2;
    
    (arg1)->updateProbes(*arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_gi_LightProbesData_updateProbes) 

static bool js_cc_gi_LightProbesData_updateTetrahedrons(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbesData *arg1 = (cc::gi::LightProbesData *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbesData>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->updateTetrahedrons();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_gi_LightProbesData_updateTetrahedrons) 

static bool js_cc_gi_LightProbesData_getInterpolationSHCoefficients(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbesData *arg1 = (cc::gi::LightProbesData *) NULL ;
    int32_t arg2 ;
    Vec4 *arg3 = 0 ;
    ccstd::vector< Vec3 > *arg4 = 0 ;
    Vec4 temp3 ;
    ccstd::vector< Vec3 > temp4 ;
    bool result;
    
    if(argc != 3) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 3);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbesData>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbesData_getInterpolationSHCoefficients,2,SWIGTYPE_int32_t"); 
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbesData_getInterpolationSHCoefficients,3,SWIGTYPE_p_Vec4");
    arg3 = &temp3;
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[2], &temp4, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbesData_getInterpolationSHCoefficients,4,SWIGTYPE_p_ccstd__vectorT_Vec3_t");
    arg4 = &temp4;
    
    result = (bool)((cc::gi::LightProbesData const *)arg1)->getInterpolationSHCoefficients(arg2,(Vec4 const &)*arg3,*arg4);
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_gi_LightProbesData_getInterpolationSHCoefficients) 

static bool js_cc_gi_LightProbesData_getInterpolationWeights(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbesData *arg1 = (cc::gi::LightProbesData *) NULL ;
    Vec3 *arg2 = 0 ;
    int32_t arg3 ;
    Vec4 *arg4 = 0 ;
    Vec3 temp2 ;
    Vec4 temp4 ;
    int32_t result;
    
    if(argc != 3) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 3);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbesData>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbesData_getInterpolationWeights,2,SWIGTYPE_p_Vec3");
    arg2 = &temp2;
    
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbesData_getInterpolationWeights,3,SWIGTYPE_int32_t"); 
    
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[2], &temp4, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbesData_getInterpolationWeights,4,SWIGTYPE_p_Vec4");
    arg4 = &temp4;
    
    result = ((cc::gi::LightProbesData const *)arg1)->getInterpolationWeights((Vec3 const &)*arg2,arg3,*arg4);
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LightProbesData_getInterpolationWeights, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_cc_gi_LightProbesData_getInterpolationWeights) 

static bool js_cc_gi_LightProbesData__probes_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbesData *arg1 = (cc::gi::LightProbesData *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbesData>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->_probes, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbesData__probes_set,2,SWIGTYPE_ccstd__vectorT_cc__gi__Vertex_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbesData__probes_set) 

static bool js_cc_gi_LightProbesData__probes_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbesData *arg1 = (cc::gi::LightProbesData *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbesData>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->_probes, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LightProbesData__probes_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->_probes, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbesData__probes_get) 

static bool js_cc_gi_LightProbesData__tetrahedrons_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbesData *arg1 = (cc::gi::LightProbesData *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbesData>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->_tetrahedrons, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbesData__tetrahedrons_set,2,SWIGTYPE_ccstd__vectorT_cc__gi__Tetrahedron_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbesData__tetrahedrons_set) 

static bool js_cc_gi_LightProbesData__tetrahedrons_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbesData *arg1 = (cc::gi::LightProbesData *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbesData>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->_tetrahedrons, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LightProbesData__tetrahedrons_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->_tetrahedrons, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbesData__tetrahedrons_get) 

static bool js_cc_gi_LightProbesData_probes_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbesData *arg1 = (cc::gi::LightProbesData *) NULL ;
    ccstd::vector< cc::gi::Vertex > *arg2 = 0 ;
    ccstd::vector< cc::gi::Vertex > temp2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbesData>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbesData_probes_set,2,SWIGTYPE_p_ccstd__vectorT_cc__gi__Vertex_t");
    arg2 = &temp2;
    
    cc_gi_LightProbesData_probes_set(arg1,*arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbesData_probes_set) 

static bool js_cc_gi_LightProbesData_probes_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbesData *arg1 = (cc::gi::LightProbesData *) NULL ;
    ccstd::vector< cc::gi::Vertex > *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbesData>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (ccstd::vector< cc::gi::Vertex > *) &cc_gi_LightProbesData_probes_get(arg1);
    // %typemap(out) SWIGTYPE&
    ok &= nativevalue_to_se(*result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LightProbesData_probes_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(*result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbesData_probes_get) 

static bool js_cc_gi_LightProbesData_tetrahedrons_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbesData *arg1 = (cc::gi::LightProbesData *) NULL ;
    ccstd::vector< cc::gi::Tetrahedron > *arg2 = 0 ;
    ccstd::vector< cc::gi::Tetrahedron > temp2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbesData>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbesData_tetrahedrons_set,2,SWIGTYPE_p_ccstd__vectorT_cc__gi__Tetrahedron_t");
    arg2 = &temp2;
    
    cc_gi_LightProbesData_tetrahedrons_set(arg1,*arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbesData_tetrahedrons_set) 

static bool js_cc_gi_LightProbesData_tetrahedrons_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbesData *arg1 = (cc::gi::LightProbesData *) NULL ;
    ccstd::vector< cc::gi::Tetrahedron > *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbesData>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (ccstd::vector< cc::gi::Tetrahedron > *) &cc_gi_LightProbesData_tetrahedrons_get(arg1);
    // %typemap(out) SWIGTYPE&
    ok &= nativevalue_to_se(*result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LightProbesData_tetrahedrons_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(*result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbesData_tetrahedrons_get) 

static bool js_delete_cc_gi_LightProbesData(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_gi_LightProbesData) 

bool js_register_cc_gi_LightProbesData(se::Object* obj) {
    auto* cls = se::Class::create("LightProbesData", obj, nullptr, _SE(js_new_cc_gi_LightProbesData)); 
    
    cls->defineProperty("_probes", _SE(js_cc_gi_LightProbesData__probes_get), _SE(js_cc_gi_LightProbesData__probes_set)); 
    cls->defineProperty("_tetrahedrons", _SE(js_cc_gi_LightProbesData__tetrahedrons_get), _SE(js_cc_gi_LightProbesData__tetrahedrons_set)); 
    cls->defineProperty("probes", _SE(js_cc_gi_LightProbesData_probes_get), _SE(js_cc_gi_LightProbesData_probes_set)); 
    cls->defineProperty("tetrahedrons", _SE(js_cc_gi_LightProbesData_tetrahedrons_get), _SE(js_cc_gi_LightProbesData_tetrahedrons_set)); 
    
    cls->defineFunction("empty", _SE(js_cc_gi_LightProbesData_empty)); 
    cls->defineFunction("reset", _SE(js_cc_gi_LightProbesData_reset)); 
    cls->defineFunction("updateProbes", _SE(js_cc_gi_LightProbesData_updateProbes)); 
    cls->defineFunction("updateTetrahedrons", _SE(js_cc_gi_LightProbesData_updateTetrahedrons)); 
    cls->defineFunction("getInterpolationSHCoefficients", _SE(js_cc_gi_LightProbesData_getInterpolationSHCoefficients)); 
    cls->defineFunction("getInterpolationWeights", _SE(js_cc_gi_LightProbesData_getInterpolationWeights)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_gi_LightProbesData));
    
    
    cls->install();
    JSBClassType::registerClass<cc::gi::LightProbesData>(cls);
    
    __jsb_cc_gi_LightProbesData_proto = cls->getProto();
    __jsb_cc_gi_LightProbesData_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_gi_LightProbes_class = nullptr;
se::Object* __jsb_cc_gi_LightProbes_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_gi_LightProbes) 

// js_ctor
static bool js_new_cc_gi_LightProbes(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::gi::LightProbes *result;
    result = (cc::gi::LightProbes *)new cc::gi::LightProbes();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_gi_LightProbes, __jsb_cc_gi_LightProbes_class, js_delete_cc_gi_LightProbes)

static bool js_delete_cc_gi_LightProbes(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_gi_LightProbes) 

static bool js_cc_gi_LightProbes_initialize(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    cc::gi::LightProbeInfo *arg2 = (cc::gi::LightProbeInfo *) NULL ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbes_initialize,2,SWIGTYPE_p_cc__gi__LightProbeInfo"); 
    (arg1)->initialize(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_gi_LightProbes_initialize) 

static bool js_cc_gi_LightProbes_empty(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)((cc::gi::LightProbes const *)arg1)->empty();
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_gi_LightProbes_empty) 

static bool js_cc_gi_LightProbes__enabled_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg1->_enabled);
    SE_PRECONDITION2(ok, false, "LightProbes__enabled_set,2,SWIGTYPE_bool"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbes__enabled_set) 

static bool js_cc_gi_LightProbes__enabled_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // out 5
    ok &= nativevalue_to_se(arg1->_enabled, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbes__enabled_get) 

static bool js_cc_gi_LightProbes__GIScale_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1->_GIScale, nullptr);
    SE_PRECONDITION2(ok, false, "LightProbes__GIScale_set,2,SWIGTYPE_float"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbes__GIScale_set) 

static bool js_cc_gi_LightProbes__GIScale_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // out 1
    ok &= nativevalue_to_se(arg1->_GIScale, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbes__GIScale_get) 

static bool js_cc_gi_LightProbes__GISamples_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->_GISamples, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbes__GISamples_set,2,SWIGTYPE_uint32_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbes__GISamples_set) 

static bool js_cc_gi_LightProbes__GISamples_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->_GISamples, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LightProbes__GISamples_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->_GISamples, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbes__GISamples_get) 

static bool js_cc_gi_LightProbes__Bounces_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->_Bounces, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbes__Bounces_set,2,SWIGTYPE_uint32_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbes__Bounces_set) 

static bool js_cc_gi_LightProbes__Bounces_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->_Bounces, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LightProbes__Bounces_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->_Bounces, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbes__Bounces_get) 

static bool js_cc_gi_LightProbes__reduceRinging_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1->_reduceRinging, nullptr);
    SE_PRECONDITION2(ok, false, "LightProbes__reduceRinging_set,2,SWIGTYPE_float"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbes__reduceRinging_set) 

static bool js_cc_gi_LightProbes__reduceRinging_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // out 1
    ok &= nativevalue_to_se(arg1->_reduceRinging, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbes__reduceRinging_get) 

static bool js_cc_gi_LightProbes__showProbe_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg1->_showProbe);
    SE_PRECONDITION2(ok, false, "LightProbes__showProbe_set,2,SWIGTYPE_bool"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbes__showProbe_set) 

static bool js_cc_gi_LightProbes__showProbe_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // out 5
    ok &= nativevalue_to_se(arg1->_showProbe, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbes__showProbe_get) 

static bool js_cc_gi_LightProbes__showWireframe_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg1->_showWireframe);
    SE_PRECONDITION2(ok, false, "LightProbes__showWireframe_set,2,SWIGTYPE_bool"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbes__showWireframe_set) 

static bool js_cc_gi_LightProbes__showWireframe_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // out 5
    ok &= nativevalue_to_se(arg1->_showWireframe, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbes__showWireframe_get) 

static bool js_cc_gi_LightProbes__showConvex_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg1->_showConvex);
    SE_PRECONDITION2(ok, false, "LightProbes__showConvex_set,2,SWIGTYPE_bool"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbes__showConvex_set) 

static bool js_cc_gi_LightProbes__showConvex_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // out 5
    ok &= nativevalue_to_se(arg1->_showConvex, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbes__showConvex_get) 

static bool js_cc_gi_LightProbes__data_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->_data, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbes__data_set,2,SWIGTYPE_cc__gi__LightProbesData"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbes__data_set) 

static bool js_cc_gi_LightProbes__data_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->_data, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LightProbes__data_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->_data, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbes__data_get) 

static bool js_cc_gi_LightProbes_enabled_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    bool arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg2);
    SE_PRECONDITION2(ok, false, "LightProbes_enabled_set,2,SWIGTYPE_bool"); 
    cc_gi_LightProbes_enabled_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbes_enabled_set) 

static bool js_cc_gi_LightProbes_enabled_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    bool result;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)cc_gi_LightProbes_enabled_get(arg1);
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbes_enabled_get) 

static bool js_cc_gi_LightProbes_GIScale_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    float arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg2, nullptr);
    SE_PRECONDITION2(ok, false, "LightProbes_GIScale_set,2,SWIGTYPE_float"); 
    cc_gi_LightProbes_GIScale_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbes_GIScale_set) 

static bool js_cc_gi_LightProbes_GIScale_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    float result;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (float)cc_gi_LightProbes_GIScale_get(arg1);
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbes_GIScale_get) 

static bool js_cc_gi_LightProbes_GISamples_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    uint32_t arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbes_GISamples_set,2,SWIGTYPE_uint32_t"); 
    
    cc_gi_LightProbes_GISamples_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbes_GISamples_set) 

static bool js_cc_gi_LightProbes_GISamples_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    uint32_t result;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = cc_gi_LightProbes_GISamples_get(arg1);
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LightProbes_GISamples_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbes_GISamples_get) 

static bool js_cc_gi_LightProbes_Bounces_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    uint32_t arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbes_Bounces_set,2,SWIGTYPE_uint32_t"); 
    
    cc_gi_LightProbes_Bounces_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbes_Bounces_set) 

static bool js_cc_gi_LightProbes_Bounces_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    uint32_t result;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = cc_gi_LightProbes_Bounces_get(arg1);
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LightProbes_Bounces_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbes_Bounces_get) 

static bool js_cc_gi_LightProbes_reduceRinging_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    float arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg2, nullptr);
    SE_PRECONDITION2(ok, false, "LightProbes_reduceRinging_set,2,SWIGTYPE_float"); 
    cc_gi_LightProbes_reduceRinging_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbes_reduceRinging_set) 

static bool js_cc_gi_LightProbes_reduceRinging_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    float result;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (float)cc_gi_LightProbes_reduceRinging_get(arg1);
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbes_reduceRinging_get) 

static bool js_cc_gi_LightProbes_showProbe_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    bool arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg2);
    SE_PRECONDITION2(ok, false, "LightProbes_showProbe_set,2,SWIGTYPE_bool"); 
    cc_gi_LightProbes_showProbe_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbes_showProbe_set) 

static bool js_cc_gi_LightProbes_showProbe_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    bool result;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)cc_gi_LightProbes_showProbe_get(arg1);
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbes_showProbe_get) 

static bool js_cc_gi_LightProbes_showWireframe_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    bool arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg2);
    SE_PRECONDITION2(ok, false, "LightProbes_showWireframe_set,2,SWIGTYPE_bool"); 
    cc_gi_LightProbes_showWireframe_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbes_showWireframe_set) 

static bool js_cc_gi_LightProbes_showWireframe_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    bool result;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)cc_gi_LightProbes_showWireframe_get(arg1);
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbes_showWireframe_get) 

static bool js_cc_gi_LightProbes_showConvex_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    bool arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg2);
    SE_PRECONDITION2(ok, false, "LightProbes_showConvex_set,2,SWIGTYPE_bool"); 
    cc_gi_LightProbes_showConvex_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbes_showConvex_set) 

static bool js_cc_gi_LightProbes_showConvex_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    bool result;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)cc_gi_LightProbes_showConvex_get(arg1);
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbes_showConvex_get) 

static bool js_cc_gi_LightProbes_data_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    cc::gi::LightProbesData *arg2 = 0 ;
    cc::gi::LightProbesData temp2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbes_data_set,2,SWIGTYPE_p_cc__gi__LightProbesData");
    arg2 = &temp2;
    
    cc_gi_LightProbes_data_set(arg1,*arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbes_data_set) 

static bool js_cc_gi_LightProbes_data_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbes *arg1 = (cc::gi::LightProbes *) NULL ;
    cc::gi::LightProbesData *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbes>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::gi::LightProbesData *) &cc_gi_LightProbes_data_get(arg1);
    // %typemap(out) SWIGTYPE&
    ok &= nativevalue_to_se(*result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LightProbes_data_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(*result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbes_data_get) 

bool js_register_cc_gi_LightProbes(se::Object* obj) {
    auto* cls = se::Class::create("LightProbes", obj, nullptr, _SE(js_new_cc_gi_LightProbes)); 
    
    cls->defineProperty("_enabled", _SE(js_cc_gi_LightProbes__enabled_get), _SE(js_cc_gi_LightProbes__enabled_set)); 
    cls->defineProperty("_GIScale", _SE(js_cc_gi_LightProbes__GIScale_get), _SE(js_cc_gi_LightProbes__GIScale_set)); 
    cls->defineProperty("_GISamples", _SE(js_cc_gi_LightProbes__GISamples_get), _SE(js_cc_gi_LightProbes__GISamples_set)); 
    cls->defineProperty("_Bounces", _SE(js_cc_gi_LightProbes__Bounces_get), _SE(js_cc_gi_LightProbes__Bounces_set)); 
    cls->defineProperty("_reduceRinging", _SE(js_cc_gi_LightProbes__reduceRinging_get), _SE(js_cc_gi_LightProbes__reduceRinging_set)); 
    cls->defineProperty("_showProbe", _SE(js_cc_gi_LightProbes__showProbe_get), _SE(js_cc_gi_LightProbes__showProbe_set)); 
    cls->defineProperty("_showWireframe", _SE(js_cc_gi_LightProbes__showWireframe_get), _SE(js_cc_gi_LightProbes__showWireframe_set)); 
    cls->defineProperty("_showConvex", _SE(js_cc_gi_LightProbes__showConvex_get), _SE(js_cc_gi_LightProbes__showConvex_set)); 
    cls->defineProperty("_data", _SE(js_cc_gi_LightProbes__data_get), _SE(js_cc_gi_LightProbes__data_set)); 
    cls->defineProperty("enabled", _SE(js_cc_gi_LightProbes_enabled_get), _SE(js_cc_gi_LightProbes_enabled_set)); 
    cls->defineProperty("GIScale", _SE(js_cc_gi_LightProbes_GIScale_get), _SE(js_cc_gi_LightProbes_GIScale_set)); 
    cls->defineProperty("GISamples", _SE(js_cc_gi_LightProbes_GISamples_get), _SE(js_cc_gi_LightProbes_GISamples_set)); 
    cls->defineProperty("Bounces", _SE(js_cc_gi_LightProbes_Bounces_get), _SE(js_cc_gi_LightProbes_Bounces_set)); 
    cls->defineProperty("reduceRinging", _SE(js_cc_gi_LightProbes_reduceRinging_get), _SE(js_cc_gi_LightProbes_reduceRinging_set)); 
    cls->defineProperty("showProbe", _SE(js_cc_gi_LightProbes_showProbe_get), _SE(js_cc_gi_LightProbes_showProbe_set)); 
    cls->defineProperty("showWireframe", _SE(js_cc_gi_LightProbes_showWireframe_get), _SE(js_cc_gi_LightProbes_showWireframe_set)); 
    cls->defineProperty("showConvex", _SE(js_cc_gi_LightProbes_showConvex_get), _SE(js_cc_gi_LightProbes_showConvex_set)); 
    cls->defineProperty("data", _SE(js_cc_gi_LightProbes_data_get), _SE(js_cc_gi_LightProbes_data_set)); 
    
    cls->defineFunction("initialize", _SE(js_cc_gi_LightProbes_initialize)); 
    cls->defineFunction("empty", _SE(js_cc_gi_LightProbes_empty)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_gi_LightProbes));
    
    
    cls->install();
    JSBClassType::registerClass<cc::gi::LightProbes>(cls);
    
    __jsb_cc_gi_LightProbes_proto = cls->getProto();
    __jsb_cc_gi_LightProbes_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_gi_LightProbeInfo_class = nullptr;
se::Object* __jsb_cc_gi_LightProbeInfo_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_gi_LightProbeInfo) 

// js_ctor
static bool js_new_cc_gi_LightProbeInfo(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::gi::LightProbeInfo *result;
    result = (cc::gi::LightProbeInfo *)new cc::gi::LightProbeInfo();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_gi_LightProbeInfo, __jsb_cc_gi_LightProbeInfo_class, js_delete_cc_gi_LightProbeInfo)

static bool js_delete_cc_gi_LightProbeInfo(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_gi_LightProbeInfo) 

static bool js_cc_gi_LightProbeInfo_activate(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    cc::gi::LightProbes *arg2 = (cc::gi::LightProbes *) NULL ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE*
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbeInfo_activate,2,SWIGTYPE_p_cc__gi__LightProbes"); 
    (arg1)->activate(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_gi_LightProbeInfo_activate) 

static bool js_cc_gi_LightProbeInfo__enabled_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg1->_enabled);
    SE_PRECONDITION2(ok, false, "LightProbeInfo__enabled_set,2,SWIGTYPE_bool"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbeInfo__enabled_set) 

static bool js_cc_gi_LightProbeInfo__enabled_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // out 5
    ok &= nativevalue_to_se(arg1->_enabled, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbeInfo__enabled_get) 

static bool js_cc_gi_LightProbeInfo__GIScale_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1->_GIScale, nullptr);
    SE_PRECONDITION2(ok, false, "LightProbeInfo__GIScale_set,2,SWIGTYPE_float"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbeInfo__GIScale_set) 

static bool js_cc_gi_LightProbeInfo__GIScale_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // out 1
    ok &= nativevalue_to_se(arg1->_GIScale, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbeInfo__GIScale_get) 

static bool js_cc_gi_LightProbeInfo__GISamples_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->_GISamples, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbeInfo__GISamples_set,2,SWIGTYPE_uint32_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbeInfo__GISamples_set) 

static bool js_cc_gi_LightProbeInfo__GISamples_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->_GISamples, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LightProbeInfo__GISamples_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->_GISamples, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbeInfo__GISamples_get) 

static bool js_cc_gi_LightProbeInfo__Bounces_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->_Bounces, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbeInfo__Bounces_set,2,SWIGTYPE_uint32_t"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbeInfo__Bounces_set) 

static bool js_cc_gi_LightProbeInfo__Bounces_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->_Bounces, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LightProbeInfo__Bounces_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->_Bounces, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbeInfo__Bounces_get) 

static bool js_cc_gi_LightProbeInfo__reduceRinging_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1->_reduceRinging, nullptr);
    SE_PRECONDITION2(ok, false, "LightProbeInfo__reduceRinging_set,2,SWIGTYPE_float"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbeInfo__reduceRinging_set) 

static bool js_cc_gi_LightProbeInfo__reduceRinging_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // out 1
    ok &= nativevalue_to_se(arg1->_reduceRinging, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbeInfo__reduceRinging_get) 

static bool js_cc_gi_LightProbeInfo__showProbe_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg1->_showProbe);
    SE_PRECONDITION2(ok, false, "LightProbeInfo__showProbe_set,2,SWIGTYPE_bool"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbeInfo__showProbe_set) 

static bool js_cc_gi_LightProbeInfo__showProbe_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // out 5
    ok &= nativevalue_to_se(arg1->_showProbe, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbeInfo__showProbe_get) 

static bool js_cc_gi_LightProbeInfo__showWireframe_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg1->_showWireframe);
    SE_PRECONDITION2(ok, false, "LightProbeInfo__showWireframe_set,2,SWIGTYPE_bool"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbeInfo__showWireframe_set) 

static bool js_cc_gi_LightProbeInfo__showWireframe_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // out 5
    ok &= nativevalue_to_se(arg1->_showWireframe, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbeInfo__showWireframe_get) 

static bool js_cc_gi_LightProbeInfo__showConvex_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg1->_showConvex);
    SE_PRECONDITION2(ok, false, "LightProbeInfo__showConvex_set,2,SWIGTYPE_bool"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbeInfo__showConvex_set) 

static bool js_cc_gi_LightProbeInfo__showConvex_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // out 5
    ok &= nativevalue_to_se(arg1->_showConvex, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbeInfo__showConvex_get) 

static bool js_cc_gi_LightProbeInfo__data_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg1->_data, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbeInfo__data_set,2,SWIGTYPE_cc__gi__LightProbesData"); 
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbeInfo__data_set) 

static bool js_cc_gi_LightProbeInfo__data_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(arg1->_data, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LightProbeInfo__data_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->_data, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbeInfo__data_get) 

static bool js_cc_gi_LightProbeInfo_enabled_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    bool arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg2);
    SE_PRECONDITION2(ok, false, "LightProbeInfo_enabled_set,2,SWIGTYPE_bool"); 
    cc_gi_LightProbeInfo_enabled_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbeInfo_enabled_set) 

static bool js_cc_gi_LightProbeInfo_enabled_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    bool result;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)cc_gi_LightProbeInfo_enabled_get(arg1);
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbeInfo_enabled_get) 

static bool js_cc_gi_LightProbeInfo_GIScale_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    float arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg2, nullptr);
    SE_PRECONDITION2(ok, false, "LightProbeInfo_GIScale_set,2,SWIGTYPE_float"); 
    cc_gi_LightProbeInfo_GIScale_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbeInfo_GIScale_set) 

static bool js_cc_gi_LightProbeInfo_GIScale_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    float result;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (float)cc_gi_LightProbeInfo_GIScale_get(arg1);
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbeInfo_GIScale_get) 

static bool js_cc_gi_LightProbeInfo_GISamples_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    uint32_t arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbeInfo_GISamples_set,2,SWIGTYPE_uint32_t"); 
    
    cc_gi_LightProbeInfo_GISamples_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbeInfo_GISamples_set) 

static bool js_cc_gi_LightProbeInfo_GISamples_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    uint32_t result;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = cc_gi_LightProbeInfo_GISamples_get(arg1);
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LightProbeInfo_GISamples_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbeInfo_GISamples_get) 

static bool js_cc_gi_LightProbeInfo_Bounces_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    uint32_t arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // %typemap(in) SWIGTYPE value in
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbeInfo_Bounces_set,2,SWIGTYPE_uint32_t"); 
    
    cc_gi_LightProbeInfo_Bounces_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbeInfo_Bounces_set) 

static bool js_cc_gi_LightProbeInfo_Bounces_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    uint32_t result;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = cc_gi_LightProbeInfo_Bounces_get(arg1);
    // %typemap(out) SWIGTYPE
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LightProbeInfo_Bounces_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbeInfo_Bounces_get) 

static bool js_cc_gi_LightProbeInfo_reduceRinging_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    float arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg2, nullptr);
    SE_PRECONDITION2(ok, false, "LightProbeInfo_reduceRinging_set,2,SWIGTYPE_float"); 
    cc_gi_LightProbeInfo_reduceRinging_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbeInfo_reduceRinging_set) 

static bool js_cc_gi_LightProbeInfo_reduceRinging_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    float result;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (float)cc_gi_LightProbeInfo_reduceRinging_get(arg1);
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbeInfo_reduceRinging_get) 

static bool js_cc_gi_LightProbeInfo_showProbe_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    bool arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg2);
    SE_PRECONDITION2(ok, false, "LightProbeInfo_showProbe_set,2,SWIGTYPE_bool"); 
    cc_gi_LightProbeInfo_showProbe_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbeInfo_showProbe_set) 

static bool js_cc_gi_LightProbeInfo_showProbe_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    bool result;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)cc_gi_LightProbeInfo_showProbe_get(arg1);
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbeInfo_showProbe_get) 

static bool js_cc_gi_LightProbeInfo_showWireframe_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    bool arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg2);
    SE_PRECONDITION2(ok, false, "LightProbeInfo_showWireframe_set,2,SWIGTYPE_bool"); 
    cc_gi_LightProbeInfo_showWireframe_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbeInfo_showWireframe_set) 

static bool js_cc_gi_LightProbeInfo_showWireframe_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    bool result;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)cc_gi_LightProbeInfo_showWireframe_get(arg1);
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbeInfo_showWireframe_get) 

static bool js_cc_gi_LightProbeInfo_showConvex_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    bool arg2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[0], &arg2);
    SE_PRECONDITION2(ok, false, "LightProbeInfo_showConvex_set,2,SWIGTYPE_bool"); 
    cc_gi_LightProbeInfo_showConvex_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbeInfo_showConvex_set) 

static bool js_cc_gi_LightProbeInfo_showConvex_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    bool result;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (bool)cc_gi_LightProbeInfo_showConvex_get(arg1);
    // out 5
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbeInfo_showConvex_get) 

static bool js_cc_gi_LightProbeInfo_data_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    cc::gi::LightProbesData *arg2 = 0 ;
    cc::gi::LightProbesData temp2 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "LightProbeInfo_data_set,2,SWIGTYPE_p_cc__gi__LightProbesData");
    arg2 = &temp2;
    
    cc_gi_LightProbeInfo_data_set(arg1,*arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_gi_LightProbeInfo_data_set) 

static bool js_cc_gi_LightProbeInfo_data_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::gi::LightProbeInfo *arg1 = (cc::gi::LightProbeInfo *) NULL ;
    cc::gi::LightProbesData *result = 0 ;
    
    arg1 = SE_THIS_OBJECT<cc::gi::LightProbeInfo>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (cc::gi::LightProbesData *) &cc_gi_LightProbeInfo_data_get(arg1);
    // %typemap(out) SWIGTYPE&
    ok &= nativevalue_to_se(*result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "LightProbeInfo_data_get, Error processing arguments");
    SE_HOLD_RETURN_VALUE(*result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_gi_LightProbeInfo_data_get) 

bool js_register_cc_gi_LightProbeInfo(se::Object* obj) {
    auto* cls = se::Class::create("LightProbeInfo", obj, nullptr, _SE(js_new_cc_gi_LightProbeInfo)); 
    
    cls->defineProperty("_enabled", _SE(js_cc_gi_LightProbeInfo__enabled_get), _SE(js_cc_gi_LightProbeInfo__enabled_set)); 
    cls->defineProperty("_GIScale", _SE(js_cc_gi_LightProbeInfo__GIScale_get), _SE(js_cc_gi_LightProbeInfo__GIScale_set)); 
    cls->defineProperty("_GISamples", _SE(js_cc_gi_LightProbeInfo__GISamples_get), _SE(js_cc_gi_LightProbeInfo__GISamples_set)); 
    cls->defineProperty("_Bounces", _SE(js_cc_gi_LightProbeInfo__Bounces_get), _SE(js_cc_gi_LightProbeInfo__Bounces_set)); 
    cls->defineProperty("_reduceRinging", _SE(js_cc_gi_LightProbeInfo__reduceRinging_get), _SE(js_cc_gi_LightProbeInfo__reduceRinging_set)); 
    cls->defineProperty("_showProbe", _SE(js_cc_gi_LightProbeInfo__showProbe_get), _SE(js_cc_gi_LightProbeInfo__showProbe_set)); 
    cls->defineProperty("_showWireframe", _SE(js_cc_gi_LightProbeInfo__showWireframe_get), _SE(js_cc_gi_LightProbeInfo__showWireframe_set)); 
    cls->defineProperty("_showConvex", _SE(js_cc_gi_LightProbeInfo__showConvex_get), _SE(js_cc_gi_LightProbeInfo__showConvex_set)); 
    cls->defineProperty("_data", _SE(js_cc_gi_LightProbeInfo__data_get), _SE(js_cc_gi_LightProbeInfo__data_set)); 
    cls->defineProperty("enabled", _SE(js_cc_gi_LightProbeInfo_enabled_get), _SE(js_cc_gi_LightProbeInfo_enabled_set)); 
    cls->defineProperty("GIScale", _SE(js_cc_gi_LightProbeInfo_GIScale_get), _SE(js_cc_gi_LightProbeInfo_GIScale_set)); 
    cls->defineProperty("GISamples", _SE(js_cc_gi_LightProbeInfo_GISamples_get), _SE(js_cc_gi_LightProbeInfo_GISamples_set)); 
    cls->defineProperty("Bounces", _SE(js_cc_gi_LightProbeInfo_Bounces_get), _SE(js_cc_gi_LightProbeInfo_Bounces_set)); 
    cls->defineProperty("reduceRinging", _SE(js_cc_gi_LightProbeInfo_reduceRinging_get), _SE(js_cc_gi_LightProbeInfo_reduceRinging_set)); 
    cls->defineProperty("showProbe", _SE(js_cc_gi_LightProbeInfo_showProbe_get), _SE(js_cc_gi_LightProbeInfo_showProbe_set)); 
    cls->defineProperty("showWireframe", _SE(js_cc_gi_LightProbeInfo_showWireframe_get), _SE(js_cc_gi_LightProbeInfo_showWireframe_set)); 
    cls->defineProperty("showConvex", _SE(js_cc_gi_LightProbeInfo_showConvex_get), _SE(js_cc_gi_LightProbeInfo_showConvex_set)); 
    cls->defineProperty("data", _SE(js_cc_gi_LightProbeInfo_data_get), _SE(js_cc_gi_LightProbeInfo_data_set)); 
    
    cls->defineFunction("activate", _SE(js_cc_gi_LightProbeInfo_activate)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_gi_LightProbeInfo));
    
    
    cls->install();
    JSBClassType::registerClass<cc::gi::LightProbeInfo>(cls);
    
    __jsb_cc_gi_LightProbeInfo_proto = cls->getProto();
    __jsb_cc_gi_LightProbeInfo_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}




bool register_all_gi(se::Object* obj) {
    // Get the ns
    se::Value nsVal;
    if (!obj->getProperty("jsb", &nsVal, true))
    {
        se::HandleObject jsobj(se::Object::createPlainObject());
        nsVal.setObject(jsobj);
        obj->setProperty("jsb", nsVal);
    }
    se::Object* ns = nsVal.toObject();
    /* Register classes */
    js_register_cc_gi_Vertex(ns); 
    js_register_cc_gi_CircumSphere(ns); 
    js_register_cc_gi_Tetrahedron(ns); 
    js_register_cc_gi_Delaunay(ns); 
    js_register_cc_gi_LightProbesData(ns); 
    js_register_cc_gi_LightProbes(ns); 
    js_register_cc_gi_LightProbeInfo(ns); 
    
    /* Register global variables & global functions */
    
    
    
    return true;
}


#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif
// clang-format on
